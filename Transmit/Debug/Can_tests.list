
Can_tests.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001064  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080011f8  080011f8  000111f8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001238  08001238  00011238  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800123c  0800123c  0001123c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08001240  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
  7 .bss          00000080  20000004  20000004  00020004  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000084  20000084  00020004  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000ba97  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001ba5  00000000  00000000  0002bacb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001880  00000000  00000000  0002d670  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000408  00000000  00000000  0002eef0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000618  00000000  00000000  0002f2f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00002c7e  00000000  00000000  0002f910  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00001d85  00000000  00000000  0003258e  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00034313  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000008cc  00000000  00000000  00034390  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080011e0 	.word	0x080011e0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	080011e0 	.word	0x080011e0

080001d4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001d4:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 80001d6:	4b08      	ldr	r3, [pc, #32]	; (80001f8 <HAL_InitTick+0x24>)
{
 80001d8:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 80001da:	6818      	ldr	r0, [r3, #0]
 80001dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001e0:	fbb0 f0f3 	udiv	r0, r0, r3
 80001e4:	f000 f9d8 	bl	8000598 <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 80001e8:	2200      	movs	r2, #0
 80001ea:	4621      	mov	r1, r4
 80001ec:	f04f 30ff 	mov.w	r0, #4294967295
 80001f0:	f000 f99e 	bl	8000530 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 80001f4:	2000      	movs	r0, #0
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000000 	.word	0x20000000

080001fc <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001fc:	4a07      	ldr	r2, [pc, #28]	; (800021c <HAL_Init+0x20>)
{
 80001fe:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000200:	6813      	ldr	r3, [r2, #0]
 8000202:	f043 0310 	orr.w	r3, r3, #16
 8000206:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000208:	2003      	movs	r0, #3
 800020a:	f000 f97f 	bl	800050c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800020e:	2000      	movs	r0, #0
 8000210:	f7ff ffe0 	bl	80001d4 <HAL_InitTick>
  HAL_MspInit();
 8000214:	f000 ff14 	bl	8001040 <HAL_MspInit>
}
 8000218:	2000      	movs	r0, #0
 800021a:	bd08      	pop	{r3, pc}
 800021c:	40022000 	.word	0x40022000

08000220 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000220:	4a02      	ldr	r2, [pc, #8]	; (800022c <HAL_IncTick+0xc>)
 8000222:	6813      	ldr	r3, [r2, #0]
 8000224:	3301      	adds	r3, #1
 8000226:	6013      	str	r3, [r2, #0]
 8000228:	4770      	bx	lr
 800022a:	bf00      	nop
 800022c:	20000020 	.word	0x20000020

08000230 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000230:	4b01      	ldr	r3, [pc, #4]	; (8000238 <HAL_GetTick+0x8>)
 8000232:	6818      	ldr	r0, [r3, #0]
}
 8000234:	4770      	bx	lr
 8000236:	bf00      	nop
 8000238:	20000020 	.word	0x20000020

0800023c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *             the configuration information for the specified CAN.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef* hcan)
{
 800023c:	b570      	push	{r4, r5, r6, lr}
  uint32_t status = CAN_INITSTATUS_FAILED;  /* Default init status */
  uint32_t tickstart = 0U;
  
  /* Check CAN handle */
  if(hcan == NULL)
 800023e:	4604      	mov	r4, r0
 8000240:	2800      	cmp	r0, #0
 8000242:	d072      	beq.n	800032a <HAL_CAN_Init+0xee>
  assert_param(IS_CAN_SJW(hcan->Init.SJW));
  assert_param(IS_CAN_BS1(hcan->Init.BS1));
  assert_param(IS_CAN_BS2(hcan->Init.BS2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));
  
  if(hcan->State == HAL_CAN_STATE_RESET)
 8000244:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000248:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800024c:	b91b      	cbnz	r3, 8000256 <HAL_CAN_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hcan->Lock = HAL_UNLOCKED;
 800024e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    /* Init the low level hardware */
    HAL_CAN_MspInit(hcan);
 8000252:	f000 fe39 	bl	8000ec8 <HAL_CAN_MspInit>
  }
  
  /* Initialize the CAN state*/
  hcan->State = HAL_CAN_STATE_BUSY;
 8000256:	2302      	movs	r3, #2
 8000258:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  
  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800025c:	6823      	ldr	r3, [r4, #0]
 800025e:	681a      	ldr	r2, [r3, #0]
 8000260:	f022 0202 	bic.w	r2, r2, #2
 8000264:	601a      	str	r2, [r3, #0]

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000266:	681a      	ldr	r2, [r3, #0]
 8000268:	f042 0201 	orr.w	r2, r2, #1
 800026c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();   
 800026e:	f7ff ffdf 	bl	8000230 <HAL_GetTick>
 8000272:	4606      	mov	r6, r0
  
  /* Wait the acknowledge */
  while(HAL_IS_BIT_CLR(hcan->Instance->MSR, CAN_MSR_INAK))
 8000274:	6823      	ldr	r3, [r4, #0]
 8000276:	685d      	ldr	r5, [r3, #4]
 8000278:	f015 0501 	ands.w	r5, r5, #1
 800027c:	d057      	beq.n	800032e <HAL_CAN_Init+0xf2>
      return HAL_TIMEOUT;
    }
  }

  /* Check acknowledge */
  if (HAL_IS_BIT_SET(hcan->Instance->MSR, CAN_MSR_INAK))
 800027e:	685a      	ldr	r2, [r3, #4]
 8000280:	07d1      	lsls	r1, r2, #31
 8000282:	d54f      	bpl.n	8000324 <HAL_CAN_Init+0xe8>
  {
    /* Set the time triggered communication mode */
    if (hcan->Init.TTCM == ENABLE)
 8000284:	69a2      	ldr	r2, [r4, #24]
 8000286:	2a01      	cmp	r2, #1
    {
      SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000288:	681a      	ldr	r2, [r3, #0]
 800028a:	bf0c      	ite	eq
 800028c:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
    }
    else
    {
      CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000290:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 8000294:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic bus-off management */
    if (hcan->Init.ABOM == ENABLE)
 8000296:	69e2      	ldr	r2, [r4, #28]
 8000298:	2a01      	cmp	r2, #1
    {
      SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800029a:	681a      	ldr	r2, [r3, #0]
 800029c:	bf0c      	ite	eq
 800029e:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
    }
    else
    {
      CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80002a2:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 80002a6:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic wake-up mode */
    if (hcan->Init.AWUM == ENABLE)
 80002a8:	6a22      	ldr	r2, [r4, #32]
 80002aa:	2a01      	cmp	r2, #1
    {
      SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80002ac:	681a      	ldr	r2, [r3, #0]
 80002ae:	bf0c      	ite	eq
 80002b0:	f042 0220 	orreq.w	r2, r2, #32
    }
    else
    {
      CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80002b4:	f022 0220 	bicne.w	r2, r2, #32
 80002b8:	601a      	str	r2, [r3, #0]
    }

    /* Set the no automatic retransmission */
    if (hcan->Init.NART == ENABLE)
 80002ba:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80002bc:	2a01      	cmp	r2, #1
    {
      SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80002be:	681a      	ldr	r2, [r3, #0]
 80002c0:	bf0c      	ite	eq
 80002c2:	f042 0210 	orreq.w	r2, r2, #16
    }
    else
    {
      CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80002c6:	f022 0210 	bicne.w	r2, r2, #16
 80002ca:	601a      	str	r2, [r3, #0]
    }

    /* Set the receive FIFO locked mode */
    if (hcan->Init.RFLM == ENABLE)
 80002cc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80002ce:	2a01      	cmp	r2, #1
    {
      SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80002d0:	681a      	ldr	r2, [r3, #0]
 80002d2:	bf0c      	ite	eq
 80002d4:	f042 0208 	orreq.w	r2, r2, #8
    }
    else
    {
      CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80002d8:	f022 0208 	bicne.w	r2, r2, #8
 80002dc:	601a      	str	r2, [r3, #0]
    }

    /* Set the transmit FIFO priority */
    if (hcan->Init.TXFP == ENABLE)
 80002de:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80002e0:	2a01      	cmp	r2, #1
    {
      SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80002e2:	681a      	ldr	r2, [r3, #0]
 80002e4:	bf0c      	ite	eq
 80002e6:	f042 0204 	orreq.w	r2, r2, #4
    }
    else
    {
      CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80002ea:	f022 0204 	bicne.w	r2, r2, #4
 80002ee:	601a      	str	r2, [r3, #0]
    }

    /* Set the bit timing register */
    WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80002f0:	68e1      	ldr	r1, [r4, #12]
 80002f2:	68a2      	ldr	r2, [r4, #8]
 80002f4:	430a      	orrs	r2, r1
 80002f6:	6921      	ldr	r1, [r4, #16]
 80002f8:	430a      	orrs	r2, r1
 80002fa:	6961      	ldr	r1, [r4, #20]
 80002fc:	430a      	orrs	r2, r1
 80002fe:	6861      	ldr	r1, [r4, #4]
 8000300:	3901      	subs	r1, #1
 8000302:	430a      	orrs	r2, r1
 8000304:	61da      	str	r2, [r3, #28]
                                              hcan->Init.BS1            |
                                              hcan->Init.BS2            |
                                              (hcan->Init.Prescaler - 1U) ));

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000306:	681a      	ldr	r2, [r3, #0]
 8000308:	f022 0201 	bic.w	r2, r2, #1
 800030c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();   
 800030e:	f7ff ff8f 	bl	8000230 <HAL_GetTick>
 8000312:	4605      	mov	r5, r0
   
    /* Wait the acknowledge */
    while(HAL_IS_BIT_SET(hcan->Instance->MSR, CAN_MSR_INAK))
 8000314:	6823      	ldr	r3, [r4, #0]
 8000316:	685a      	ldr	r2, [r3, #4]
 8000318:	07d2      	lsls	r2, r2, #31
 800031a:	d413      	bmi.n	8000344 <HAL_CAN_Init+0x108>
       return HAL_TIMEOUT;
      }
    }

    /* Check acknowledged */
    if(HAL_IS_BIT_CLR(hcan->Instance->MSR, CAN_MSR_INAK))
 800031c:	6858      	ldr	r0, [r3, #4]
 800031e:	f010 0001 	ands.w	r0, r0, #1
 8000322:	d01b      	beq.n	800035c <HAL_CAN_Init+0x120>
    return HAL_OK;
  }
  else
  {
    /* Initialize the CAN state */
    hcan->State = HAL_CAN_STATE_ERROR;
 8000324:	2304      	movs	r3, #4
 8000326:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

    /* Return function status */
    return HAL_ERROR;
 800032a:	2001      	movs	r0, #1
  }
}
 800032c:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick()-tickstart) > CAN_TIMEOUT_VALUE)
 800032e:	f7ff ff7f 	bl	8000230 <HAL_GetTick>
 8000332:	1b80      	subs	r0, r0, r6
 8000334:	280a      	cmp	r0, #10
 8000336:	d99d      	bls.n	8000274 <HAL_CAN_Init+0x38>
      hcan->State= HAL_CAN_STATE_TIMEOUT;
 8000338:	2003      	movs	r0, #3
 800033a:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
      __HAL_UNLOCK(hcan);
 800033e:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
      return HAL_TIMEOUT;
 8000342:	bd70      	pop	{r4, r5, r6, pc}
      if((HAL_GetTick()-tickstart) > CAN_TIMEOUT_VALUE)
 8000344:	f7ff ff74 	bl	8000230 <HAL_GetTick>
 8000348:	1b40      	subs	r0, r0, r5
 800034a:	280a      	cmp	r0, #10
 800034c:	d9e2      	bls.n	8000314 <HAL_CAN_Init+0xd8>
         hcan->State= HAL_CAN_STATE_TIMEOUT;
 800034e:	2003      	movs	r0, #3
       __HAL_UNLOCK(hcan);
 8000350:	2300      	movs	r3, #0
         hcan->State= HAL_CAN_STATE_TIMEOUT;
 8000352:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
       __HAL_UNLOCK(hcan);
 8000356:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
       return HAL_TIMEOUT;
 800035a:	bd70      	pop	{r4, r5, r6, pc}
    hcan->State = HAL_CAN_STATE_READY;
 800035c:	2301      	movs	r3, #1
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800035e:	6420      	str	r0, [r4, #64]	; 0x40
    hcan->State = HAL_CAN_STATE_READY;
 8000360:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 8000364:	bd70      	pop	{r4, r5, r6, pc}
	...

08000368 <HAL_CAN_Transmit>:
  /* Check the parameters */
  assert_param(IS_CAN_IDTYPE(hcan->pTxMsg->IDE));
  assert_param(IS_CAN_RTR(hcan->pTxMsg->RTR));
  assert_param(IS_CAN_DLC(hcan->pTxMsg->DLC));

  if(((hcan->Instance->TSR&CAN_TSR_TME0) == CAN_TSR_TME0) || \
 8000368:	6802      	ldr	r2, [r0, #0]
{
 800036a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((hcan->Instance->TSR&CAN_TSR_TME0) == CAN_TSR_TME0) || \
 800036e:	6893      	ldr	r3, [r2, #8]
 8000370:	015b      	lsls	r3, r3, #5
{
 8000372:	4604      	mov	r4, r0
 8000374:	460f      	mov	r7, r1
  if(((hcan->Instance->TSR&CAN_TSR_TME0) == CAN_TSR_TME0) || \
 8000376:	d406      	bmi.n	8000386 <HAL_CAN_Transmit+0x1e>
     ((hcan->Instance->TSR&CAN_TSR_TME1) == CAN_TSR_TME1) || \
 8000378:	6893      	ldr	r3, [r2, #8]
  if(((hcan->Instance->TSR&CAN_TSR_TME0) == CAN_TSR_TME0) || \
 800037a:	011d      	lsls	r5, r3, #4
 800037c:	d403      	bmi.n	8000386 <HAL_CAN_Transmit+0x1e>
     ((hcan->Instance->TSR&CAN_TSR_TME2) == CAN_TSR_TME2))
 800037e:	6893      	ldr	r3, [r2, #8]
     ((hcan->Instance->TSR&CAN_TSR_TME1) == CAN_TSR_TME1) || \
 8000380:	00d8      	lsls	r0, r3, #3
 8000382:	f140 80b4 	bpl.w	80004ee <HAL_CAN_Transmit+0x186>
  {
    /* Process locked */
    __HAL_LOCK(hcan);
 8000386:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800038a:	2b01      	cmp	r3, #1
 800038c:	f000 80b5 	beq.w	80004fa <HAL_CAN_Transmit+0x192>
 8000390:	2301      	movs	r3, #1
 8000392:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

    /* Change CAN state */
    switch(hcan->State)
 8000396:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800039a:	b2db      	uxtb	r3, r3
 800039c:	2b32      	cmp	r3, #50	; 0x32
 800039e:	d066      	beq.n	800046e <HAL_CAN_Transmit+0x106>
 80003a0:	2b62      	cmp	r3, #98	; 0x62
 80003a2:	d066      	beq.n	8000472 <HAL_CAN_Transmit+0x10a>
 80003a4:	2b22      	cmp	r3, #34	; 0x22
 80003a6:	d166      	bne.n	8000476 <HAL_CAN_Transmit+0x10e>
    {
      case(HAL_CAN_STATE_BUSY_RX0):
          hcan->State = HAL_CAN_STATE_BUSY_TX_RX0;
 80003a8:	2342      	movs	r3, #66	; 0x42
          break;
      case(HAL_CAN_STATE_BUSY_RX0_RX1):
          hcan->State = HAL_CAN_STATE_BUSY_TX_RX0_RX1;
          break;
      default: /* HAL_CAN_STATE_READY */
          hcan->State = HAL_CAN_STATE_BUSY_TX;
 80003aa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
          break;
    }

    /* Select one empty transmit mailbox */
    if (HAL_IS_BIT_SET(hcan->Instance->TSR, CAN_TSR_TME0))
 80003ae:	6893      	ldr	r3, [r2, #8]
 80003b0:	0159      	lsls	r1, r3, #5
 80003b2:	d462      	bmi.n	800047a <HAL_CAN_Transmit+0x112>
    {
      transmitmailbox = CAN_TXMAILBOX_0;
    }
    else if (HAL_IS_BIT_SET(hcan->Instance->TSR, CAN_TSR_TME1))
 80003b4:	6893      	ldr	r3, [r2, #8]
    {
      transmitmailbox = CAN_TXMAILBOX_1;
    }
    else
    {
      transmitmailbox = CAN_TXMAILBOX_2;
 80003b6:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80003ba:	bf14      	ite	ne
 80003bc:	2601      	movne	r6, #1
 80003be:	2602      	moveq	r6, #2
 80003c0:	ea4f 1e06 	mov.w	lr, r6, lsl #4
 80003c4:	eb02 030e 	add.w	r3, r2, lr
    }

    /* Set up the Id */
    hcan->Instance->sTxMailBox[transmitmailbox].TIR &= CAN_TI0R_TXRQ;
    if (hcan->pTxMsg->IDE == CAN_ID_STD)
 80003c8:	6b20      	ldr	r0, [r4, #48]	; 0x30
    hcan->Instance->sTxMailBox[transmitmailbox].TIR &= CAN_TI0R_TXRQ;
 80003ca:	f8d3 1180 	ldr.w	r1, [r3, #384]	; 0x180
    if (hcan->pTxMsg->IDE == CAN_ID_STD)
 80003ce:	6885      	ldr	r5, [r0, #8]
 80003d0:	f8d0 c00c 	ldr.w	ip, [r0, #12]
    hcan->Instance->sTxMailBox[transmitmailbox].TIR &= CAN_TI0R_TXRQ;
 80003d4:	f001 0101 	and.w	r1, r1, #1
 80003d8:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    if (hcan->pTxMsg->IDE == CAN_ID_STD)
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d14e      	bne.n	800047e <HAL_CAN_Transmit+0x116>
    {
      assert_param(IS_CAN_STDID(hcan->pTxMsg->StdId));  
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->StdId << CAN_TI0R_STID_Pos) | \
 80003e0:	6805      	ldr	r5, [r0, #0]
 80003e2:	f8d3 1180 	ldr.w	r1, [r3, #384]	; 0x180
 80003e6:	ea4c 5545 	orr.w	r5, ip, r5, lsl #21
 80003ea:	430d      	orrs	r5, r1
                                                           hcan->pTxMsg->RTR);
    }
    else
    {
      assert_param(IS_CAN_EXTID(hcan->pTxMsg->ExtId));
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->ExtId << CAN_TI0R_EXID_Pos) | \
 80003ec:	f8c3 5180 	str.w	r5, [r3, #384]	; 0x180
                                                           hcan->pTxMsg->RTR);
    }
    
    /* Set up the DLC */
    hcan->pTxMsg->DLC &= (uint8_t)0x0000000FU;
    hcan->Instance->sTxMailBox[transmitmailbox].TDTR &= 0xFFFFFFF0U;
 80003f0:	f8d3 5184 	ldr.w	r5, [r3, #388]	; 0x184
    hcan->pTxMsg->DLC &= (uint8_t)0x0000000FU;
 80003f4:	6901      	ldr	r1, [r0, #16]
  
    /* Get tick */
    tickstart = HAL_GetTick();   
  
    /* Check End of transmission flag */
    while(!(__HAL_CAN_TRANSMIT_STATUS(hcan, transmitmailbox)))
 80003f6:	f8df 810c 	ldr.w	r8, [pc, #268]	; 8000504 <HAL_CAN_Transmit+0x19c>
 80003fa:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8000508 <HAL_CAN_Transmit+0x1a0>
    hcan->pTxMsg->DLC &= (uint8_t)0x0000000FU;
 80003fe:	f001 010f 	and.w	r1, r1, #15
    hcan->Instance->sTxMailBox[transmitmailbox].TDTR &= 0xFFFFFFF0U;
 8000402:	f025 050f 	bic.w	r5, r5, #15
    hcan->pTxMsg->DLC &= (uint8_t)0x0000000FU;
 8000406:	6101      	str	r1, [r0, #16]
    hcan->Instance->sTxMailBox[transmitmailbox].TDTR &= 0xFFFFFFF0U;
 8000408:	f8c3 5184 	str.w	r5, [r3, #388]	; 0x184
    hcan->Instance->sTxMailBox[transmitmailbox].TDTR |= hcan->pTxMsg->DLC;
 800040c:	f8d3 5184 	ldr.w	r5, [r3, #388]	; 0x184
 8000410:	4329      	orrs	r1, r5
 8000412:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
    WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR, ((uint32_t)hcan->pTxMsg->Data[3] << CAN_TDL0R_DATA3_Pos) |
 8000416:	4472      	add	r2, lr
 8000418:	6941      	ldr	r1, [r0, #20]
 800041a:	f8c2 1188 	str.w	r1, [r2, #392]	; 0x188
    WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR, ((uint32_t)hcan->pTxMsg->Data[7] << CAN_TDL0R_DATA3_Pos) |
 800041e:	6981      	ldr	r1, [r0, #24]
 8000420:	f8c2 118c 	str.w	r1, [r2, #396]	; 0x18c
    SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000424:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8000428:	f042 0201 	orr.w	r2, r2, #1
 800042c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    tickstart = HAL_GetTick();   
 8000430:	f7ff fefe 	bl	8000230 <HAL_GetTick>
 8000434:	4605      	mov	r5, r0
    while(!(__HAL_CAN_TRANSMIT_STATUS(hcan, transmitmailbox)))
 8000436:	4a32      	ldr	r2, [pc, #200]	; (8000500 <HAL_CAN_Transmit+0x198>)
 8000438:	6823      	ldr	r3, [r4, #0]
 800043a:	689b      	ldr	r3, [r3, #8]
 800043c:	2e00      	cmp	r6, #0
 800043e:	d148      	bne.n	80004d2 <HAL_CAN_Transmit+0x16a>
 8000440:	ea32 0303 	bics.w	r3, r2, r3
 8000444:	bf14      	ite	ne
 8000446:	2301      	movne	r3, #1
 8000448:	2300      	moveq	r3, #0
 800044a:	bb13      	cbnz	r3, 8000492 <HAL_CAN_Transmit+0x12a>
        }
      }
    }

    /* Change CAN state */
    switch(hcan->State)
 800044c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8000450:	b2db      	uxtb	r3, r3
 8000452:	2b52      	cmp	r3, #82	; 0x52
 8000454:	d045      	beq.n	80004e2 <HAL_CAN_Transmit+0x17a>
 8000456:	2b72      	cmp	r3, #114	; 0x72
 8000458:	d045      	beq.n	80004e6 <HAL_CAN_Transmit+0x17e>
 800045a:	2b42      	cmp	r3, #66	; 0x42
 800045c:	d145      	bne.n	80004ea <HAL_CAN_Transmit+0x182>
    {
      case(HAL_CAN_STATE_BUSY_TX_RX0):
          hcan->State = HAL_CAN_STATE_BUSY_RX0;
 800045e:	2322      	movs	r3, #34	; 0x22
          hcan->State = HAL_CAN_STATE_READY;
          break;
    }

    /* Process unlocked */
    __HAL_UNLOCK(hcan);
 8000460:	2000      	movs	r0, #0
          hcan->State = HAL_CAN_STATE_READY;
 8000462:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hcan);
 8000466:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    
    /* Return function status */
    return HAL_OK;
 800046a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          hcan->State = HAL_CAN_STATE_BUSY_TX_RX1;
 800046e:	2352      	movs	r3, #82	; 0x52
 8000470:	e79b      	b.n	80003aa <HAL_CAN_Transmit+0x42>
          hcan->State = HAL_CAN_STATE_BUSY_TX_RX0_RX1;
 8000472:	2372      	movs	r3, #114	; 0x72
 8000474:	e799      	b.n	80003aa <HAL_CAN_Transmit+0x42>
          hcan->State = HAL_CAN_STATE_BUSY_TX;
 8000476:	2312      	movs	r3, #18
 8000478:	e797      	b.n	80003aa <HAL_CAN_Transmit+0x42>
      transmitmailbox = CAN_TXMAILBOX_0;
 800047a:	2600      	movs	r6, #0
 800047c:	e7a0      	b.n	80003c0 <HAL_CAN_Transmit+0x58>
                                                           hcan->pTxMsg->IDE | \
 800047e:	6841      	ldr	r1, [r0, #4]
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->ExtId << CAN_TI0R_EXID_Pos) | \
 8000480:	f8d3 8180 	ldr.w	r8, [r3, #384]	; 0x180
                                                           hcan->pTxMsg->IDE | \
 8000484:	ea45 050c 	orr.w	r5, r5, ip
 8000488:	ea45 05c1 	orr.w	r5, r5, r1, lsl #3
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->ExtId << CAN_TI0R_EXID_Pos) | \
 800048c:	ea45 0508 	orr.w	r5, r5, r8
 8000490:	e7ac      	b.n	80003ec <HAL_CAN_Transmit+0x84>
      if(Timeout != HAL_MAX_DELAY)
 8000492:	1c7b      	adds	r3, r7, #1
 8000494:	d0d0      	beq.n	8000438 <HAL_CAN_Transmit+0xd0>
        if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000496:	b967      	cbnz	r7, 80004b2 <HAL_CAN_Transmit+0x14a>
          hcan->State = HAL_CAN_STATE_TIMEOUT;
 8000498:	2303      	movs	r3, #3
 800049a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 800049e:	6823      	ldr	r3, [r4, #0]
          __HAL_CAN_CANCEL_TRANSMIT(hcan, transmitmailbox);
 80004a0:	b16e      	cbz	r6, 80004be <HAL_CAN_Transmit+0x156>
 80004a2:	689a      	ldr	r2, [r3, #8]
 80004a4:	2e01      	cmp	r6, #1
 80004a6:	bf0c      	ite	eq
 80004a8:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 80004ac:	f442 0200 	orrne.w	r2, r2, #8388608	; 0x800000
 80004b0:	e008      	b.n	80004c4 <HAL_CAN_Transmit+0x15c>
        if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80004b2:	f7ff febd 	bl	8000230 <HAL_GetTick>
 80004b6:	1b40      	subs	r0, r0, r5
 80004b8:	4287      	cmp	r7, r0
 80004ba:	d2bc      	bcs.n	8000436 <HAL_CAN_Transmit+0xce>
 80004bc:	e7ec      	b.n	8000498 <HAL_CAN_Transmit+0x130>
          __HAL_CAN_CANCEL_TRANSMIT(hcan, transmitmailbox);
 80004be:	689a      	ldr	r2, [r3, #8]
 80004c0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80004c4:	609a      	str	r2, [r3, #8]
          __HAL_UNLOCK(hcan);
 80004c6:	2300      	movs	r3, #0
 80004c8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_TIMEOUT;
 80004cc:	2003      	movs	r0, #3
 80004ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    while(!(__HAL_CAN_TRANSMIT_STATUS(hcan, transmitmailbox)))
 80004d2:	2e01      	cmp	r6, #1
 80004d4:	d102      	bne.n	80004dc <HAL_CAN_Transmit+0x174>
 80004d6:	ea39 0303 	bics.w	r3, r9, r3
 80004da:	e7b3      	b.n	8000444 <HAL_CAN_Transmit+0xdc>
 80004dc:	ea38 0303 	bics.w	r3, r8, r3
 80004e0:	e7b0      	b.n	8000444 <HAL_CAN_Transmit+0xdc>
          hcan->State = HAL_CAN_STATE_BUSY_RX1;
 80004e2:	2332      	movs	r3, #50	; 0x32
 80004e4:	e7bc      	b.n	8000460 <HAL_CAN_Transmit+0xf8>
          hcan->State = HAL_CAN_STATE_BUSY_RX0_RX1;
 80004e6:	2362      	movs	r3, #98	; 0x62
 80004e8:	e7ba      	b.n	8000460 <HAL_CAN_Transmit+0xf8>
          hcan->State = HAL_CAN_STATE_READY;
 80004ea:	2301      	movs	r3, #1
 80004ec:	e7b8      	b.n	8000460 <HAL_CAN_Transmit+0xf8>
  }
  else
  {
    /* Change CAN state */
    hcan->State = HAL_CAN_STATE_ERROR; 
 80004ee:	2304      	movs	r3, #4
 80004f0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

    /* Return function status */
    return HAL_ERROR;
 80004f4:	2001      	movs	r0, #1
 80004f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __HAL_LOCK(hcan);
 80004fa:	2002      	movs	r0, #2
  }
}
 80004fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000500:	04000001 	.word	0x04000001
 8000504:	10010000 	.word	0x10010000
 8000508:	08000100 	.word	0x08000100

0800050c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800050c:	4a07      	ldr	r2, [pc, #28]	; (800052c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800050e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000510:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000514:	041b      	lsls	r3, r3, #16
 8000516:	0c1b      	lsrs	r3, r3, #16
 8000518:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800051c:	0200      	lsls	r0, r0, #8
 800051e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000522:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000526:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000528:	60d3      	str	r3, [r2, #12]
 800052a:	4770      	bx	lr
 800052c:	e000ed00 	.word	0xe000ed00

08000530 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000530:	4b17      	ldr	r3, [pc, #92]	; (8000590 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	68dc      	ldr	r4, [r3, #12]
 8000536:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800053a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800053e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000540:	2b04      	cmp	r3, #4
 8000542:	bf28      	it	cs
 8000544:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000546:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000548:	f04f 0501 	mov.w	r5, #1
 800054c:	fa05 f303 	lsl.w	r3, r5, r3
 8000550:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000554:	bf8c      	ite	hi
 8000556:	3c03      	subhi	r4, #3
 8000558:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800055a:	4019      	ands	r1, r3
 800055c:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800055e:	fa05 f404 	lsl.w	r4, r5, r4
 8000562:	3c01      	subs	r4, #1
 8000564:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000566:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000568:	ea42 0201 	orr.w	r2, r2, r1
 800056c:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000570:	bfaf      	iteee	ge
 8000572:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000576:	f000 000f 	andlt.w	r0, r0, #15
 800057a:	4b06      	ldrlt	r3, [pc, #24]	; (8000594 <HAL_NVIC_SetPriority+0x64>)
 800057c:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800057e:	bfa5      	ittet	ge
 8000580:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000584:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000586:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000588:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	bf00      	nop
 8000590:	e000ed00 	.word	0xe000ed00
 8000594:	e000ed14 	.word	0xe000ed14

08000598 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000598:	3801      	subs	r0, #1
 800059a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800059e:	d20a      	bcs.n	80005b6 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005a0:	4b06      	ldr	r3, [pc, #24]	; (80005bc <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005a2:	4a07      	ldr	r2, [pc, #28]	; (80005c0 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005a4:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005a6:	21f0      	movs	r1, #240	; 0xf0
 80005a8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80005ac:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80005ae:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80005b0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80005b6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	e000e010 	.word	0xe000e010
 80005c0:	e000ed00 	.word	0xe000ed00

080005c4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80005c4:	4b04      	ldr	r3, [pc, #16]	; (80005d8 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80005c6:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80005c8:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80005ca:	bf0c      	ite	eq
 80005cc:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80005d0:	f022 0204 	bicne.w	r2, r2, #4
 80005d4:	601a      	str	r2, [r3, #0]
 80005d6:	4770      	bx	lr
 80005d8:	e000e010 	.word	0xe000e010

080005dc <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80005dc:	4770      	bx	lr

080005de <HAL_SYSTICK_IRQHandler>:
{
 80005de:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80005e0:	f7ff fffc 	bl	80005dc <HAL_SYSTICK_Callback>
 80005e4:	bd08      	pop	{r3, pc}
	...

080005e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80005e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80005ec:	f8d1 8000 	ldr.w	r8, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005f0:	f8df 9190 	ldr.w	r9, [pc, #400]	; 8000784 <HAL_GPIO_Init+0x19c>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80005f4:	4a61      	ldr	r2, [pc, #388]	; (800077c <HAL_GPIO_Init+0x194>)
  uint32_t position = 0x00U;
 80005f6:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 80005f8:	fa38 f403 	lsrs.w	r4, r8, r3
 80005fc:	d102      	bne.n	8000604 <HAL_GPIO_Init+0x1c>
      }
    }
    
    position++;
  }
}
 80005fe:	b003      	add	sp, #12
 8000600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000604:	f04f 0e01 	mov.w	lr, #1
 8000608:	fa0e fe03 	lsl.w	lr, lr, r3
    if(iocurrent)
 800060c:	ea18 060e 	ands.w	r6, r8, lr
 8000610:	f000 80a6 	beq.w	8000760 <HAL_GPIO_Init+0x178>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000614:	684c      	ldr	r4, [r1, #4]
 8000616:	f024 0710 	bic.w	r7, r4, #16
 800061a:	2f02      	cmp	r7, #2
 800061c:	d116      	bne.n	800064c <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3];
 800061e:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000622:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000626:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3];
 800062a:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800062e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000632:	f04f 0c0f 	mov.w	ip, #15
 8000636:	fa0c fc0b 	lsl.w	ip, ip, fp
 800063a:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800063e:	690d      	ldr	r5, [r1, #16]
 8000640:	fa05 f50b 	lsl.w	r5, r5, fp
 8000644:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 8000648:	f8ca 5020 	str.w	r5, [sl, #32]
 800064c:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000650:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000652:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000656:	fa05 f50a 	lsl.w	r5, r5, sl
 800065a:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800065c:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000660:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000664:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000668:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800066a:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800066e:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000670:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000674:	d811      	bhi.n	800069a <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 8000676:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000678:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 800067c:	68cf      	ldr	r7, [r1, #12]
 800067e:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000682:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000686:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000688:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800068a:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800068e:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000692:	409f      	lsls	r7, r3
 8000694:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000698:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 800069a:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800069c:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800069e:	688f      	ldr	r7, [r1, #8]
 80006a0:	fa07 f70a 	lsl.w	r7, r7, sl
 80006a4:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80006a6:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80006a8:	00e5      	lsls	r5, r4, #3
 80006aa:	d559      	bpl.n	8000760 <HAL_GPIO_Init+0x178>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ac:	f8d9 5018 	ldr.w	r5, [r9, #24]
 80006b0:	f045 0501 	orr.w	r5, r5, #1
 80006b4:	f8c9 5018 	str.w	r5, [r9, #24]
 80006b8:	f8d9 5018 	ldr.w	r5, [r9, #24]
 80006bc:	f023 0703 	bic.w	r7, r3, #3
 80006c0:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80006c4:	f005 0501 	and.w	r5, r5, #1
 80006c8:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 80006cc:	9501      	str	r5, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80006ce:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006d2:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 80006d4:	68bd      	ldr	r5, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80006d6:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80006da:	f04f 0e0f 	mov.w	lr, #15
 80006de:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80006e2:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80006e6:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80006ea:	d03b      	beq.n	8000764 <HAL_GPIO_Init+0x17c>
 80006ec:	4d24      	ldr	r5, [pc, #144]	; (8000780 <HAL_GPIO_Init+0x198>)
 80006ee:	42a8      	cmp	r0, r5
 80006f0:	d03a      	beq.n	8000768 <HAL_GPIO_Init+0x180>
 80006f2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80006f6:	42a8      	cmp	r0, r5
 80006f8:	d038      	beq.n	800076c <HAL_GPIO_Init+0x184>
 80006fa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80006fe:	42a8      	cmp	r0, r5
 8000700:	d036      	beq.n	8000770 <HAL_GPIO_Init+0x188>
 8000702:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000706:	42a8      	cmp	r0, r5
 8000708:	d034      	beq.n	8000774 <HAL_GPIO_Init+0x18c>
 800070a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800070e:	42a8      	cmp	r0, r5
 8000710:	d032      	beq.n	8000778 <HAL_GPIO_Init+0x190>
 8000712:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000716:	42a8      	cmp	r0, r5
 8000718:	bf14      	ite	ne
 800071a:	2507      	movne	r5, #7
 800071c:	2506      	moveq	r5, #6
 800071e:	fa05 f50c 	lsl.w	r5, r5, ip
 8000722:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8000726:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000728:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800072a:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800072c:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000730:	bf0c      	ite	eq
 8000732:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8000734:	4335      	orrne	r5, r6
        EXTI->IMR = temp;
 8000736:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8000738:	6855      	ldr	r5, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800073a:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 800073e:	bf0c      	ite	eq
 8000740:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8000742:	4335      	orrne	r5, r6
        EXTI->EMR = temp;
 8000744:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8000746:	6895      	ldr	r5, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000748:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800074c:	bf0c      	ite	eq
 800074e:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8000750:	4335      	orrne	r5, r6
        EXTI->RTSR = temp;
 8000752:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8000754:	68d5      	ldr	r5, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000756:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000758:	bf54      	ite	pl
 800075a:	403d      	andpl	r5, r7
          temp |= iocurrent;
 800075c:	4335      	orrmi	r5, r6
        EXTI->FTSR = temp;
 800075e:	60d5      	str	r5, [r2, #12]
    position++;
 8000760:	3301      	adds	r3, #1
 8000762:	e749      	b.n	80005f8 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000764:	2500      	movs	r5, #0
 8000766:	e7da      	b.n	800071e <HAL_GPIO_Init+0x136>
 8000768:	2501      	movs	r5, #1
 800076a:	e7d8      	b.n	800071e <HAL_GPIO_Init+0x136>
 800076c:	2502      	movs	r5, #2
 800076e:	e7d6      	b.n	800071e <HAL_GPIO_Init+0x136>
 8000770:	2503      	movs	r5, #3
 8000772:	e7d4      	b.n	800071e <HAL_GPIO_Init+0x136>
 8000774:	2504      	movs	r5, #4
 8000776:	e7d2      	b.n	800071e <HAL_GPIO_Init+0x136>
 8000778:	2505      	movs	r5, #5
 800077a:	e7d0      	b.n	800071e <HAL_GPIO_Init+0x136>
 800077c:	40010400 	.word	0x40010400
 8000780:	48000400 	.word	0x48000400
 8000784:	40021000 	.word	0x40021000

08000788 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000788:	b10a      	cbz	r2, 800078e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800078a:	6181      	str	r1, [r0, #24]
 800078c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800078e:	6281      	str	r1, [r0, #40]	; 0x28
 8000790:	4770      	bx	lr
	...

08000794 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000794:	6803      	ldr	r3, [r0, #0]
{
 8000796:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800079a:	07df      	lsls	r7, r3, #31
{
 800079c:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800079e:	d411      	bmi.n	80007c4 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80007a0:	682b      	ldr	r3, [r5, #0]
 80007a2:	079e      	lsls	r6, r3, #30
 80007a4:	f100 808b 	bmi.w	80008be <HAL_RCC_OscConfig+0x12a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80007a8:	682b      	ldr	r3, [r5, #0]
 80007aa:	071c      	lsls	r4, r3, #28
 80007ac:	f100 80fe 	bmi.w	80009ac <HAL_RCC_OscConfig+0x218>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80007b0:	682b      	ldr	r3, [r5, #0]
 80007b2:	0758      	lsls	r0, r3, #29
 80007b4:	f100 8147 	bmi.w	8000a46 <HAL_RCC_OscConfig+0x2b2>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80007b8:	69aa      	ldr	r2, [r5, #24]
 80007ba:	2a00      	cmp	r2, #0
 80007bc:	f040 81dd 	bne.w	8000b7a <HAL_RCC_OscConfig+0x3e6>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80007c0:	2000      	movs	r0, #0
 80007c2:	e024      	b.n	800080e <HAL_RCC_OscConfig+0x7a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80007c4:	4cbd      	ldr	r4, [pc, #756]	; (8000abc <HAL_RCC_OscConfig+0x328>)
 80007c6:	6863      	ldr	r3, [r4, #4]
 80007c8:	f003 030c 	and.w	r3, r3, #12
 80007cc:	2b04      	cmp	r3, #4
 80007ce:	d00a      	beq.n	80007e6 <HAL_RCC_OscConfig+0x52>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80007d0:	6863      	ldr	r3, [r4, #4]
 80007d2:	f003 030c 	and.w	r3, r3, #12
 80007d6:	2b08      	cmp	r3, #8
 80007d8:	d11c      	bne.n	8000814 <HAL_RCC_OscConfig+0x80>
 80007da:	6863      	ldr	r3, [r4, #4]
 80007dc:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80007e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80007e4:	d116      	bne.n	8000814 <HAL_RCC_OscConfig+0x80>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80007e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80007ea:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80007ee:	6821      	ldr	r1, [r4, #0]
 80007f0:	fa93 f3a3 	rbit	r3, r3
 80007f4:	fab3 f383 	clz	r3, r3
 80007f8:	f003 031f 	and.w	r3, r3, #31
 80007fc:	2201      	movs	r2, #1
 80007fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000802:	420b      	tst	r3, r1
 8000804:	d0cc      	beq.n	80007a0 <HAL_RCC_OscConfig+0xc>
 8000806:	686b      	ldr	r3, [r5, #4]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d1c9      	bne.n	80007a0 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 800080c:	2001      	movs	r0, #1
}
 800080e:	b002      	add	sp, #8
 8000810:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000814:	686b      	ldr	r3, [r5, #4]
 8000816:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800081a:	d11e      	bne.n	800085a <HAL_RCC_OscConfig+0xc6>
 800081c:	6823      	ldr	r3, [r4, #0]
 800081e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000822:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000824:	f7ff fd04 	bl	8000230 <HAL_GetTick>
 8000828:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 800082c:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800082e:	2701      	movs	r7, #1
 8000830:	fa96 f3a6 	rbit	r3, r6
 8000834:	6822      	ldr	r2, [r4, #0]
 8000836:	fa96 f3a6 	rbit	r3, r6
 800083a:	fab3 f383 	clz	r3, r3
 800083e:	f003 031f 	and.w	r3, r3, #31
 8000842:	fa07 f303 	lsl.w	r3, r7, r3
 8000846:	4213      	tst	r3, r2
 8000848:	d1aa      	bne.n	80007a0 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800084a:	f7ff fcf1 	bl	8000230 <HAL_GetTick>
 800084e:	eba0 0008 	sub.w	r0, r0, r8
 8000852:	2864      	cmp	r0, #100	; 0x64
 8000854:	d9ec      	bls.n	8000830 <HAL_RCC_OscConfig+0x9c>
            return HAL_TIMEOUT;
 8000856:	2003      	movs	r0, #3
 8000858:	e7d9      	b.n	800080e <HAL_RCC_OscConfig+0x7a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800085a:	bb0b      	cbnz	r3, 80008a0 <HAL_RCC_OscConfig+0x10c>
 800085c:	6823      	ldr	r3, [r4, #0]
 800085e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000862:	6023      	str	r3, [r4, #0]
 8000864:	6823      	ldr	r3, [r4, #0]
 8000866:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800086a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800086c:	f7ff fce0 	bl	8000230 <HAL_GetTick>
 8000870:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000874:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000876:	2701      	movs	r7, #1
 8000878:	fa96 f3a6 	rbit	r3, r6
 800087c:	6822      	ldr	r2, [r4, #0]
 800087e:	fa96 f3a6 	rbit	r3, r6
 8000882:	fab3 f383 	clz	r3, r3
 8000886:	f003 031f 	and.w	r3, r3, #31
 800088a:	fa07 f303 	lsl.w	r3, r7, r3
 800088e:	4213      	tst	r3, r2
 8000890:	d086      	beq.n	80007a0 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000892:	f7ff fccd 	bl	8000230 <HAL_GetTick>
 8000896:	eba0 0008 	sub.w	r0, r0, r8
 800089a:	2864      	cmp	r0, #100	; 0x64
 800089c:	d9ec      	bls.n	8000878 <HAL_RCC_OscConfig+0xe4>
 800089e:	e7da      	b.n	8000856 <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80008a4:	6823      	ldr	r3, [r4, #0]
 80008a6:	d103      	bne.n	80008b0 <HAL_RCC_OscConfig+0x11c>
 80008a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008ac:	6023      	str	r3, [r4, #0]
 80008ae:	e7b5      	b.n	800081c <HAL_RCC_OscConfig+0x88>
 80008b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80008b4:	6023      	str	r3, [r4, #0]
 80008b6:	6823      	ldr	r3, [r4, #0]
 80008b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008bc:	e7b1      	b.n	8000822 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80008be:	4c7f      	ldr	r4, [pc, #508]	; (8000abc <HAL_RCC_OscConfig+0x328>)
 80008c0:	6863      	ldr	r3, [r4, #4]
 80008c2:	f013 0f0c 	tst.w	r3, #12
 80008c6:	d00a      	beq.n	80008de <HAL_RCC_OscConfig+0x14a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80008c8:	6863      	ldr	r3, [r4, #4]
 80008ca:	f003 030c 	and.w	r3, r3, #12
 80008ce:	2b08      	cmp	r3, #8
 80008d0:	d124      	bne.n	800091c <HAL_RCC_OscConfig+0x188>
 80008d2:	6863      	ldr	r3, [r4, #4]
 80008d4:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80008d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80008dc:	d11e      	bne.n	800091c <HAL_RCC_OscConfig+0x188>
 80008de:	2302      	movs	r3, #2
 80008e0:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008e4:	6821      	ldr	r1, [r4, #0]
 80008e6:	fa93 f3a3 	rbit	r3, r3
 80008ea:	fab3 f383 	clz	r3, r3
 80008ee:	f003 031f 	and.w	r3, r3, #31
 80008f2:	2201      	movs	r2, #1
 80008f4:	fa02 f303 	lsl.w	r3, r2, r3
 80008f8:	420b      	tst	r3, r1
 80008fa:	d002      	beq.n	8000902 <HAL_RCC_OscConfig+0x16e>
 80008fc:	68eb      	ldr	r3, [r5, #12]
 80008fe:	4293      	cmp	r3, r2
 8000900:	d184      	bne.n	800080c <HAL_RCC_OscConfig+0x78>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000902:	6821      	ldr	r1, [r4, #0]
 8000904:	23f8      	movs	r3, #248	; 0xf8
 8000906:	fa93 f3a3 	rbit	r3, r3
 800090a:	fab3 f283 	clz	r2, r3
 800090e:	692b      	ldr	r3, [r5, #16]
 8000910:	4093      	lsls	r3, r2
 8000912:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8000916:	4313      	orrs	r3, r2
 8000918:	6023      	str	r3, [r4, #0]
 800091a:	e745      	b.n	80007a8 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800091c:	68ea      	ldr	r2, [r5, #12]
 800091e:	2601      	movs	r6, #1
 8000920:	b30a      	cbz	r2, 8000966 <HAL_RCC_OscConfig+0x1d2>
 8000922:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 8000926:	fab3 f383 	clz	r3, r3
 800092a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800092e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000932:	009b      	lsls	r3, r3, #2
 8000934:	2702      	movs	r7, #2
 8000936:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8000938:	f7ff fc7a 	bl	8000230 <HAL_GetTick>
 800093c:	4680      	mov	r8, r0
 800093e:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000942:	6822      	ldr	r2, [r4, #0]
 8000944:	fa97 f3a7 	rbit	r3, r7
 8000948:	fab3 f383 	clz	r3, r3
 800094c:	f003 031f 	and.w	r3, r3, #31
 8000950:	fa06 f303 	lsl.w	r3, r6, r3
 8000954:	4213      	tst	r3, r2
 8000956:	d1d4      	bne.n	8000902 <HAL_RCC_OscConfig+0x16e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000958:	f7ff fc6a 	bl	8000230 <HAL_GetTick>
 800095c:	eba0 0008 	sub.w	r0, r0, r8
 8000960:	2802      	cmp	r0, #2
 8000962:	d9ec      	bls.n	800093e <HAL_RCC_OscConfig+0x1aa>
 8000964:	e777      	b.n	8000856 <HAL_RCC_OscConfig+0xc2>
 8000966:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 800096a:	fab3 f383 	clz	r3, r3
 800096e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000972:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000976:	009b      	lsls	r3, r3, #2
 8000978:	2702      	movs	r7, #2
 800097a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800097c:	f7ff fc58 	bl	8000230 <HAL_GetTick>
 8000980:	4680      	mov	r8, r0
 8000982:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000986:	6822      	ldr	r2, [r4, #0]
 8000988:	fa97 f3a7 	rbit	r3, r7
 800098c:	fab3 f383 	clz	r3, r3
 8000990:	f003 031f 	and.w	r3, r3, #31
 8000994:	fa06 f303 	lsl.w	r3, r6, r3
 8000998:	4213      	tst	r3, r2
 800099a:	f43f af05 	beq.w	80007a8 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800099e:	f7ff fc47 	bl	8000230 <HAL_GetTick>
 80009a2:	eba0 0008 	sub.w	r0, r0, r8
 80009a6:	2802      	cmp	r0, #2
 80009a8:	d9eb      	bls.n	8000982 <HAL_RCC_OscConfig+0x1ee>
 80009aa:	e754      	b.n	8000856 <HAL_RCC_OscConfig+0xc2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80009ac:	696a      	ldr	r2, [r5, #20]
 80009ae:	4e43      	ldr	r6, [pc, #268]	; (8000abc <HAL_RCC_OscConfig+0x328>)
 80009b0:	4943      	ldr	r1, [pc, #268]	; (8000ac0 <HAL_RCC_OscConfig+0x32c>)
 80009b2:	2401      	movs	r4, #1
 80009b4:	b31a      	cbz	r2, 80009fe <HAL_RCC_OscConfig+0x26a>
 80009b6:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 80009ba:	fab3 f383 	clz	r3, r3
 80009be:	440b      	add	r3, r1
 80009c0:	009b      	lsls	r3, r3, #2
 80009c2:	2702      	movs	r7, #2
 80009c4:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 80009c6:	f7ff fc33 	bl	8000230 <HAL_GetTick>
 80009ca:	4680      	mov	r8, r0
 80009cc:	fa97 f3a7 	rbit	r3, r7
 80009d0:	fa97 f3a7 	rbit	r3, r7
 80009d4:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009d8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80009da:	fa97 f3a7 	rbit	r3, r7
 80009de:	fab3 f383 	clz	r3, r3
 80009e2:	f003 031f 	and.w	r3, r3, #31
 80009e6:	fa04 f303 	lsl.w	r3, r4, r3
 80009ea:	4213      	tst	r3, r2
 80009ec:	f47f aee0 	bne.w	80007b0 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009f0:	f7ff fc1e 	bl	8000230 <HAL_GetTick>
 80009f4:	eba0 0008 	sub.w	r0, r0, r8
 80009f8:	2802      	cmp	r0, #2
 80009fa:	d9e7      	bls.n	80009cc <HAL_RCC_OscConfig+0x238>
 80009fc:	e72b      	b.n	8000856 <HAL_RCC_OscConfig+0xc2>
 80009fe:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 8000a02:	fab3 f383 	clz	r3, r3
 8000a06:	440b      	add	r3, r1
 8000a08:	009b      	lsls	r3, r3, #2
 8000a0a:	2702      	movs	r7, #2
 8000a0c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000a0e:	f7ff fc0f 	bl	8000230 <HAL_GetTick>
 8000a12:	4680      	mov	r8, r0
 8000a14:	fa97 f3a7 	rbit	r3, r7
 8000a18:	fa97 f3a7 	rbit	r3, r7
 8000a1c:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a20:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8000a22:	fa97 f3a7 	rbit	r3, r7
 8000a26:	fab3 f383 	clz	r3, r3
 8000a2a:	f003 031f 	and.w	r3, r3, #31
 8000a2e:	fa04 f303 	lsl.w	r3, r4, r3
 8000a32:	4213      	tst	r3, r2
 8000a34:	f43f aebc 	beq.w	80007b0 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a38:	f7ff fbfa 	bl	8000230 <HAL_GetTick>
 8000a3c:	eba0 0008 	sub.w	r0, r0, r8
 8000a40:	2802      	cmp	r0, #2
 8000a42:	d9e7      	bls.n	8000a14 <HAL_RCC_OscConfig+0x280>
 8000a44:	e707      	b.n	8000856 <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a46:	4c1d      	ldr	r4, [pc, #116]	; (8000abc <HAL_RCC_OscConfig+0x328>)
 8000a48:	69e3      	ldr	r3, [r4, #28]
 8000a4a:	00d9      	lsls	r1, r3, #3
 8000a4c:	d434      	bmi.n	8000ab8 <HAL_RCC_OscConfig+0x324>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a4e:	69e3      	ldr	r3, [r4, #28]
 8000a50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a54:	61e3      	str	r3, [r4, #28]
 8000a56:	69e3      	ldr	r3, [r4, #28]
 8000a58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a5c:	9301      	str	r3, [sp, #4]
 8000a5e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000a60:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a62:	4f18      	ldr	r7, [pc, #96]	; (8000ac4 <HAL_RCC_OscConfig+0x330>)
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	05da      	lsls	r2, r3, #23
 8000a68:	d52e      	bpl.n	8000ac8 <HAL_RCC_OscConfig+0x334>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a6a:	68ab      	ldr	r3, [r5, #8]
 8000a6c:	2b01      	cmp	r3, #1
 8000a6e:	d13c      	bne.n	8000aea <HAL_RCC_OscConfig+0x356>
 8000a70:	6a23      	ldr	r3, [r4, #32]
 8000a72:	f043 0301 	orr.w	r3, r3, #1
 8000a76:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000a78:	f7ff fbda 	bl	8000230 <HAL_GetTick>
 8000a7c:	2702      	movs	r7, #2
 8000a7e:	4682      	mov	sl, r0
 8000a80:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a82:	f04f 0801 	mov.w	r8, #1
 8000a86:	fa97 f3a7 	rbit	r3, r7
 8000a8a:	fa97 f3a7 	rbit	r3, r7
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d06b      	beq.n	8000b6a <HAL_RCC_OscConfig+0x3d6>
 8000a92:	6a22      	ldr	r2, [r4, #32]
 8000a94:	fa99 f3a9 	rbit	r3, r9
 8000a98:	fab3 f383 	clz	r3, r3
 8000a9c:	f003 031f 	and.w	r3, r3, #31
 8000aa0:	fa08 f303 	lsl.w	r3, r8, r3
 8000aa4:	4213      	tst	r3, r2
 8000aa6:	d057      	beq.n	8000b58 <HAL_RCC_OscConfig+0x3c4>
    if(pwrclkchanged == SET)
 8000aa8:	2e00      	cmp	r6, #0
 8000aaa:	f43f ae85 	beq.w	80007b8 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000aae:	69e3      	ldr	r3, [r4, #28]
 8000ab0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ab4:	61e3      	str	r3, [r4, #28]
 8000ab6:	e67f      	b.n	80007b8 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8000ab8:	2600      	movs	r6, #0
 8000aba:	e7d2      	b.n	8000a62 <HAL_RCC_OscConfig+0x2ce>
 8000abc:	40021000 	.word	0x40021000
 8000ac0:	10908120 	.word	0x10908120
 8000ac4:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ace:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8000ad0:	f7ff fbae 	bl	8000230 <HAL_GetTick>
 8000ad4:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	05db      	lsls	r3, r3, #23
 8000ada:	d4c6      	bmi.n	8000a6a <HAL_RCC_OscConfig+0x2d6>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000adc:	f7ff fba8 	bl	8000230 <HAL_GetTick>
 8000ae0:	eba0 0008 	sub.w	r0, r0, r8
 8000ae4:	2864      	cmp	r0, #100	; 0x64
 8000ae6:	d9f6      	bls.n	8000ad6 <HAL_RCC_OscConfig+0x342>
 8000ae8:	e6b5      	b.n	8000856 <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000aea:	bb3b      	cbnz	r3, 8000b3c <HAL_RCC_OscConfig+0x3a8>
 8000aec:	6a23      	ldr	r3, [r4, #32]
 8000aee:	f023 0301 	bic.w	r3, r3, #1
 8000af2:	6223      	str	r3, [r4, #32]
 8000af4:	6a23      	ldr	r3, [r4, #32]
 8000af6:	f023 0304 	bic.w	r3, r3, #4
 8000afa:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000afc:	f7ff fb98 	bl	8000230 <HAL_GetTick>
 8000b00:	2702      	movs	r7, #2
 8000b02:	4682      	mov	sl, r0
 8000b04:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b06:	f04f 0801 	mov.w	r8, #1
 8000b0a:	fa97 f3a7 	rbit	r3, r7
 8000b0e:	fa97 f3a7 	rbit	r3, r7
 8000b12:	b373      	cbz	r3, 8000b72 <HAL_RCC_OscConfig+0x3de>
 8000b14:	6a22      	ldr	r2, [r4, #32]
 8000b16:	fa99 f3a9 	rbit	r3, r9
 8000b1a:	fab3 f383 	clz	r3, r3
 8000b1e:	f003 031f 	and.w	r3, r3, #31
 8000b22:	fa08 f303 	lsl.w	r3, r8, r3
 8000b26:	4213      	tst	r3, r2
 8000b28:	d0be      	beq.n	8000aa8 <HAL_RCC_OscConfig+0x314>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b2a:	f7ff fb81 	bl	8000230 <HAL_GetTick>
 8000b2e:	f241 3388 	movw	r3, #5000	; 0x1388
 8000b32:	eba0 000a 	sub.w	r0, r0, sl
 8000b36:	4298      	cmp	r0, r3
 8000b38:	d9e7      	bls.n	8000b0a <HAL_RCC_OscConfig+0x376>
 8000b3a:	e68c      	b.n	8000856 <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b3c:	2b05      	cmp	r3, #5
 8000b3e:	6a23      	ldr	r3, [r4, #32]
 8000b40:	d103      	bne.n	8000b4a <HAL_RCC_OscConfig+0x3b6>
 8000b42:	f043 0304 	orr.w	r3, r3, #4
 8000b46:	6223      	str	r3, [r4, #32]
 8000b48:	e792      	b.n	8000a70 <HAL_RCC_OscConfig+0x2dc>
 8000b4a:	f023 0301 	bic.w	r3, r3, #1
 8000b4e:	6223      	str	r3, [r4, #32]
 8000b50:	6a23      	ldr	r3, [r4, #32]
 8000b52:	f023 0304 	bic.w	r3, r3, #4
 8000b56:	e78e      	b.n	8000a76 <HAL_RCC_OscConfig+0x2e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b58:	f7ff fb6a 	bl	8000230 <HAL_GetTick>
 8000b5c:	f241 3388 	movw	r3, #5000	; 0x1388
 8000b60:	eba0 000a 	sub.w	r0, r0, sl
 8000b64:	4298      	cmp	r0, r3
 8000b66:	d98e      	bls.n	8000a86 <HAL_RCC_OscConfig+0x2f2>
 8000b68:	e675      	b.n	8000856 <HAL_RCC_OscConfig+0xc2>
 8000b6a:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b6e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000b70:	e790      	b.n	8000a94 <HAL_RCC_OscConfig+0x300>
 8000b72:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b76:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000b78:	e7cd      	b.n	8000b16 <HAL_RCC_OscConfig+0x382>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000b7a:	4c44      	ldr	r4, [pc, #272]	; (8000c8c <HAL_RCC_OscConfig+0x4f8>)
 8000b7c:	6863      	ldr	r3, [r4, #4]
 8000b7e:	f003 030c 	and.w	r3, r3, #12
 8000b82:	2b08      	cmp	r3, #8
 8000b84:	f43f ae42 	beq.w	800080c <HAL_RCC_OscConfig+0x78>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b88:	2a02      	cmp	r2, #2
 8000b8a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000b8e:	d158      	bne.n	8000c42 <HAL_RCC_OscConfig+0x4ae>
 8000b90:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000b94:	fab3 f383 	clz	r3, r3
 8000b98:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000b9c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000ba0:	009b      	lsls	r3, r3, #2
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000ba6:	f7ff fb43 	bl	8000230 <HAL_GetTick>
 8000baa:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 8000bae:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000bb0:	2601      	movs	r6, #1
 8000bb2:	fa97 f3a7 	rbit	r3, r7
 8000bb6:	6822      	ldr	r2, [r4, #0]
 8000bb8:	fa97 f3a7 	rbit	r3, r7
 8000bbc:	fab3 f383 	clz	r3, r3
 8000bc0:	f003 031f 	and.w	r3, r3, #31
 8000bc4:	fa06 f303 	lsl.w	r3, r6, r3
 8000bc8:	4213      	tst	r3, r2
 8000bca:	d133      	bne.n	8000c34 <HAL_RCC_OscConfig+0x4a0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000bcc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000bce:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8000bd0:	f023 030f 	bic.w	r3, r3, #15
 8000bd4:	4313      	orrs	r3, r2
 8000bd6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000bd8:	6862      	ldr	r2, [r4, #4]
 8000bda:	6a2b      	ldr	r3, [r5, #32]
 8000bdc:	69e9      	ldr	r1, [r5, #28]
 8000bde:	f422 1276 	bic.w	r2, r2, #4030464	; 0x3d8000
 8000be2:	430b      	orrs	r3, r1
 8000be4:	4313      	orrs	r3, r2
 8000be6:	6063      	str	r3, [r4, #4]
 8000be8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000bec:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8000bf0:	fab3 f383 	clz	r3, r3
 8000bf4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000bf8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000bfc:	009b      	lsls	r3, r3, #2
 8000bfe:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8000c02:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8000c04:	f7ff fb14 	bl	8000230 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000c08:	2601      	movs	r6, #1
        tickstart = HAL_GetTick();
 8000c0a:	4607      	mov	r7, r0
 8000c0c:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000c10:	6822      	ldr	r2, [r4, #0]
 8000c12:	fa95 f3a5 	rbit	r3, r5
 8000c16:	fab3 f383 	clz	r3, r3
 8000c1a:	f003 031f 	and.w	r3, r3, #31
 8000c1e:	fa06 f303 	lsl.w	r3, r6, r3
 8000c22:	4213      	tst	r3, r2
 8000c24:	f47f adcc 	bne.w	80007c0 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c28:	f7ff fb02 	bl	8000230 <HAL_GetTick>
 8000c2c:	1bc0      	subs	r0, r0, r7
 8000c2e:	2802      	cmp	r0, #2
 8000c30:	d9ec      	bls.n	8000c0c <HAL_RCC_OscConfig+0x478>
 8000c32:	e610      	b.n	8000856 <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c34:	f7ff fafc 	bl	8000230 <HAL_GetTick>
 8000c38:	eba0 0008 	sub.w	r0, r0, r8
 8000c3c:	2802      	cmp	r0, #2
 8000c3e:	d9b8      	bls.n	8000bb2 <HAL_RCC_OscConfig+0x41e>
 8000c40:	e609      	b.n	8000856 <HAL_RCC_OscConfig+0xc2>
 8000c42:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000c46:	fab3 f383 	clz	r3, r3
 8000c4a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000c4e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000c52:	009b      	lsls	r3, r3, #2
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000c58:	f7ff faea 	bl	8000230 <HAL_GetTick>
 8000c5c:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8000c60:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c62:	2601      	movs	r6, #1
 8000c64:	fa95 f3a5 	rbit	r3, r5
 8000c68:	6822      	ldr	r2, [r4, #0]
 8000c6a:	fa95 f3a5 	rbit	r3, r5
 8000c6e:	fab3 f383 	clz	r3, r3
 8000c72:	f003 031f 	and.w	r3, r3, #31
 8000c76:	fa06 f303 	lsl.w	r3, r6, r3
 8000c7a:	4213      	tst	r3, r2
 8000c7c:	f43f ada0 	beq.w	80007c0 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c80:	f7ff fad6 	bl	8000230 <HAL_GetTick>
 8000c84:	1bc0      	subs	r0, r0, r7
 8000c86:	2802      	cmp	r0, #2
 8000c88:	d9ec      	bls.n	8000c64 <HAL_RCC_OscConfig+0x4d0>
 8000c8a:	e5e4      	b.n	8000856 <HAL_RCC_OscConfig+0xc2>
 8000c8c:	40021000 	.word	0x40021000

08000c90 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8000c90:	4911      	ldr	r1, [pc, #68]	; (8000cd8 <HAL_RCC_GetSysClockFreq+0x48>)
 8000c92:	684b      	ldr	r3, [r1, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000c94:	f003 020c 	and.w	r2, r3, #12
 8000c98:	2a08      	cmp	r2, #8
 8000c9a:	d11a      	bne.n	8000cd2 <HAL_RCC_GetSysClockFreq+0x42>
 8000c9c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8000ca0:	fa92 f2a2 	rbit	r2, r2
 8000ca4:	200f      	movs	r0, #15
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000ca6:	fab2 f282 	clz	r2, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000caa:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8000cac:	fa90 f0a0 	rbit	r0, r0
 8000cb0:	fab0 f080 	clz	r0, r0
 8000cb4:	f001 010f 	and.w	r1, r1, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000cb8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000cbc:	40d3      	lsrs	r3, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000cbe:	40c1      	lsrs	r1, r0
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000cc0:	4a06      	ldr	r2, [pc, #24]	; (8000cdc <HAL_RCC_GetSysClockFreq+0x4c>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000cc2:	4807      	ldr	r0, [pc, #28]	; (8000ce0 <HAL_RCC_GetSysClockFreq+0x50>)
 8000cc4:	5c41      	ldrb	r1, [r0, r1]
        pllclk = (HSE_VALUE / prediv) * pllmul;
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8000cc6:	4807      	ldr	r0, [pc, #28]	; (8000ce4 <HAL_RCC_GetSysClockFreq+0x54>)
 8000cc8:	fbb0 f1f1 	udiv	r1, r0, r1
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000ccc:	5cd0      	ldrb	r0, [r2, r3]
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8000cce:	4348      	muls	r0, r1
 8000cd0:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8000cd2:	4804      	ldr	r0, [pc, #16]	; (8000ce4 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	40021000 	.word	0x40021000
 8000cdc:	080011f8 	.word	0x080011f8
 8000ce0:	08001208 	.word	0x08001208
 8000ce4:	007a1200 	.word	0x007a1200

08000ce8 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000ce8:	4a5c      	ldr	r2, [pc, #368]	; (8000e5c <HAL_RCC_ClockConfig+0x174>)
 8000cea:	6813      	ldr	r3, [r2, #0]
 8000cec:	f003 0307 	and.w	r3, r3, #7
 8000cf0:	428b      	cmp	r3, r1
{
 8000cf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000cf6:	4606      	mov	r6, r0
 8000cf8:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000cfa:	d330      	bcc.n	8000d5e <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000cfc:	6832      	ldr	r2, [r6, #0]
 8000cfe:	0791      	lsls	r1, r2, #30
 8000d00:	d43a      	bmi.n	8000d78 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000d02:	07d2      	lsls	r2, r2, #31
 8000d04:	d440      	bmi.n	8000d88 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000d06:	4a55      	ldr	r2, [pc, #340]	; (8000e5c <HAL_RCC_ClockConfig+0x174>)
 8000d08:	6813      	ldr	r3, [r2, #0]
 8000d0a:	f003 0307 	and.w	r3, r3, #7
 8000d0e:	429d      	cmp	r5, r3
 8000d10:	f0c0 8092 	bcc.w	8000e38 <HAL_RCC_ClockConfig+0x150>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d14:	6832      	ldr	r2, [r6, #0]
 8000d16:	4c52      	ldr	r4, [pc, #328]	; (8000e60 <HAL_RCC_ClockConfig+0x178>)
 8000d18:	f012 0f04 	tst.w	r2, #4
 8000d1c:	f040 8097 	bne.w	8000e4e <HAL_RCC_ClockConfig+0x166>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d20:	0713      	lsls	r3, r2, #28
 8000d22:	d506      	bpl.n	8000d32 <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000d24:	6863      	ldr	r3, [r4, #4]
 8000d26:	6932      	ldr	r2, [r6, #16]
 8000d28:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000d2c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000d30:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000d32:	f7ff ffad 	bl	8000c90 <HAL_RCC_GetSysClockFreq>
 8000d36:	6863      	ldr	r3, [r4, #4]
 8000d38:	22f0      	movs	r2, #240	; 0xf0
 8000d3a:	fa92 f2a2 	rbit	r2, r2
 8000d3e:	fab2 f282 	clz	r2, r2
 8000d42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000d46:	40d3      	lsrs	r3, r2
 8000d48:	4a46      	ldr	r2, [pc, #280]	; (8000e64 <HAL_RCC_ClockConfig+0x17c>)
 8000d4a:	5cd3      	ldrb	r3, [r2, r3]
 8000d4c:	40d8      	lsrs	r0, r3
 8000d4e:	4b46      	ldr	r3, [pc, #280]	; (8000e68 <HAL_RCC_ClockConfig+0x180>)
 8000d50:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000d52:	2000      	movs	r0, #0
 8000d54:	f7ff fa3e 	bl	80001d4 <HAL_InitTick>
  return HAL_OK;
 8000d58:	2000      	movs	r0, #0
}
 8000d5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d5e:	6813      	ldr	r3, [r2, #0]
 8000d60:	f023 0307 	bic.w	r3, r3, #7
 8000d64:	430b      	orrs	r3, r1
 8000d66:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000d68:	6813      	ldr	r3, [r2, #0]
 8000d6a:	f003 0307 	and.w	r3, r3, #7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d0c4      	beq.n	8000cfc <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8000d72:	2001      	movs	r0, #1
 8000d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000d78:	4939      	ldr	r1, [pc, #228]	; (8000e60 <HAL_RCC_ClockConfig+0x178>)
 8000d7a:	68b0      	ldr	r0, [r6, #8]
 8000d7c:	684b      	ldr	r3, [r1, #4]
 8000d7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000d82:	4303      	orrs	r3, r0
 8000d84:	604b      	str	r3, [r1, #4]
 8000d86:	e7bc      	b.n	8000d02 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d88:	6872      	ldr	r2, [r6, #4]
 8000d8a:	4c35      	ldr	r4, [pc, #212]	; (8000e60 <HAL_RCC_ClockConfig+0x178>)
 8000d8c:	2a01      	cmp	r2, #1
 8000d8e:	d128      	bne.n	8000de2 <HAL_RCC_ClockConfig+0xfa>
 8000d90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d94:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d98:	6821      	ldr	r1, [r4, #0]
 8000d9a:	fa93 f3a3 	rbit	r3, r3
 8000d9e:	fab3 f383 	clz	r3, r3
 8000da2:	f003 031f 	and.w	r3, r3, #31
 8000da6:	fa02 f303 	lsl.w	r3, r2, r3
 8000daa:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dac:	d0e1      	beq.n	8000d72 <HAL_RCC_ClockConfig+0x8a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000dae:	6863      	ldr	r3, [r4, #4]
 8000db0:	f023 0303 	bic.w	r3, r3, #3
 8000db4:	431a      	orrs	r2, r3
 8000db6:	6062      	str	r2, [r4, #4]
    tickstart = HAL_GetTick();
 8000db8:	f7ff fa3a 	bl	8000230 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000dbc:	6873      	ldr	r3, [r6, #4]
 8000dbe:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 8000dc0:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000dc2:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000dc6:	d11f      	bne.n	8000e08 <HAL_RCC_ClockConfig+0x120>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000dc8:	6863      	ldr	r3, [r4, #4]
 8000dca:	f003 030c 	and.w	r3, r3, #12
 8000dce:	2b04      	cmp	r3, #4
 8000dd0:	d099      	beq.n	8000d06 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000dd2:	f7ff fa2d 	bl	8000230 <HAL_GetTick>
 8000dd6:	1bc0      	subs	r0, r0, r7
 8000dd8:	4540      	cmp	r0, r8
 8000dda:	d9f5      	bls.n	8000dc8 <HAL_RCC_ClockConfig+0xe0>
          return HAL_TIMEOUT;
 8000ddc:	2003      	movs	r0, #3
 8000dde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000de2:	2a02      	cmp	r2, #2
 8000de4:	bf0c      	ite	eq
 8000de6:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8000dea:	2302      	movne	r3, #2
 8000dec:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000df0:	6820      	ldr	r0, [r4, #0]
 8000df2:	fa93 f3a3 	rbit	r3, r3
 8000df6:	fab3 f383 	clz	r3, r3
 8000dfa:	f003 031f 	and.w	r3, r3, #31
 8000dfe:	2101      	movs	r1, #1
 8000e00:	fa01 f303 	lsl.w	r3, r1, r3
 8000e04:	4203      	tst	r3, r0
 8000e06:	e7d1      	b.n	8000dac <HAL_RCC_ClockConfig+0xc4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000e08:	2b02      	cmp	r3, #2
 8000e0a:	d110      	bne.n	8000e2e <HAL_RCC_ClockConfig+0x146>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e0c:	6863      	ldr	r3, [r4, #4]
 8000e0e:	f003 030c 	and.w	r3, r3, #12
 8000e12:	2b08      	cmp	r3, #8
 8000e14:	f43f af77 	beq.w	8000d06 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e18:	f7ff fa0a 	bl	8000230 <HAL_GetTick>
 8000e1c:	1bc0      	subs	r0, r0, r7
 8000e1e:	4540      	cmp	r0, r8
 8000e20:	d9f4      	bls.n	8000e0c <HAL_RCC_ClockConfig+0x124>
 8000e22:	e7db      	b.n	8000ddc <HAL_RCC_ClockConfig+0xf4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e24:	f7ff fa04 	bl	8000230 <HAL_GetTick>
 8000e28:	1bc0      	subs	r0, r0, r7
 8000e2a:	4540      	cmp	r0, r8
 8000e2c:	d8d6      	bhi.n	8000ddc <HAL_RCC_ClockConfig+0xf4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e2e:	6863      	ldr	r3, [r4, #4]
 8000e30:	f013 0f0c 	tst.w	r3, #12
 8000e34:	d1f6      	bne.n	8000e24 <HAL_RCC_ClockConfig+0x13c>
 8000e36:	e766      	b.n	8000d06 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e38:	6813      	ldr	r3, [r2, #0]
 8000e3a:	f023 0307 	bic.w	r3, r3, #7
 8000e3e:	432b      	orrs	r3, r5
 8000e40:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000e42:	6813      	ldr	r3, [r2, #0]
 8000e44:	f003 0307 	and.w	r3, r3, #7
 8000e48:	429d      	cmp	r5, r3
 8000e4a:	d192      	bne.n	8000d72 <HAL_RCC_ClockConfig+0x8a>
 8000e4c:	e762      	b.n	8000d14 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000e4e:	6863      	ldr	r3, [r4, #4]
 8000e50:	68f1      	ldr	r1, [r6, #12]
 8000e52:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000e56:	430b      	orrs	r3, r1
 8000e58:	6063      	str	r3, [r4, #4]
 8000e5a:	e761      	b.n	8000d20 <HAL_RCC_ClockConfig+0x38>
 8000e5c:	40022000 	.word	0x40022000
 8000e60:	40021000 	.word	0x40021000
 8000e64:	08001225 	.word	0x08001225
 8000e68:	20000000 	.word	0x20000000

08000e6c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000e6c:	4b01      	ldr	r3, [pc, #4]	; (8000e74 <HAL_RCC_GetHCLKFreq+0x8>)
 8000e6e:	6818      	ldr	r0, [r3, #0]
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	20000000 	.word	0x20000000

08000e78 <MX_CAN_Init>:

/* CAN init function */
void MX_CAN_Init(void)
{

  hcan.Instance = CAN;
 8000e78:	4810      	ldr	r0, [pc, #64]	; (8000ebc <MX_CAN_Init+0x44>)
  hcan.Init.Prescaler = 18;
 8000e7a:	4911      	ldr	r1, [pc, #68]	; (8000ec0 <MX_CAN_Init+0x48>)
  hcan.Init.Mode = CAN_MODE_NORMAL;
  hcan.Init.SJW = CAN_SJW_4TQ;
 8000e7c:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
{
 8000e80:	b508      	push	{r3, lr}
  hcan.Init.Prescaler = 18;
 8000e82:	2312      	movs	r3, #18
  hcan.Init.SJW = CAN_SJW_4TQ;
 8000e84:	60c2      	str	r2, [r0, #12]
  hcan.Init.BS1 = CAN_BS1_4TQ;
 8000e86:	f44f 3240 	mov.w	r2, #196608	; 0x30000
  hcan.Init.Prescaler = 18;
 8000e8a:	e880 000a 	stmia.w	r0, {r1, r3}
  hcan.Init.BS1 = CAN_BS1_4TQ;
 8000e8e:	6102      	str	r2, [r0, #16]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000e90:	2300      	movs	r3, #0
  hcan.Init.BS2 = CAN_BS2_3TQ;
 8000e92:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000e96:	6083      	str	r3, [r0, #8]
  hcan.Init.BS2 = CAN_BS2_3TQ;
 8000e98:	6142      	str	r2, [r0, #20]
  hcan.Init.TTCM = DISABLE;
 8000e9a:	6183      	str	r3, [r0, #24]
  hcan.Init.ABOM = DISABLE;
 8000e9c:	61c3      	str	r3, [r0, #28]
  hcan.Init.AWUM = DISABLE;
 8000e9e:	6203      	str	r3, [r0, #32]
  hcan.Init.NART = DISABLE;
 8000ea0:	6243      	str	r3, [r0, #36]	; 0x24
  hcan.Init.RFLM = DISABLE;
 8000ea2:	6283      	str	r3, [r0, #40]	; 0x28
  hcan.Init.TXFP = DISABLE;
 8000ea4:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000ea6:	f7ff f9c9 	bl	800023c <HAL_CAN_Init>
 8000eaa:	b128      	cbz	r0, 8000eb8 <MX_CAN_Init+0x40>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000eac:	2145      	movs	r1, #69	; 0x45
 8000eae:	4805      	ldr	r0, [pc, #20]	; (8000ec4 <MX_CAN_Init+0x4c>)
  }

}
 8000eb0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8000eb4:	f000 b8c2 	b.w	800103c <_Error_Handler>
 8000eb8:	bd08      	pop	{r3, pc}
 8000eba:	bf00      	nop
 8000ebc:	20000024 	.word	0x20000024
 8000ec0:	40006400 	.word	0x40006400
 8000ec4:	08001218 	.word	0x08001218

08000ec8 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000ec8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(canHandle->Instance==CAN)
 8000eca:	6802      	ldr	r2, [r0, #0]
 8000ecc:	4b0f      	ldr	r3, [pc, #60]	; (8000f0c <HAL_CAN_MspInit+0x44>)
 8000ece:	429a      	cmp	r2, r3
 8000ed0:	d119      	bne.n	8000f06 <HAL_CAN_MspInit+0x3e>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000ed2:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ed6:	a901      	add	r1, sp, #4
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000ed8:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eda:	480d      	ldr	r0, [pc, #52]	; (8000f10 <HAL_CAN_MspInit+0x48>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000edc:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8000ee0:	61da      	str	r2, [r3, #28]
 8000ee2:	69db      	ldr	r3, [r3, #28]
 8000ee4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ee8:	9300      	str	r3, [sp, #0]
 8000eea:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000eec:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ef0:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000efa:	2303      	movs	r3, #3
 8000efc:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000efe:	2309      	movs	r3, #9
 8000f00:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f02:	f7ff fb71 	bl	80005e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 8000f06:	b007      	add	sp, #28
 8000f08:	f85d fb04 	ldr.w	pc, [sp], #4
 8000f0c:	40006400 	.word	0x40006400
 8000f10:	48000400 	.word	0x48000400

08000f14 <MX_GPIO_Init>:
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f14:	4b19      	ldr	r3, [pc, #100]	; (8000f7c <MX_GPIO_Init+0x68>)
{
 8000f16:	b500      	push	{lr}
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f18:	695a      	ldr	r2, [r3, #20]
 8000f1a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000f1e:	615a      	str	r2, [r3, #20]
 8000f20:	695a      	ldr	r2, [r3, #20]
{
 8000f22:	b089      	sub	sp, #36	; 0x24
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f24:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8000f28:	9200      	str	r2, [sp, #0]
 8000f2a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2c:	695a      	ldr	r2, [r3, #20]
 8000f2e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000f32:	615a      	str	r2, [r3, #20]
 8000f34:	695a      	ldr	r2, [r3, #20]
 8000f36:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000f3a:	9201      	str	r2, [sp, #4]
 8000f3c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f3e:	695a      	ldr	r2, [r3, #20]
 8000f40:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000f44:	615a      	str	r2, [r3, #20]
 8000f46:	695b      	ldr	r3, [r3, #20]
 8000f48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f4c:	9302      	str	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000f4e:	2200      	movs	r2, #0
 8000f50:	2120      	movs	r1, #32
 8000f52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f56:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000f58:	f7ff fc16 	bl	8000788 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000f5c:	2320      	movs	r3, #32
 8000f5e:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f60:	2301      	movs	r3, #1
 8000f62:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f64:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f66:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6e:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f70:	f7ff fb3a 	bl	80005e8 <HAL_GPIO_Init>

}
 8000f74:	b009      	add	sp, #36	; 0x24
 8000f76:	f85d fb04 	ldr.w	pc, [sp], #4
 8000f7a:	bf00      	nop
 8000f7c:	40021000 	.word	0x40021000

08000f80 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8000f80:	b510      	push	{r4, lr}
 8000f82:	b090      	sub	sp, #64	; 0x40
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f84:	2301      	movs	r3, #1
 8000f86:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8000f88:	2310      	movs	r3, #16
 8000f8a:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f90:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000f92:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f96:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000f98:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f9a:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000f9c:	2300      	movs	r3, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f9e:	9406      	str	r4, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fa0:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000fa2:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fa4:	f7ff fbf6 	bl	8000794 <HAL_RCC_OscConfig>
 8000fa8:	b100      	cbz	r0, 8000fac <SystemClock_Config+0x2c>
 8000faa:	e7fe      	b.n	8000faa <SystemClock_Config+0x2a>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fac:	230f      	movs	r3, #15
 8000fae:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fb0:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fb6:	9005      	str	r0, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fb8:	4621      	mov	r1, r4
 8000fba:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fbc:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fbe:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fc0:	f7ff fe92 	bl	8000ce8 <HAL_RCC_ClockConfig>
 8000fc4:	4604      	mov	r4, r0
 8000fc6:	b100      	cbz	r0, 8000fca <SystemClock_Config+0x4a>
 8000fc8:	e7fe      	b.n	8000fc8 <SystemClock_Config+0x48>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000fca:	f7ff ff4f 	bl	8000e6c <HAL_RCC_GetHCLKFreq>
 8000fce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fd2:	fbb0 f0f3 	udiv	r0, r0, r3
 8000fd6:	f7ff fadf 	bl	8000598 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000fda:	2004      	movs	r0, #4
 8000fdc:	f7ff faf2 	bl	80005c4 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000fe0:	4622      	mov	r2, r4
 8000fe2:	4621      	mov	r1, r4
 8000fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe8:	f7ff faa2 	bl	8000530 <HAL_NVIC_SetPriority>
}
 8000fec:	b010      	add	sp, #64	; 0x40
 8000fee:	bd10      	pop	{r4, pc}

08000ff0 <main>:
{
 8000ff0:	b508      	push	{r3, lr}
  HAL_Init();
 8000ff2:	f7ff f903 	bl	80001fc <HAL_Init>
  SystemClock_Config();
 8000ff6:	f7ff ffc3 	bl	8000f80 <SystemClock_Config>
  MX_GPIO_Init();
 8000ffa:	f7ff ff8b 	bl	8000f14 <MX_GPIO_Init>
  MX_CAN_Init();
 8000ffe:	f7ff ff3b 	bl	8000e78 <MX_CAN_Init>
  Tx.DLC = 1;
 8001002:	4b0c      	ldr	r3, [pc, #48]	; (8001034 <main+0x44>)
  hcan.pTxMsg = &Tx;
 8001004:	480c      	ldr	r0, [pc, #48]	; (8001038 <main+0x48>)
  Tx.RTR = CAN_RTR_DATA;
 8001006:	2200      	movs	r2, #0
  Tx.DLC = 1;
 8001008:	2501      	movs	r5, #1
  Tx.RTR = CAN_RTR_DATA;
 800100a:	60da      	str	r2, [r3, #12]
  Tx.IDE = CAN_ID_STD;
 800100c:	609a      	str	r2, [r3, #8]
  Tx.StdId = 32;
 800100e:	2420      	movs	r4, #32
  Tx.Data[0] = DataToTransmit;
 8001010:	2208      	movs	r2, #8
  if (HAL_CAN_Transmit(&hcan, 500) == HAL_OK)
 8001012:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
  Tx.DLC = 1;
 8001016:	611d      	str	r5, [r3, #16]
  Tx.StdId = 32;
 8001018:	601c      	str	r4, [r3, #0]
  Tx.Data[0] = DataToTransmit;
 800101a:	751a      	strb	r2, [r3, #20]
  hcan.pTxMsg = &Tx;
 800101c:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_CAN_Transmit(&hcan, 500) == HAL_OK)
 800101e:	f7ff f9a3 	bl	8000368 <HAL_CAN_Transmit>
 8001022:	b928      	cbnz	r0, 8001030 <main+0x40>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001024:	462a      	mov	r2, r5
 8001026:	4621      	mov	r1, r4
 8001028:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800102c:	f7ff fbac 	bl	8000788 <HAL_GPIO_WritePin>
 8001030:	e7fe      	b.n	8001030 <main+0x40>
 8001032:	bf00      	nop
 8001034:	20000068 	.word	0x20000068
 8001038:	20000024 	.word	0x20000024

0800103c <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 800103c:	e7fe      	b.n	800103c <_Error_Handler>
	...

08001040 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001040:	4b1d      	ldr	r3, [pc, #116]	; (80010b8 <HAL_MspInit+0x78>)
{
 8001042:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001044:	699a      	ldr	r2, [r3, #24]
 8001046:	f042 0201 	orr.w	r2, r2, #1
 800104a:	619a      	str	r2, [r3, #24]
 800104c:	699b      	ldr	r3, [r3, #24]
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001054:	2003      	movs	r0, #3
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001056:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001058:	f7ff fa58 	bl	800050c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800105c:	2200      	movs	r2, #0
 800105e:	4611      	mov	r1, r2
 8001060:	f06f 000b 	mvn.w	r0, #11
 8001064:	f7ff fa64 	bl	8000530 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001068:	2200      	movs	r2, #0
 800106a:	4611      	mov	r1, r2
 800106c:	f06f 000a 	mvn.w	r0, #10
 8001070:	f7ff fa5e 	bl	8000530 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001074:	2200      	movs	r2, #0
 8001076:	4611      	mov	r1, r2
 8001078:	f06f 0009 	mvn.w	r0, #9
 800107c:	f7ff fa58 	bl	8000530 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001080:	2200      	movs	r2, #0
 8001082:	4611      	mov	r1, r2
 8001084:	f06f 0004 	mvn.w	r0, #4
 8001088:	f7ff fa52 	bl	8000530 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800108c:	2200      	movs	r2, #0
 800108e:	4611      	mov	r1, r2
 8001090:	f06f 0003 	mvn.w	r0, #3
 8001094:	f7ff fa4c 	bl	8000530 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001098:	2200      	movs	r2, #0
 800109a:	4611      	mov	r1, r2
 800109c:	f06f 0001 	mvn.w	r0, #1
 80010a0:	f7ff fa46 	bl	8000530 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80010a4:	2200      	movs	r2, #0
 80010a6:	4611      	mov	r1, r2
 80010a8:	f04f 30ff 	mov.w	r0, #4294967295
 80010ac:	f7ff fa40 	bl	8000530 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010b0:	b003      	add	sp, #12
 80010b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80010b6:	bf00      	nop
 80010b8:	40021000 	.word	0x40021000

080010bc <NMI_Handler>:
 80010bc:	4770      	bx	lr

080010be <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80010be:	e7fe      	b.n	80010be <HardFault_Handler>

080010c0 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80010c0:	e7fe      	b.n	80010c0 <MemManage_Handler>

080010c2 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80010c2:	e7fe      	b.n	80010c2 <BusFault_Handler>

080010c4 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80010c4:	e7fe      	b.n	80010c4 <UsageFault_Handler>

080010c6 <SVC_Handler>:
 80010c6:	4770      	bx	lr

080010c8 <DebugMon_Handler>:
 80010c8:	4770      	bx	lr

080010ca <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80010ca:	4770      	bx	lr

080010cc <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80010cc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010ce:	f7ff f8a7 	bl	8000220 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 80010d6:	f7ff ba82 	b.w	80005de <HAL_SYSTICK_IRQHandler>
	...

080010dc <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010dc:	4915      	ldr	r1, [pc, #84]	; (8001134 <SystemInit+0x58>)
 80010de:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80010e2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80010ea:	4b13      	ldr	r3, [pc, #76]	; (8001138 <SystemInit+0x5c>)
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	f042 0201 	orr.w	r2, r2, #1
 80010f2:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 80010f4:	6858      	ldr	r0, [r3, #4]
 80010f6:	4a11      	ldr	r2, [pc, #68]	; (800113c <SystemInit+0x60>)
 80010f8:	4002      	ands	r2, r0
 80010fa:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001102:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001106:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800110e:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001110:	685a      	ldr	r2, [r3, #4]
 8001112:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001116:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8001118:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800111a:	f022 020f 	bic.w	r2, r2, #15
 800111e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8001120:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001122:	4a07      	ldr	r2, [pc, #28]	; (8001140 <SystemInit+0x64>)
 8001124:	4002      	ands	r2, r0
 8001126:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8001128:	2200      	movs	r2, #0
 800112a:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800112c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001130:	608b      	str	r3, [r1, #8]
 8001132:	4770      	bx	lr
 8001134:	e000ed00 	.word	0xe000ed00
 8001138:	40021000 	.word	0x40021000
 800113c:	f87fc00c 	.word	0xf87fc00c
 8001140:	ff00fccc 	.word	0xff00fccc

08001144 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001144:	f8df d034 	ldr.w	sp, [pc, #52]	; 800117c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001148:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800114a:	e003      	b.n	8001154 <LoopCopyDataInit>

0800114c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800114c:	4b0c      	ldr	r3, [pc, #48]	; (8001180 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800114e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001150:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001152:	3104      	adds	r1, #4

08001154 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001154:	480b      	ldr	r0, [pc, #44]	; (8001184 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001156:	4b0c      	ldr	r3, [pc, #48]	; (8001188 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001158:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800115a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800115c:	d3f6      	bcc.n	800114c <CopyDataInit>
	ldr	r2, =_sbss
 800115e:	4a0b      	ldr	r2, [pc, #44]	; (800118c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001160:	e002      	b.n	8001168 <LoopFillZerobss>

08001162 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001162:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001164:	f842 3b04 	str.w	r3, [r2], #4

08001168 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001168:	4b09      	ldr	r3, [pc, #36]	; (8001190 <LoopForever+0x16>)
	cmp	r2, r3
 800116a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800116c:	d3f9      	bcc.n	8001162 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800116e:	f7ff ffb5 	bl	80010dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001172:	f000 f811 	bl	8001198 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001176:	f7ff ff3b 	bl	8000ff0 <main>

0800117a <LoopForever>:

LoopForever:
    b LoopForever
 800117a:	e7fe      	b.n	800117a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800117c:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8001180:	08001240 	.word	0x08001240
	ldr	r0, =_sdata
 8001184:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001188:	20000004 	.word	0x20000004
	ldr	r2, =_sbss
 800118c:	20000004 	.word	0x20000004
	ldr	r3, = _ebss
 8001190:	20000084 	.word	0x20000084

08001194 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001194:	e7fe      	b.n	8001194 <ADC1_2_IRQHandler>
	...

08001198 <__libc_init_array>:
 8001198:	b570      	push	{r4, r5, r6, lr}
 800119a:	4e0d      	ldr	r6, [pc, #52]	; (80011d0 <__libc_init_array+0x38>)
 800119c:	4c0d      	ldr	r4, [pc, #52]	; (80011d4 <__libc_init_array+0x3c>)
 800119e:	1ba4      	subs	r4, r4, r6
 80011a0:	10a4      	asrs	r4, r4, #2
 80011a2:	2500      	movs	r5, #0
 80011a4:	42a5      	cmp	r5, r4
 80011a6:	d109      	bne.n	80011bc <__libc_init_array+0x24>
 80011a8:	4e0b      	ldr	r6, [pc, #44]	; (80011d8 <__libc_init_array+0x40>)
 80011aa:	4c0c      	ldr	r4, [pc, #48]	; (80011dc <__libc_init_array+0x44>)
 80011ac:	f000 f818 	bl	80011e0 <_init>
 80011b0:	1ba4      	subs	r4, r4, r6
 80011b2:	10a4      	asrs	r4, r4, #2
 80011b4:	2500      	movs	r5, #0
 80011b6:	42a5      	cmp	r5, r4
 80011b8:	d105      	bne.n	80011c6 <__libc_init_array+0x2e>
 80011ba:	bd70      	pop	{r4, r5, r6, pc}
 80011bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80011c0:	4798      	blx	r3
 80011c2:	3501      	adds	r5, #1
 80011c4:	e7ee      	b.n	80011a4 <__libc_init_array+0xc>
 80011c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80011ca:	4798      	blx	r3
 80011cc:	3501      	adds	r5, #1
 80011ce:	e7f2      	b.n	80011b6 <__libc_init_array+0x1e>
 80011d0:	08001238 	.word	0x08001238
 80011d4:	08001238 	.word	0x08001238
 80011d8:	08001238 	.word	0x08001238
 80011dc:	0800123c 	.word	0x0800123c

080011e0 <_init>:
 80011e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011e2:	bf00      	nop
 80011e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011e6:	bc08      	pop	{r3}
 80011e8:	469e      	mov	lr, r3
 80011ea:	4770      	bx	lr

080011ec <_fini>:
 80011ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011ee:	bf00      	nop
 80011f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011f2:	bc08      	pop	{r3}
 80011f4:	469e      	mov	lr, r3
 80011f6:	4770      	bx	lr
