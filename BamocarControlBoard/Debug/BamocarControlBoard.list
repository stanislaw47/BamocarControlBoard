
BamocarControlBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b0c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08002ca0  08002ca0  00012ca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002d0c  08002d0c  00012d0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002d10  08002d10  00012d10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08002d14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
  7 .bss          00000230  20000004  20000004  00020004  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000234  20000234  00020004  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001be98  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000363a  00000000  00000000  0003becc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000a693  00000000  00000000  0003f506  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000ad8  00000000  00000000  00049ba0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000011c0  00000000  00000000  0004a678  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000079c2  00000000  00000000  0004b838  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000444b  00000000  00000000  000531fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00057645  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002274  00000000  00000000  000576c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002c88 	.word	0x08002c88

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	08002c88 	.word	0x08002c88

080001d4 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 80001d4:	4b08      	ldr	r3, [pc, #32]	; (80001f8 <HAL_InitTick+0x24>)
 80001d6:	4a09      	ldr	r2, [pc, #36]	; (80001fc <HAL_InitTick+0x28>)
 80001d8:	681b      	ldr	r3, [r3, #0]
{
 80001da:	b510      	push	{r4, lr}
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 80001dc:	fba2 2303 	umull	r2, r3, r2, r3
{
 80001e0:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 80001e2:	0998      	lsrs	r0, r3, #6
 80001e4:	f000 fc4c 	bl	8000a80 <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 80001e8:	4621      	mov	r1, r4
 80001ea:	2200      	movs	r2, #0
 80001ec:	f04f 30ff 	mov.w	r0, #4294967295
 80001f0:	f000 fc04 	bl	80009fc <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 80001f4:	2000      	movs	r0, #0
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000000 	.word	0x20000000
 80001fc:	10624dd3 	.word	0x10624dd3

08000200 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000200:	4a07      	ldr	r2, [pc, #28]	; (8000220 <HAL_Init+0x20>)
{
 8000202:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000204:	6813      	ldr	r3, [r2, #0]
 8000206:	f043 0310 	orr.w	r3, r3, #16
 800020a:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800020c:	2003      	movs	r0, #3
 800020e:	f000 fbe3 	bl	80009d8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000212:	2000      	movs	r0, #0
 8000214:	f7ff ffde 	bl	80001d4 <HAL_InitTick>
  HAL_MspInit();
 8000218:	f002 fb6a 	bl	80028f0 <HAL_MspInit>
}
 800021c:	2000      	movs	r0, #0
 800021e:	bd08      	pop	{r3, pc}
 8000220:	40022000 	.word	0x40022000

08000224 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000224:	4a02      	ldr	r2, [pc, #8]	; (8000230 <HAL_IncTick+0xc>)
 8000226:	6813      	ldr	r3, [r2, #0]
 8000228:	3301      	adds	r3, #1
 800022a:	6013      	str	r3, [r2, #0]
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop
 8000230:	20000028 	.word	0x20000028

08000234 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000234:	4b01      	ldr	r3, [pc, #4]	; (800023c <HAL_GetTick+0x8>)
 8000236:	6818      	ldr	r0, [r3, #0]
}
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop
 800023c:	20000028 	.word	0x20000028

08000240 <HAL_CAN_ConfigFilter>:
  assert_param(IS_FUNCTIONAL_STATE(sFilterConfig->FilterActivation));

  filternbrbitpos = (1U) << sFilterConfig->FilterNumber;

  /* Initialisation mode for the filter */
  SET_BIT(hcan->Instance->FMR, CAN_FMR_FINIT);
 8000240:	6803      	ldr	r3, [r0, #0]
  filternbrbitpos = (1U) << sFilterConfig->FilterNumber;
 8000242:	6948      	ldr	r0, [r1, #20]
  SET_BIT(hcan->Instance->FMR, CAN_FMR_FINIT);
 8000244:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000248:	f042 0201 	orr.w	r2, r2, #1
{
 800024c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Filter Deactivation */
  CLEAR_BIT(hcan->Instance->FA1R, filternbrbitpos);

  /* Filter Scale */
  if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000250:	69ce      	ldr	r6, [r1, #28]
  SET_BIT(hcan->Instance->FMR, CAN_FMR_FINIT);
 8000252:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  filternbrbitpos = (1U) << sFilterConfig->FilterNumber;
 8000256:	2201      	movs	r2, #1
  CLEAR_BIT(hcan->Instance->FA1R, filternbrbitpos);
 8000258:	f8d3 421c 	ldr.w	r4, [r3, #540]	; 0x21c
  filternbrbitpos = (1U) << sFilterConfig->FilterNumber;
 800025c:	4082      	lsls	r2, r0
  CLEAR_BIT(hcan->Instance->FA1R, filternbrbitpos);
 800025e:	43d5      	mvns	r5, r2
 8000260:	402c      	ands	r4, r5
 8000262:	f8c3 421c 	str.w	r4, [r3, #540]	; 0x21c
  if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000266:	2e00      	cmp	r6, #0
 8000268:	d13f      	bne.n	80002ea <HAL_CAN_ConfigFilter+0xaa>
  {
    /* 16-bit scale for the filter */
    CLEAR_BIT(hcan->Instance->FS1R, filternbrbitpos);
 800026a:	f8d3 720c 	ldr.w	r7, [r3, #524]	; 0x20c

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800026e:	68ce      	ldr	r6, [r1, #12]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000270:	f8b1 e004 	ldrh.w	lr, [r1, #4]

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000274:	880c      	ldrh	r4, [r1, #0]
 8000276:	eb03 08c0 	add.w	r8, r3, r0, lsl #3
    CLEAR_BIT(hcan->Instance->FS1R, filternbrbitpos);
 800027a:	ea05 0007 	and.w	r0, r5, r7
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800027e:	688f      	ldr	r7, [r1, #8]
    CLEAR_BIT(hcan->Instance->FS1R, filternbrbitpos);
 8000280:	f8c3 020c 	str.w	r0, [r3, #524]	; 0x20c
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000284:	ea4e 4606 	orr.w	r6, lr, r6, lsl #16
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000288:	ea44 4407 	orr.w	r4, r4, r7, lsl #16
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
 800028c:	f8c8 6240 	str.w	r6, [r8, #576]	; 0x240
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
 8000290:	f8c8 4244 	str.w	r4, [r8, #580]	; 0x244
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
  }

  /* Filter Mode */
  if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000294:	6988      	ldr	r0, [r1, #24]
 8000296:	bb10      	cbnz	r0, 80002de <HAL_CAN_ConfigFilter+0x9e>
  {
    /*Id/Mask mode for the filter*/
    CLEAR_BIT(hcan->Instance->FM1R, filternbrbitpos);
 8000298:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 800029c:	4028      	ands	r0, r5
 800029e:	f8c3 0204 	str.w	r0, [r3, #516]	; 0x204
    /*Identifier list mode for the filter*/
    SET_BIT(hcan->Instance->FM1R, filternbrbitpos);
  }

  /* Filter FIFO assignment */
  if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80002a2:	6908      	ldr	r0, [r1, #16]
 80002a4:	b9a8      	cbnz	r0, 80002d2 <HAL_CAN_ConfigFilter+0x92>
  {
    /* FIFO 0 assignation for the filter */
    CLEAR_BIT(hcan->Instance->FFA1R, filternbrbitpos);
 80002a6:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 80002aa:	4028      	ands	r0, r5
 80002ac:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214
    /* FIFO 1 assignation for the filter */
    SET_BIT(hcan->Instance->FFA1R, filternbrbitpos);
  }
  
  /* Filter activation */
  if (sFilterConfig->FilterActivation == ENABLE)
 80002b0:	6a09      	ldr	r1, [r1, #32]
 80002b2:	2901      	cmp	r1, #1
 80002b4:	d104      	bne.n	80002c0 <HAL_CAN_ConfigFilter+0x80>
  {
    SET_BIT(hcan->Instance->FA1R, filternbrbitpos);
 80002b6:	f8d3 121c 	ldr.w	r1, [r3, #540]	; 0x21c
 80002ba:	430a      	orrs	r2, r1
 80002bc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
  }

  /* Leave the initialisation mode for the filter */
  CLEAR_BIT(hcan->Instance->FMR, ((uint32_t)CAN_FMR_FINIT));
 80002c0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80002c4:	f022 0201 	bic.w	r2, r2, #1
 80002c8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  
  /* Return function status */
  return HAL_OK;
}
 80002cc:	2000      	movs	r0, #0
 80002ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SET_BIT(hcan->Instance->FFA1R, filternbrbitpos);
 80002d2:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 80002d6:	4310      	orrs	r0, r2
 80002d8:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214
 80002dc:	e7e8      	b.n	80002b0 <HAL_CAN_ConfigFilter+0x70>
    SET_BIT(hcan->Instance->FM1R, filternbrbitpos);
 80002de:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 80002e2:	4310      	orrs	r0, r2
 80002e4:	f8c3 0204 	str.w	r0, [r3, #516]	; 0x204
 80002e8:	e7db      	b.n	80002a2 <HAL_CAN_ConfigFilter+0x62>
  if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80002ea:	2e01      	cmp	r6, #1
 80002ec:	d1d2      	bne.n	8000294 <HAL_CAN_ConfigFilter+0x54>
    SET_BIT(hcan->Instance->FS1R, filternbrbitpos);
 80002ee:	f8d3 620c 	ldr.w	r6, [r3, #524]	; 0x20c
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80002f2:	680f      	ldr	r7, [r1, #0]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80002f4:	f8b1 c004 	ldrh.w	ip, [r1, #4]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80002f8:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
 80002fc:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
    SET_BIT(hcan->Instance->FS1R, filternbrbitpos);
 8000300:	ea42 0006 	orr.w	r0, r2, r6
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000304:	688e      	ldr	r6, [r1, #8]
    SET_BIT(hcan->Instance->FS1R, filternbrbitpos);
 8000306:	f8c3 020c 	str.w	r0, [r3, #524]	; 0x20c
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800030a:	ea4c 4707 	orr.w	r7, ip, r7, lsl #16
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800030e:	ea4e 4606 	orr.w	r6, lr, r6, lsl #16
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
 8000312:	f8c4 7240 	str.w	r7, [r4, #576]	; 0x240
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
 8000316:	f8c4 6244 	str.w	r6, [r4, #580]	; 0x244
 800031a:	e7bb      	b.n	8000294 <HAL_CAN_ConfigFilter+0x54>

0800031c <HAL_CAN_Init>:
  if(hcan == NULL)
 800031c:	2800      	cmp	r0, #0
 800031e:	f000 8098 	beq.w	8000452 <HAL_CAN_Init+0x136>
  if(hcan->State == HAL_CAN_STATE_RESET)
 8000322:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 8000326:	b570      	push	{r4, r5, r6, lr}
  if(hcan->State == HAL_CAN_STATE_RESET)
 8000328:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800032c:	4605      	mov	r5, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	f000 8083 	beq.w	800043a <HAL_CAN_Init+0x11e>
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000334:	682b      	ldr	r3, [r5, #0]
  hcan->State = HAL_CAN_STATE_BUSY;
 8000336:	2202      	movs	r2, #2
 8000338:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800033c:	681a      	ldr	r2, [r3, #0]
 800033e:	f022 0202 	bic.w	r2, r2, #2
 8000342:	601a      	str	r2, [r3, #0]
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000344:	681a      	ldr	r2, [r3, #0]
 8000346:	f042 0201 	orr.w	r2, r2, #1
 800034a:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();   
 800034c:	f7ff ff72 	bl	8000234 <HAL_GetTick>
 8000350:	4606      	mov	r6, r0
  while(HAL_IS_BIT_CLR(hcan->Instance->MSR, CAN_MSR_INAK))
 8000352:	e004      	b.n	800035e <HAL_CAN_Init+0x42>
    if((HAL_GetTick()-tickstart) > CAN_TIMEOUT_VALUE)
 8000354:	f7ff ff6e 	bl	8000234 <HAL_GetTick>
 8000358:	1b80      	subs	r0, r0, r6
 800035a:	280a      	cmp	r0, #10
 800035c:	d862      	bhi.n	8000424 <HAL_CAN_Init+0x108>
  while(HAL_IS_BIT_CLR(hcan->Instance->MSR, CAN_MSR_INAK))
 800035e:	682a      	ldr	r2, [r5, #0]
 8000360:	6854      	ldr	r4, [r2, #4]
 8000362:	f014 0401 	ands.w	r4, r4, #1
 8000366:	d0f5      	beq.n	8000354 <HAL_CAN_Init+0x38>
  if (HAL_IS_BIT_SET(hcan->Instance->MSR, CAN_MSR_INAK))
 8000368:	6853      	ldr	r3, [r2, #4]
 800036a:	07d9      	lsls	r1, r3, #31
 800036c:	d560      	bpl.n	8000430 <HAL_CAN_Init+0x114>
    if (hcan->Init.TTCM == ENABLE)
 800036e:	69ab      	ldr	r3, [r5, #24]
 8000370:	2b01      	cmp	r3, #1
      SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000372:	6813      	ldr	r3, [r2, #0]
 8000374:	bf0c      	ite	eq
 8000376:	f043 0380 	orreq.w	r3, r3, #128	; 0x80
      CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800037a:	f023 0380 	bicne.w	r3, r3, #128	; 0x80
 800037e:	6013      	str	r3, [r2, #0]
    if (hcan->Init.ABOM == ENABLE)
 8000380:	69eb      	ldr	r3, [r5, #28]
 8000382:	2b01      	cmp	r3, #1
      SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000384:	6813      	ldr	r3, [r2, #0]
 8000386:	bf0c      	ite	eq
 8000388:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
      CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800038c:	f023 0340 	bicne.w	r3, r3, #64	; 0x40
 8000390:	6013      	str	r3, [r2, #0]
    if (hcan->Init.AWUM == ENABLE)
 8000392:	6a2b      	ldr	r3, [r5, #32]
 8000394:	2b01      	cmp	r3, #1
      SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000396:	6813      	ldr	r3, [r2, #0]
 8000398:	bf0c      	ite	eq
 800039a:	f043 0320 	orreq.w	r3, r3, #32
      CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800039e:	f023 0320 	bicne.w	r3, r3, #32
 80003a2:	6013      	str	r3, [r2, #0]
    if (hcan->Init.NART == ENABLE)
 80003a4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80003a6:	2b01      	cmp	r3, #1
      SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80003a8:	6813      	ldr	r3, [r2, #0]
 80003aa:	bf0c      	ite	eq
 80003ac:	f043 0310 	orreq.w	r3, r3, #16
      CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80003b0:	f023 0310 	bicne.w	r3, r3, #16
 80003b4:	6013      	str	r3, [r2, #0]
    if (hcan->Init.RFLM == ENABLE)
 80003b6:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80003b8:	2b01      	cmp	r3, #1
      SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80003ba:	6813      	ldr	r3, [r2, #0]
 80003bc:	bf0c      	ite	eq
 80003be:	f043 0308 	orreq.w	r3, r3, #8
      CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80003c2:	f023 0308 	bicne.w	r3, r3, #8
 80003c6:	6013      	str	r3, [r2, #0]
    if (hcan->Init.TXFP == ENABLE)
 80003c8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80003ca:	2b01      	cmp	r3, #1
      SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80003cc:	6813      	ldr	r3, [r2, #0]
 80003ce:	bf0c      	ite	eq
 80003d0:	f043 0304 	orreq.w	r3, r3, #4
      CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80003d4:	f023 0304 	bicne.w	r3, r3, #4
 80003d8:	6013      	str	r3, [r2, #0]
    WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80003da:	68ab      	ldr	r3, [r5, #8]
 80003dc:	68ee      	ldr	r6, [r5, #12]
 80003de:	692c      	ldr	r4, [r5, #16]
 80003e0:	6968      	ldr	r0, [r5, #20]
 80003e2:	6869      	ldr	r1, [r5, #4]
 80003e4:	4333      	orrs	r3, r6
 80003e6:	4323      	orrs	r3, r4
 80003e8:	4303      	orrs	r3, r0
 80003ea:	3901      	subs	r1, #1
 80003ec:	430b      	orrs	r3, r1
 80003ee:	61d3      	str	r3, [r2, #28]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80003f0:	6813      	ldr	r3, [r2, #0]
 80003f2:	f023 0301 	bic.w	r3, r3, #1
 80003f6:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();   
 80003f8:	f7ff ff1c 	bl	8000234 <HAL_GetTick>
 80003fc:	4604      	mov	r4, r0
    while(HAL_IS_BIT_SET(hcan->Instance->MSR, CAN_MSR_INAK))
 80003fe:	e004      	b.n	800040a <HAL_CAN_Init+0xee>
      if((HAL_GetTick()-tickstart) > CAN_TIMEOUT_VALUE)
 8000400:	f7ff ff18 	bl	8000234 <HAL_GetTick>
 8000404:	1b00      	subs	r0, r0, r4
 8000406:	280a      	cmp	r0, #10
 8000408:	d81c      	bhi.n	8000444 <HAL_CAN_Init+0x128>
    while(HAL_IS_BIT_SET(hcan->Instance->MSR, CAN_MSR_INAK))
 800040a:	682b      	ldr	r3, [r5, #0]
 800040c:	685a      	ldr	r2, [r3, #4]
 800040e:	07d2      	lsls	r2, r2, #31
 8000410:	d4f6      	bmi.n	8000400 <HAL_CAN_Init+0xe4>
    if(HAL_IS_BIT_CLR(hcan->Instance->MSR, CAN_MSR_INAK))
 8000412:	6858      	ldr	r0, [r3, #4]
 8000414:	f010 0001 	ands.w	r0, r0, #1
 8000418:	d10a      	bne.n	8000430 <HAL_CAN_Init+0x114>
    hcan->State = HAL_CAN_STATE_READY;
 800041a:	2301      	movs	r3, #1
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800041c:	6428      	str	r0, [r5, #64]	; 0x40
    hcan->State = HAL_CAN_STATE_READY;
 800041e:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    return HAL_OK;
 8000422:	bd70      	pop	{r4, r5, r6, pc}
      hcan->State= HAL_CAN_STATE_TIMEOUT;
 8000424:	2003      	movs	r0, #3
      __HAL_UNLOCK(hcan);
 8000426:	f885 403c 	strb.w	r4, [r5, #60]	; 0x3c
      hcan->State= HAL_CAN_STATE_TIMEOUT;
 800042a:	f885 003d 	strb.w	r0, [r5, #61]	; 0x3d
      return HAL_TIMEOUT;
 800042e:	bd70      	pop	{r4, r5, r6, pc}
    hcan->State = HAL_CAN_STATE_ERROR;
 8000430:	2304      	movs	r3, #4
 8000432:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    return HAL_ERROR;
 8000436:	2001      	movs	r0, #1
}
 8000438:	bd70      	pop	{r4, r5, r6, pc}
    hcan->Lock = HAL_UNLOCKED;
 800043a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_CAN_MspInit(hcan);
 800043e:	f002 f8b7 	bl	80025b0 <HAL_CAN_MspInit>
 8000442:	e777      	b.n	8000334 <HAL_CAN_Init+0x18>
         hcan->State= HAL_CAN_STATE_TIMEOUT;
 8000444:	2003      	movs	r0, #3
       __HAL_UNLOCK(hcan);
 8000446:	2300      	movs	r3, #0
         hcan->State= HAL_CAN_STATE_TIMEOUT;
 8000448:	f885 003d 	strb.w	r0, [r5, #61]	; 0x3d
       __HAL_UNLOCK(hcan);
 800044c:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
       return HAL_TIMEOUT;
 8000450:	bd70      	pop	{r4, r5, r6, pc}
     return HAL_ERROR;
 8000452:	2001      	movs	r0, #1
 8000454:	4770      	bx	lr
 8000456:	bf00      	nop

08000458 <HAL_CAN_Transmit_IT>:
  /* Check the parameters */
  assert_param(IS_CAN_IDTYPE(hcan->pTxMsg->IDE));
  assert_param(IS_CAN_RTR(hcan->pTxMsg->RTR));
  assert_param(IS_CAN_DLC(hcan->pTxMsg->DLC));

  if(((hcan->Instance->TSR&CAN_TSR_TME0) == CAN_TSR_TME0) || \
 8000458:	6803      	ldr	r3, [r0, #0]
 800045a:	689a      	ldr	r2, [r3, #8]
 800045c:	0151      	lsls	r1, r2, #5
 800045e:	d402      	bmi.n	8000466 <HAL_CAN_Transmit_IT+0xe>
     ((hcan->Instance->TSR&CAN_TSR_TME1) == CAN_TSR_TME1) || \
 8000460:	689a      	ldr	r2, [r3, #8]
  if(((hcan->Instance->TSR&CAN_TSR_TME0) == CAN_TSR_TME0) || \
 8000462:	0112      	lsls	r2, r2, #4
 8000464:	d55c      	bpl.n	8000520 <HAL_CAN_Transmit_IT+0xc8>
     ((hcan->Instance->TSR&CAN_TSR_TME2) == CAN_TSR_TME2))
  {
    /* Process Locked */
    __HAL_LOCK(hcan);
 8000466:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 800046a:	2a01      	cmp	r2, #1
 800046c:	d056      	beq.n	800051c <HAL_CAN_Transmit_IT+0xc4>
    
    /* Select one empty transmit mailbox */
    if(HAL_IS_BIT_SET(hcan->Instance->TSR, CAN_TSR_TME0))
 800046e:	689a      	ldr	r2, [r3, #8]
    __HAL_LOCK(hcan);
 8000470:	2101      	movs	r1, #1
    if(HAL_IS_BIT_SET(hcan->Instance->TSR, CAN_TSR_TME0))
 8000472:	0152      	lsls	r2, r2, #5
{
 8000474:	b4f0      	push	{r4, r5, r6, r7}
    __HAL_LOCK(hcan);
 8000476:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
    if(HAL_IS_BIT_SET(hcan->Instance->TSR, CAN_TSR_TME0))
 800047a:	d464      	bmi.n	8000546 <HAL_CAN_Transmit_IT+0xee>
    {
      transmitmailbox = CAN_TXMAILBOX_0;
    }
    else if(HAL_IS_BIT_SET(hcan->Instance->TSR, CAN_TSR_TME1))
 800047c:	689a      	ldr	r2, [r3, #8]
    {
      transmitmailbox = CAN_TXMAILBOX_1;
    }
    else
    {
      transmitmailbox = CAN_TXMAILBOX_2;
 800047e:	f012 6f00 	tst.w	r2, #134217728	; 0x8000000
 8000482:	bf14      	ite	ne
 8000484:	460c      	movne	r4, r1
 8000486:	2402      	moveq	r4, #2
 8000488:	0124      	lsls	r4, r4, #4
 800048a:	191a      	adds	r2, r3, r4
    }

    /* Set up the Id */
    hcan->Instance->sTxMailBox[transmitmailbox].TIR &= CAN_TI0R_TXRQ;
    if(hcan->pTxMsg->IDE == CAN_ID_STD)
 800048c:	6b05      	ldr	r5, [r0, #48]	; 0x30
    hcan->Instance->sTxMailBox[transmitmailbox].TIR &= CAN_TI0R_TXRQ;
 800048e:	f8d2 6180 	ldr.w	r6, [r2, #384]	; 0x180
    if(hcan->pTxMsg->IDE == CAN_ID_STD)
 8000492:	68a9      	ldr	r1, [r5, #8]
    hcan->Instance->sTxMailBox[transmitmailbox].TIR &= CAN_TI0R_TXRQ;
 8000494:	f006 0601 	and.w	r6, r6, #1
 8000498:	f8c2 6180 	str.w	r6, [r2, #384]	; 0x180
    if(hcan->pTxMsg->IDE == CAN_ID_STD)
 800049c:	2900      	cmp	r1, #0
 800049e:	d147      	bne.n	8000530 <HAL_CAN_Transmit_IT+0xd8>
    {
      assert_param(IS_CAN_STDID(hcan->pTxMsg->StdId));
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->StdId << CAN_TI0R_STID_Pos) | \
 80004a0:	682f      	ldr	r7, [r5, #0]
 80004a2:	68e9      	ldr	r1, [r5, #12]
 80004a4:	f8d2 6180 	ldr.w	r6, [r2, #384]	; 0x180
 80004a8:	ea41 5147 	orr.w	r1, r1, r7, lsl #21
 80004ac:	4331      	orrs	r1, r6
 80004ae:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
                                                           hcan->pTxMsg->RTR);
    }

    /* Set up the DLC */
    hcan->pTxMsg->DLC &= (uint8_t)0x0000000FU;
    hcan->Instance->sTxMailBox[transmitmailbox].TDTR &= 0xFFFFFFF0U;
 80004b2:	f8d2 6184 	ldr.w	r6, [r2, #388]	; 0x184
    hcan->pTxMsg->DLC &= (uint8_t)0x0000000FU;
 80004b6:	6929      	ldr	r1, [r5, #16]
    hcan->Instance->sTxMailBox[transmitmailbox].TDTR &= 0xFFFFFFF0U;
 80004b8:	f026 060f 	bic.w	r6, r6, #15
    hcan->pTxMsg->DLC &= (uint8_t)0x0000000FU;
 80004bc:	f001 010f 	and.w	r1, r1, #15
 80004c0:	6129      	str	r1, [r5, #16]
    hcan->Instance->sTxMailBox[transmitmailbox].TDTR &= 0xFFFFFFF0U;
 80004c2:	f8c2 6184 	str.w	r6, [r2, #388]	; 0x184
    hcan->Instance->sTxMailBox[transmitmailbox].TDTR |= hcan->pTxMsg->DLC;
 80004c6:	f8d2 6184 	ldr.w	r6, [r2, #388]	; 0x184
 80004ca:	4331      	orrs	r1, r6
 80004cc:	f8c2 1184 	str.w	r1, [r2, #388]	; 0x184

    /* Set up the data field */
    WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR, ((uint32_t)hcan->pTxMsg->Data[3] << CAN_TDL0R_DATA3_Pos) |
 80004d0:	441c      	add	r4, r3
 80004d2:	6969      	ldr	r1, [r5, #20]
 80004d4:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
                                                                ((uint32_t)hcan->pTxMsg->Data[2] << CAN_TDL0R_DATA2_Pos) |
                                                                ((uint32_t)hcan->pTxMsg->Data[1] << CAN_TDL0R_DATA1_Pos) |
                                                                ((uint32_t)hcan->pTxMsg->Data[0] << CAN_TDL0R_DATA0_Pos));
    WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR, ((uint32_t)hcan->pTxMsg->Data[7] << CAN_TDL0R_DATA3_Pos) |
 80004d8:	69a9      	ldr	r1, [r5, #24]
 80004da:	f8c4 118c 	str.w	r1, [r4, #396]	; 0x18c
                                                                ((uint32_t)hcan->pTxMsg->Data[6] << CAN_TDL0R_DATA2_Pos) |
                                                                ((uint32_t)hcan->pTxMsg->Data[5] << CAN_TDL0R_DATA1_Pos) |
                                                                ((uint32_t)hcan->pTxMsg->Data[4] << CAN_TDL0R_DATA0_Pos));

    /* Change CAN state */
    switch(hcan->State)
 80004de:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
 80004e2:	b2c9      	uxtb	r1, r1
 80004e4:	2932      	cmp	r1, #50	; 0x32
 80004e6:	d034      	beq.n	8000552 <HAL_CAN_Transmit_IT+0xfa>
 80004e8:	2962      	cmp	r1, #98	; 0x62
 80004ea:	d036      	beq.n	800055a <HAL_CAN_Transmit_IT+0x102>
 80004ec:	2922      	cmp	r1, #34	; 0x22
 80004ee:	d02c      	beq.n	800054a <HAL_CAN_Transmit_IT+0xf2>
          break;
      case(HAL_CAN_STATE_BUSY_RX0_RX1):
          hcan->State = HAL_CAN_STATE_BUSY_TX_RX0_RX1;
          break;
      default: /* HAL_CAN_STATE_READY */
          hcan->State = HAL_CAN_STATE_BUSY_TX;
 80004f0:	2112      	movs	r1, #18
 80004f2:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
          break;
    }

    /* Set CAN error code to none */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80004f6:	2100      	movs	r1, #0
 80004f8:	6401      	str	r1, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hcan);

    /* Request transmission */
    hcan->Instance->sTxMailBox[transmitmailbox].TIR |= CAN_TI0R_TXRQ;
 80004fa:	f8d2 4180 	ldr.w	r4, [r2, #384]	; 0x180
    __HAL_UNLOCK(hcan);
 80004fe:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
    hcan->Instance->sTxMailBox[transmitmailbox].TIR |= CAN_TI0R_TXRQ;
 8000502:	f044 0401 	orr.w	r4, r4, #1
 8000506:	f8c2 4180 	str.w	r4, [r2, #384]	; 0x180
    /*  - Enable Error passive Interrupt */
    /*  - Enable Bus-off Interrupt */
    /*  - Enable Last error code Interrupt */
    /*  - Enable Error Interrupt */
    /*  - Enable Transmit mailbox empty Interrupt */
    __HAL_CAN_ENABLE_IT(hcan, CAN_IT_EWG |
 800050a:	695a      	ldr	r2, [r3, #20]
 800050c:	f442 420f 	orr.w	r2, r2, #36608	; 0x8f00
 8000510:	f042 0201 	orr.w	r2, r2, #1

    /* Return function status */
    return HAL_ERROR;
  }
  
  return HAL_OK;
 8000514:	4608      	mov	r0, r1
    __HAL_CAN_ENABLE_IT(hcan, CAN_IT_EWG |
 8000516:	615a      	str	r2, [r3, #20]
}
 8000518:	bcf0      	pop	{r4, r5, r6, r7}
 800051a:	4770      	bx	lr
    __HAL_LOCK(hcan);
 800051c:	2002      	movs	r0, #2
 800051e:	4770      	bx	lr
     ((hcan->Instance->TSR&CAN_TSR_TME2) == CAN_TSR_TME2))
 8000520:	689a      	ldr	r2, [r3, #8]
     ((hcan->Instance->TSR&CAN_TSR_TME1) == CAN_TSR_TME1) || \
 8000522:	00d1      	lsls	r1, r2, #3
 8000524:	d49f      	bmi.n	8000466 <HAL_CAN_Transmit_IT+0xe>
    hcan->State = HAL_CAN_STATE_ERROR;
 8000526:	2304      	movs	r3, #4
 8000528:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    return HAL_ERROR;
 800052c:	2001      	movs	r0, #1
 800052e:	4770      	bx	lr
                                                           hcan->pTxMsg->IDE |                         \
 8000530:	68ef      	ldr	r7, [r5, #12]
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->ExtId << CAN_TI0R_EXID_Pos) | \
 8000532:	686e      	ldr	r6, [r5, #4]
                                                           hcan->pTxMsg->IDE |                         \
 8000534:	4339      	orrs	r1, r7
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->ExtId << CAN_TI0R_EXID_Pos) | \
 8000536:	f8d2 7180 	ldr.w	r7, [r2, #384]	; 0x180
                                                           hcan->pTxMsg->IDE |                         \
 800053a:	ea41 01c6 	orr.w	r1, r1, r6, lsl #3
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->ExtId << CAN_TI0R_EXID_Pos) | \
 800053e:	4339      	orrs	r1, r7
 8000540:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
 8000544:	e7b5      	b.n	80004b2 <HAL_CAN_Transmit_IT+0x5a>
      transmitmailbox = CAN_TXMAILBOX_0;
 8000546:	2400      	movs	r4, #0
 8000548:	e79e      	b.n	8000488 <HAL_CAN_Transmit_IT+0x30>
          hcan->State = HAL_CAN_STATE_BUSY_TX_RX0;
 800054a:	2142      	movs	r1, #66	; 0x42
 800054c:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
          break;
 8000550:	e7d1      	b.n	80004f6 <HAL_CAN_Transmit_IT+0x9e>
          hcan->State = HAL_CAN_STATE_BUSY_TX_RX1;
 8000552:	2152      	movs	r1, #82	; 0x52
 8000554:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
          break;
 8000558:	e7cd      	b.n	80004f6 <HAL_CAN_Transmit_IT+0x9e>
          hcan->State = HAL_CAN_STATE_BUSY_TX_RX0_RX1;
 800055a:	2172      	movs	r1, #114	; 0x72
 800055c:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
          break;
 8000560:	e7c9      	b.n	80004f6 <HAL_CAN_Transmit_IT+0x9e>
 8000562:	bf00      	nop

08000564 <HAL_CAN_Receive_IT>:
{
  /* Check the parameters */
  assert_param(IS_CAN_FIFO(FIFONumber));

  /* Process locked */
  __HAL_LOCK(hcan);
 8000564:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000568:	2b01      	cmp	r3, #1
 800056a:	d060      	beq.n	800062e <HAL_CAN_Receive_IT+0xca>
 800056c:	2301      	movs	r3, #1
 800056e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Check if CAN state is not busy for RX FIFO0 */
  if ((FIFONumber == CAN_FIFO0) && ((hcan->State == HAL_CAN_STATE_BUSY_RX0) ||        \
 8000572:	bb51      	cbnz	r1, 80005ca <HAL_CAN_Receive_IT+0x66>
 8000574:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000578:	2b22      	cmp	r3, #34	; 0x22
 800057a:	d053      	beq.n	8000624 <HAL_CAN_Receive_IT+0xc0>
                                    (hcan->State == HAL_CAN_STATE_BUSY_TX_RX0) ||      \
 800057c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
  if ((FIFONumber == CAN_FIFO0) && ((hcan->State == HAL_CAN_STATE_BUSY_RX0) ||        \
 8000580:	2b42      	cmp	r3, #66	; 0x42
 8000582:	d04f      	beq.n	8000624 <HAL_CAN_Receive_IT+0xc0>
                                    (hcan->State == HAL_CAN_STATE_BUSY_RX0_RX1) ||     \
 8000584:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
                                    (hcan->State == HAL_CAN_STATE_BUSY_TX_RX0) ||      \
 8000588:	2b62      	cmp	r3, #98	; 0x62
 800058a:	d04b      	beq.n	8000624 <HAL_CAN_Receive_IT+0xc0>
                                    (hcan->State == HAL_CAN_STATE_BUSY_TX_RX0_RX1)))
 800058c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
                                    (hcan->State == HAL_CAN_STATE_BUSY_RX0_RX1) ||     \
 8000590:	2b72      	cmp	r3, #114	; 0x72
 8000592:	d047      	beq.n	8000624 <HAL_CAN_Receive_IT+0xc0>
  }

  /* Change CAN state */
  if (FIFONumber == CAN_FIFO0)
  {
    switch(hcan->State)
 8000594:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000598:	b2db      	uxtb	r3, r3
 800059a:	2b32      	cmp	r3, #50	; 0x32
 800059c:	d05d      	beq.n	800065a <HAL_CAN_Receive_IT+0xf6>
 800059e:	2b52      	cmp	r3, #82	; 0x52
 80005a0:	d057      	beq.n	8000652 <HAL_CAN_Receive_IT+0xee>
 80005a2:	2b12      	cmp	r3, #18
 80005a4:	d051      	beq.n	800064a <HAL_CAN_Receive_IT+0xe6>
        break;
      case(HAL_CAN_STATE_BUSY_TX_RX1):
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX0_RX1;
        break;
      default: /* HAL_CAN_STATE_READY */
        hcan->State = HAL_CAN_STATE_BUSY_RX0;
 80005a6:	2322      	movs	r3, #34	; 0x22
 80005a8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  /*  - Enable Error warning Interrupt */
  /*  - Enable Error passive Interrupt */
  /*  - Enable Bus-off Interrupt */
  /*  - Enable Last error code Interrupt */
  /*  - Enable Error Interrupt */
  __HAL_CAN_ENABLE_IT(hcan, CAN_IT_EWG |
 80005ac:	6802      	ldr	r2, [r0, #0]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80005ae:	2300      	movs	r3, #0
 80005b0:	6403      	str	r3, [r0, #64]	; 0x40
  __HAL_CAN_ENABLE_IT(hcan, CAN_IT_EWG |
 80005b2:	6951      	ldr	r1, [r2, #20]
 80005b4:	f441 410f 	orr.w	r1, r1, #36608	; 0x8f00
 80005b8:	6151      	str	r1, [r2, #20]
  __HAL_UNLOCK(hcan);

  if(FIFONumber == CAN_FIFO0)
  {
    /* Enable FIFO 0 overrun and message pending Interrupt */
    __HAL_CAN_ENABLE_IT(hcan, CAN_IT_FOV0 | CAN_IT_FMP0);
 80005ba:	6951      	ldr	r1, [r2, #20]
  __HAL_UNLOCK(hcan);
 80005bc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    __HAL_CAN_ENABLE_IT(hcan, CAN_IT_FOV0 | CAN_IT_FMP0);
 80005c0:	f041 010a 	orr.w	r1, r1, #10
    /* Enable FIFO 1 overrun and message pending Interrupt */
    __HAL_CAN_ENABLE_IT(hcan, CAN_IT_FOV1 | CAN_IT_FMP1);
  }
  
  /* Return function status */
  return HAL_OK;
 80005c4:	4618      	mov	r0, r3
    __HAL_CAN_ENABLE_IT(hcan, CAN_IT_FOV0 | CAN_IT_FMP0);
 80005c6:	6151      	str	r1, [r2, #20]
}
 80005c8:	4770      	bx	lr
  if ((FIFONumber == CAN_FIFO1) && ((hcan->State == HAL_CAN_STATE_BUSY_RX1) ||        \
 80005ca:	2901      	cmp	r1, #1
 80005cc:	d01a      	beq.n	8000604 <HAL_CAN_Receive_IT+0xa0>
    switch(hcan->State)
 80005ce:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80005d2:	b2db      	uxtb	r3, r3
 80005d4:	2b22      	cmp	r3, #34	; 0x22
 80005d6:	d034      	beq.n	8000642 <HAL_CAN_Receive_IT+0xde>
 80005d8:	2b42      	cmp	r3, #66	; 0x42
 80005da:	d02e      	beq.n	800063a <HAL_CAN_Receive_IT+0xd6>
 80005dc:	2b12      	cmp	r3, #18
 80005de:	d028      	beq.n	8000632 <HAL_CAN_Receive_IT+0xce>
        hcan->State = HAL_CAN_STATE_BUSY_RX1;
 80005e0:	2332      	movs	r3, #50	; 0x32
 80005e2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_CAN_ENABLE_IT(hcan, CAN_IT_EWG |
 80005e6:	6802      	ldr	r2, [r0, #0]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80005e8:	2300      	movs	r3, #0
 80005ea:	6403      	str	r3, [r0, #64]	; 0x40
  __HAL_CAN_ENABLE_IT(hcan, CAN_IT_EWG |
 80005ec:	6951      	ldr	r1, [r2, #20]
 80005ee:	f441 410f 	orr.w	r1, r1, #36608	; 0x8f00
 80005f2:	6151      	str	r1, [r2, #20]
    __HAL_CAN_ENABLE_IT(hcan, CAN_IT_FOV1 | CAN_IT_FMP1);
 80005f4:	6951      	ldr	r1, [r2, #20]
  __HAL_UNLOCK(hcan);
 80005f6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    __HAL_CAN_ENABLE_IT(hcan, CAN_IT_FOV1 | CAN_IT_FMP1);
 80005fa:	f041 0150 	orr.w	r1, r1, #80	; 0x50
  return HAL_OK;
 80005fe:	4618      	mov	r0, r3
    __HAL_CAN_ENABLE_IT(hcan, CAN_IT_FOV1 | CAN_IT_FMP1);
 8000600:	6151      	str	r1, [r2, #20]
 8000602:	4770      	bx	lr
  if ((FIFONumber == CAN_FIFO1) && ((hcan->State == HAL_CAN_STATE_BUSY_RX1) ||        \
 8000604:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000608:	2b32      	cmp	r3, #50	; 0x32
 800060a:	d00b      	beq.n	8000624 <HAL_CAN_Receive_IT+0xc0>
                                    (hcan->State == HAL_CAN_STATE_BUSY_TX_RX1) ||      \
 800060c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
  if ((FIFONumber == CAN_FIFO1) && ((hcan->State == HAL_CAN_STATE_BUSY_RX1) ||        \
 8000610:	2b52      	cmp	r3, #82	; 0x52
 8000612:	d007      	beq.n	8000624 <HAL_CAN_Receive_IT+0xc0>
                                    (hcan->State == HAL_CAN_STATE_BUSY_RX0_RX1) ||     \
 8000614:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
                                    (hcan->State == HAL_CAN_STATE_BUSY_TX_RX1) ||      \
 8000618:	2b62      	cmp	r3, #98	; 0x62
 800061a:	d003      	beq.n	8000624 <HAL_CAN_Receive_IT+0xc0>
                                    (hcan->State == HAL_CAN_STATE_BUSY_TX_RX0_RX1)))
 800061c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
                                    (hcan->State == HAL_CAN_STATE_BUSY_RX0_RX1) ||     \
 8000620:	2b72      	cmp	r3, #114	; 0x72
 8000622:	d1d4      	bne.n	80005ce <HAL_CAN_Receive_IT+0x6a>
    __HAL_UNLOCK(hcan);
 8000624:	2300      	movs	r3, #0
 8000626:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    return HAL_BUSY;
 800062a:	2002      	movs	r0, #2
 800062c:	4770      	bx	lr
  __HAL_LOCK(hcan);
 800062e:	2002      	movs	r0, #2
 8000630:	4770      	bx	lr
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX1;
 8000632:	2352      	movs	r3, #82	; 0x52
 8000634:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
        break;
 8000638:	e7d5      	b.n	80005e6 <HAL_CAN_Receive_IT+0x82>
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX0_RX1;
 800063a:	2372      	movs	r3, #114	; 0x72
 800063c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
        break;
 8000640:	e7d1      	b.n	80005e6 <HAL_CAN_Receive_IT+0x82>
        hcan->State = HAL_CAN_STATE_BUSY_RX0_RX1;
 8000642:	2362      	movs	r3, #98	; 0x62
 8000644:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
        break;
 8000648:	e7cd      	b.n	80005e6 <HAL_CAN_Receive_IT+0x82>
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX0;
 800064a:	2342      	movs	r3, #66	; 0x42
 800064c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
        break;
 8000650:	e7ac      	b.n	80005ac <HAL_CAN_Receive_IT+0x48>
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX0_RX1;
 8000652:	2372      	movs	r3, #114	; 0x72
 8000654:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
        break;
 8000658:	e7a8      	b.n	80005ac <HAL_CAN_Receive_IT+0x48>
        hcan->State = HAL_CAN_STATE_BUSY_RX0_RX1;
 800065a:	2362      	movs	r3, #98	; 0x62
 800065c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
        break;
 8000660:	e7a4      	b.n	80005ac <HAL_CAN_Receive_IT+0x48>
 8000662:	bf00      	nop

08000664 <CAN_Receive_IT>:
  * @param  FIFONumber Specify the FIFO number    
  * @retval HAL status
  * @retval None
  */
static HAL_StatusTypeDef CAN_Receive_IT(CAN_HandleTypeDef* hcan, uint8_t FIFONumber)
{
 8000664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  {
    pRxMsg = hcan->pRx1Msg;
  }

  /* Get the Id */
  pRxMsg->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[FIFONumber].RIR;
 8000666:	6804      	ldr	r4, [r0, #0]
    pRxMsg = hcan->pRxMsg;
 8000668:	6b42      	ldr	r2, [r0, #52]	; 0x34
    pRxMsg = hcan->pRx1Msg;
 800066a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800066c:	eb04 1501 	add.w	r5, r4, r1, lsl #4
    pRxMsg = hcan->pRxMsg;
 8000670:	2900      	cmp	r1, #0
 8000672:	bf08      	it	eq
 8000674:	4613      	moveq	r3, r2
  pRxMsg->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[FIFONumber].RIR;
 8000676:	f8d5 21b0 	ldr.w	r2, [r5, #432]	; 0x1b0
 800067a:	f002 0204 	and.w	r2, r2, #4
 800067e:	609a      	str	r2, [r3, #8]
  if (pRxMsg->IDE == CAN_ID_STD)
 8000680:	2a00      	cmp	r2, #0
 8000682:	d161      	bne.n	8000748 <CAN_Receive_IT+0xe4>
  {
    pRxMsg->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[FIFONumber].RIR) >> CAN_TI0R_STID_Pos;
 8000684:	f8d5 21b0 	ldr.w	r2, [r5, #432]	; 0x1b0
 8000688:	0d52      	lsrs	r2, r2, #21
 800068a:	601a      	str	r2, [r3, #0]
  /* Get the FMI */
  pRxMsg->FMI = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[FIFONumber].RDTR) >> CAN_RDT0R_FMI_Pos;
  /* Get the FIFONumber */
  pRxMsg->FIFONumber = FIFONumber;
  /* Get the data field */
  pRxMsg->Data[0] = (CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR) >> CAN_RDL0R_DATA0_Pos;
 800068c:	eb04 1201 	add.w	r2, r4, r1, lsl #4
  pRxMsg->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[FIFONumber].RIR) >> CAN_RI0R_RTR_Pos;
 8000690:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
  pRxMsg->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[FIFONumber].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000694:	f8d5 61b4 	ldr.w	r6, [r5, #436]	; 0x1b4
  pRxMsg->FMI = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[FIFONumber].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000698:	f8d5 51b4 	ldr.w	r5, [r5, #436]	; 0x1b4
  pRxMsg->Data[0] = (CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR) >> CAN_RDL0R_DATA0_Pos;
 800069c:	f8d2 e1b8 	ldr.w	lr, [r2, #440]	; 0x1b8
 80006a0:	f883 e014 	strb.w	lr, [r3, #20]
  pRxMsg->Data[1] = (CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR) >> CAN_RDL0R_DATA1_Pos;
 80006a4:	f8d2 e1b8 	ldr.w	lr, [r2, #440]	; 0x1b8
  pRxMsg->FIFONumber = FIFONumber;
 80006a8:	6219      	str	r1, [r3, #32]
  pRxMsg->Data[1] = (CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR) >> CAN_RDL0R_DATA1_Pos;
 80006aa:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80006ae:	f883 e015 	strb.w	lr, [r3, #21]
  pRxMsg->Data[2] = (CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR) >> CAN_RDL0R_DATA2_Pos;
 80006b2:	f8d2 e1b8 	ldr.w	lr, [r2, #440]	; 0x1b8
 80006b6:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 80006ba:	f883 e016 	strb.w	lr, [r3, #22]
  pRxMsg->Data[3] = (CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR) >> CAN_RDL0R_DATA3_Pos;
 80006be:	f8d2 e1b8 	ldr.w	lr, [r2, #440]	; 0x1b8
 80006c2:	ea4f 6e1e 	mov.w	lr, lr, lsr #24
 80006c6:	f883 e017 	strb.w	lr, [r3, #23]
  pRxMsg->Data[4] = (CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[FIFONumber].RDHR) >> CAN_RDH0R_DATA4_Pos;
 80006ca:	f8d2 e1bc 	ldr.w	lr, [r2, #444]	; 0x1bc
 80006ce:	f883 e018 	strb.w	lr, [r3, #24]
  pRxMsg->Data[5] = (CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[FIFONumber].RDHR) >> CAN_RDH0R_DATA5_Pos;
 80006d2:	f8d2 e1bc 	ldr.w	lr, [r2, #444]	; 0x1bc
 80006d6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80006da:	f883 e019 	strb.w	lr, [r3, #25]
  pRxMsg->Data[6] = (CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[FIFONumber].RDHR) >> CAN_RDH0R_DATA6_Pos;
 80006de:	f8d2 e1bc 	ldr.w	lr, [r2, #444]	; 0x1bc
 80006e2:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 80006e6:	f883 e01a 	strb.w	lr, [r3, #26]
  pRxMsg->Data[7] = (CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[FIFONumber].RDHR) >> CAN_RDH0R_DATA7_Pos;
 80006ea:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
  pRxMsg->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[FIFONumber].RIR) >> CAN_RI0R_RTR_Pos;
 80006ee:	f3c7 0740 	ubfx	r7, r7, #1, #1
  pRxMsg->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[FIFONumber].RDTR) >> CAN_RDT0R_DLC_Pos;
 80006f2:	f006 060f 	and.w	r6, r6, #15
  pRxMsg->FMI = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[FIFONumber].RDTR) >> CAN_RDT0R_FMI_Pos;
 80006f6:	f3c5 2507 	ubfx	r5, r5, #8, #8
  pRxMsg->Data[7] = (CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[FIFONumber].RDHR) >> CAN_RDH0R_DATA7_Pos;
 80006fa:	0e12      	lsrs	r2, r2, #24
  pRxMsg->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[FIFONumber].RIR) >> CAN_RI0R_RTR_Pos;
 80006fc:	60df      	str	r7, [r3, #12]
  pRxMsg->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[FIFONumber].RDTR) >> CAN_RDT0R_DLC_Pos;
 80006fe:	611e      	str	r6, [r3, #16]
  pRxMsg->FMI = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[FIFONumber].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000700:	61dd      	str	r5, [r3, #28]
  pRxMsg->Data[7] = (CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[FIFONumber].RDHR) >> CAN_RDH0R_DATA7_Pos;
 8000702:	76da      	strb	r2, [r3, #27]

  /* Release the FIFO */
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
 8000704:	bb91      	cbnz	r1, 800076c <CAN_Receive_IT+0x108>
  {
    __HAL_CAN_FIFO_RELEASE(hcan, CAN_FIFO0);
 8000706:	68e3      	ldr	r3, [r4, #12]
 8000708:	f043 0320 	orr.w	r3, r3, #32
 800070c:	60e3      	str	r3, [r4, #12]
    
    /* Disable FIFO 0 overrun and message pending Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_FOV0 | CAN_IT_FMP0);
 800070e:	6963      	ldr	r3, [r4, #20]
 8000710:	f023 030a 	bic.w	r3, r3, #10
 8000714:	6163      	str	r3, [r4, #20]
    
    /* Disable FIFO 1 overrun and message pending Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_FOV1 | CAN_IT_FMP1);
  }
  
  if((hcan->State == HAL_CAN_STATE_BUSY_RX0) || (hcan->State == HAL_CAN_STATE_BUSY_RX1))
 8000716:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800071a:	2b22      	cmp	r3, #34	; 0x22
 800071c:	d032      	beq.n	8000784 <CAN_Receive_IT+0x120>
 800071e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000722:	2b32      	cmp	r3, #50	; 0x32
 8000724:	d02e      	beq.n	8000784 <CAN_Receive_IT+0x120>
  }

  /* Change CAN state */
  if (FIFONumber == CAN_FIFO0)
  {
    switch(hcan->State)
 8000726:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800072a:	b2db      	uxtb	r3, r3
  if (FIFONumber == CAN_FIFO0)
 800072c:	b989      	cbnz	r1, 8000752 <CAN_Receive_IT+0xee>
    switch(hcan->State)
 800072e:	2b62      	cmp	r3, #98	; 0x62
 8000730:	d035      	beq.n	800079e <CAN_Receive_IT+0x13a>
 8000732:	2b72      	cmp	r3, #114	; 0x72
 8000734:	d03a      	beq.n	80007ac <CAN_Receive_IT+0x148>
 8000736:	2b42      	cmp	r3, #66	; 0x42
 8000738:	d011      	beq.n	800075e <CAN_Receive_IT+0xfa>
        break;
      case(HAL_CAN_STATE_BUSY_TX_RX0_RX1):
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX0;
        break;
      default: /* HAL_CAN_STATE_BUSY_RX1 */
        hcan->State = HAL_CAN_STATE_READY;
 800073a:	2301      	movs	r3, #1
 800073c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
        break;
    }
  }

  /* Receive complete callback */ 
  HAL_CAN_RxCpltCallback(hcan);
 8000740:	f001 ffe8 	bl	8002714 <HAL_CAN_RxCpltCallback>

  /* Return function status */
  return HAL_OK;
}
 8000744:	2000      	movs	r0, #0
 8000746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pRxMsg->ExtId = (0xFFFFFFF8U & hcan->Instance->sFIFOMailBox[FIFONumber].RIR) >> CAN_RI0R_EXID_Pos;
 8000748:	f8d5 21b0 	ldr.w	r2, [r5, #432]	; 0x1b0
 800074c:	08d2      	lsrs	r2, r2, #3
 800074e:	605a      	str	r2, [r3, #4]
 8000750:	e79c      	b.n	800068c <CAN_Receive_IT+0x28>
    switch(hcan->State)
 8000752:	2b62      	cmp	r3, #98	; 0x62
 8000754:	d01c      	beq.n	8000790 <CAN_Receive_IT+0x12c>
 8000756:	2b72      	cmp	r3, #114	; 0x72
 8000758:	d02f      	beq.n	80007ba <CAN_Receive_IT+0x156>
 800075a:	2b52      	cmp	r3, #82	; 0x52
 800075c:	d1ed      	bne.n	800073a <CAN_Receive_IT+0xd6>
        hcan->State = HAL_CAN_STATE_BUSY_TX;
 800075e:	2312      	movs	r3, #18
 8000760:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  HAL_CAN_RxCpltCallback(hcan);
 8000764:	f001 ffd6 	bl	8002714 <HAL_CAN_RxCpltCallback>
}
 8000768:	2000      	movs	r0, #0
 800076a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_CAN_FIFO_RELEASE(hcan, CAN_FIFO1);
 800076c:	6923      	ldr	r3, [r4, #16]
 800076e:	f043 0320 	orr.w	r3, r3, #32
 8000772:	6123      	str	r3, [r4, #16]
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_FOV1 | CAN_IT_FMP1);
 8000774:	6963      	ldr	r3, [r4, #20]
 8000776:	f023 0350 	bic.w	r3, r3, #80	; 0x50
 800077a:	6163      	str	r3, [r4, #20]
  if((hcan->State == HAL_CAN_STATE_BUSY_RX0) || (hcan->State == HAL_CAN_STATE_BUSY_RX1))
 800077c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000780:	2b22      	cmp	r3, #34	; 0x22
 8000782:	d1cc      	bne.n	800071e <CAN_Receive_IT+0xba>
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_EWG |
 8000784:	6802      	ldr	r2, [r0, #0]
 8000786:	6953      	ldr	r3, [r2, #20]
 8000788:	f423 430f 	bic.w	r3, r3, #36608	; 0x8f00
 800078c:	6153      	str	r3, [r2, #20]
 800078e:	e7ca      	b.n	8000726 <CAN_Receive_IT+0xc2>
        hcan->State = HAL_CAN_STATE_BUSY_RX0;
 8000790:	2322      	movs	r3, #34	; 0x22
 8000792:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  HAL_CAN_RxCpltCallback(hcan);
 8000796:	f001 ffbd 	bl	8002714 <HAL_CAN_RxCpltCallback>
}
 800079a:	2000      	movs	r0, #0
 800079c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        hcan->State = HAL_CAN_STATE_BUSY_RX1;
 800079e:	2332      	movs	r3, #50	; 0x32
 80007a0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  HAL_CAN_RxCpltCallback(hcan);
 80007a4:	f001 ffb6 	bl	8002714 <HAL_CAN_RxCpltCallback>
}
 80007a8:	2000      	movs	r0, #0
 80007aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX1;
 80007ac:	2352      	movs	r3, #82	; 0x52
 80007ae:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  HAL_CAN_RxCpltCallback(hcan);
 80007b2:	f001 ffaf 	bl	8002714 <HAL_CAN_RxCpltCallback>
}
 80007b6:	2000      	movs	r0, #0
 80007b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX0;
 80007ba:	2342      	movs	r3, #66	; 0x42
 80007bc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  HAL_CAN_RxCpltCallback(hcan);
 80007c0:	f001 ffa8 	bl	8002714 <HAL_CAN_RxCpltCallback>
}
 80007c4:	2000      	movs	r0, #0
 80007c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080007c8 <HAL_CAN_ErrorCallback>:
{
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop

080007cc <HAL_CAN_IRQHandler>:
{
 80007cc:	b538      	push	{r3, r4, r5, lr}
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_FOV0))    &&
 80007ce:	6803      	ldr	r3, [r0, #0]
 80007d0:	68da      	ldr	r2, [r3, #12]
 80007d2:	f012 0210 	ands.w	r2, r2, #16
{
 80007d6:	4605      	mov	r5, r0
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_FOV0))    &&
 80007d8:	d003      	beq.n	80007e2 <HAL_CAN_IRQHandler+0x16>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FOV0)))
 80007da:	695a      	ldr	r2, [r3, #20]
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_FOV0))    &&
 80007dc:	f012 0208 	ands.w	r2, r2, #8
 80007e0:	d17a      	bne.n	80008d8 <HAL_CAN_IRQHandler+0x10c>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80007e2:	4614      	mov	r4, r2
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_FOV1))    &&
 80007e4:	691a      	ldr	r2, [r3, #16]
 80007e6:	06d2      	lsls	r2, r2, #27
 80007e8:	d502      	bpl.n	80007f0 <HAL_CAN_IRQHandler+0x24>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FOV1)))
 80007ea:	695a      	ldr	r2, [r3, #20]
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_FOV1))    &&
 80007ec:	0650      	lsls	r0, r2, #25
 80007ee:	d46e      	bmi.n	80008ce <HAL_CAN_IRQHandler+0x102>
  if(__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_TME))
 80007f0:	695a      	ldr	r2, [r3, #20]
 80007f2:	07d1      	lsls	r1, r2, #31
 80007f4:	d50c      	bpl.n	8000810 <HAL_CAN_IRQHandler+0x44>
    if((__HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_0)) ||
 80007f6:	6899      	ldr	r1, [r3, #8]
 80007f8:	4a73      	ldr	r2, [pc, #460]	; (80009c8 <HAL_CAN_IRQHandler+0x1fc>)
 80007fa:	438a      	bics	r2, r1
 80007fc:	f000 8081 	beq.w	8000902 <HAL_CAN_IRQHandler+0x136>
       (__HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_1)) ||
 8000800:	6899      	ldr	r1, [r3, #8]
 8000802:	4a72      	ldr	r2, [pc, #456]	; (80009cc <HAL_CAN_IRQHandler+0x200>)
    if((__HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_0)) ||
 8000804:	438a      	bics	r2, r1
 8000806:	d07c      	beq.n	8000902 <HAL_CAN_IRQHandler+0x136>
       (__HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_2)))
 8000808:	6899      	ldr	r1, [r3, #8]
 800080a:	4a71      	ldr	r2, [pc, #452]	; (80009d0 <HAL_CAN_IRQHandler+0x204>)
       (__HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_1)) ||
 800080c:	438a      	bics	r2, r1
 800080e:	d078      	beq.n	8000902 <HAL_CAN_IRQHandler+0x136>
  if((__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FMP0)) &&
 8000810:	695a      	ldr	r2, [r3, #20]
 8000812:	0792      	lsls	r2, r2, #30
 8000814:	d503      	bpl.n	800081e <HAL_CAN_IRQHandler+0x52>
     (__HAL_CAN_MSG_PENDING(hcan, CAN_FIFO0) != 0U))
 8000816:	68da      	ldr	r2, [r3, #12]
  if((__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FMP0)) &&
 8000818:	0790      	lsls	r0, r2, #30
 800081a:	f040 809b 	bne.w	8000954 <HAL_CAN_IRQHandler+0x188>
  if((__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FMP1)) &&
 800081e:	695a      	ldr	r2, [r3, #20]
 8000820:	06d1      	lsls	r1, r2, #27
 8000822:	d503      	bpl.n	800082c <HAL_CAN_IRQHandler+0x60>
     (__HAL_CAN_MSG_PENDING(hcan, CAN_FIFO1) != 0U))
 8000824:	691a      	ldr	r2, [r3, #16]
  if((__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FMP1)) &&
 8000826:	0792      	lsls	r2, r2, #30
 8000828:	f040 809a 	bne.w	8000960 <HAL_CAN_IRQHandler+0x194>
  hcan->ErrorCode |= errorcode;
 800082c:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 800082e:	4322      	orrs	r2, r4
 8000830:	642a      	str	r2, [r5, #64]	; 0x40
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EWG))    &&
 8000832:	699a      	ldr	r2, [r3, #24]
 8000834:	07d0      	lsls	r0, r2, #31
 8000836:	d502      	bpl.n	800083e <HAL_CAN_IRQHandler+0x72>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EWG)) &&
 8000838:	695a      	ldr	r2, [r3, #20]
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EWG))    &&
 800083a:	05d1      	lsls	r1, r2, #23
 800083c:	d459      	bmi.n	80008f2 <HAL_CAN_IRQHandler+0x126>
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EPV))    &&
 800083e:	699a      	ldr	r2, [r3, #24]
 8000840:	0794      	lsls	r4, r2, #30
 8000842:	d502      	bpl.n	800084a <HAL_CAN_IRQHandler+0x7e>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EPV)) &&
 8000844:	695a      	ldr	r2, [r3, #20]
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EPV))    &&
 8000846:	0590      	lsls	r0, r2, #22
 8000848:	d44b      	bmi.n	80008e2 <HAL_CAN_IRQHandler+0x116>
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_BOF))    &&
 800084a:	699a      	ldr	r2, [r3, #24]
 800084c:	0752      	lsls	r2, r2, #29
 800084e:	d502      	bpl.n	8000856 <HAL_CAN_IRQHandler+0x8a>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_BOF)) &&
 8000850:	695a      	ldr	r2, [r3, #20]
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_BOF))    &&
 8000852:	0554      	lsls	r4, r2, #21
 8000854:	d433      	bmi.n	80008be <HAL_CAN_IRQHandler+0xf2>
  if((!HAL_IS_BIT_CLR(hcan->Instance->ESR, CAN_ESR_LEC)) &&
 8000856:	699a      	ldr	r2, [r3, #24]
 8000858:	f012 0f70 	tst.w	r2, #112	; 0x70
 800085c:	d002      	beq.n	8000864 <HAL_CAN_IRQHandler+0x98>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_LEC))         &&
 800085e:	695a      	ldr	r2, [r3, #20]
  if((!HAL_IS_BIT_CLR(hcan->Instance->ESR, CAN_ESR_LEC)) &&
 8000860:	0511      	lsls	r1, r2, #20
 8000862:	d412      	bmi.n	800088a <HAL_CAN_IRQHandler+0xbe>
  if(hcan->ErrorCode != HAL_CAN_ERROR_NONE)
 8000864:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8000866:	b17a      	cbz	r2, 8000888 <HAL_CAN_IRQHandler+0xbc>
    SET_BIT(hcan->Instance->MSR, CAN_MSR_ERRI);
 8000868:	685a      	ldr	r2, [r3, #4]
    hcan->State = HAL_CAN_STATE_READY;
 800086a:	2101      	movs	r1, #1
    SET_BIT(hcan->Instance->MSR, CAN_MSR_ERRI);
 800086c:	f042 0204 	orr.w	r2, r2, #4
 8000870:	605a      	str	r2, [r3, #4]
    hcan->State = HAL_CAN_STATE_READY;
 8000872:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_EWG |
 8000876:	695a      	ldr	r2, [r3, #20]
 8000878:	f422 420f 	bic.w	r2, r2, #36608	; 0x8f00
 800087c:	f022 025b 	bic.w	r2, r2, #91	; 0x5b
    HAL_CAN_ErrorCallback(hcan);
 8000880:	4628      	mov	r0, r5
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_EWG |
 8000882:	615a      	str	r2, [r3, #20]
    HAL_CAN_ErrorCallback(hcan);
 8000884:	f7ff ffa0 	bl	80007c8 <HAL_CAN_ErrorCallback>
 8000888:	bd38      	pop	{r3, r4, r5, pc}
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR)))
 800088a:	695a      	ldr	r2, [r3, #20]
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_LEC))         &&
 800088c:	0412      	lsls	r2, r2, #16
 800088e:	d5e9      	bpl.n	8000864 <HAL_CAN_IRQHandler+0x98>
    switch(hcan->Instance->ESR & CAN_ESR_LEC)
 8000890:	699a      	ldr	r2, [r3, #24]
 8000892:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8000896:	2a30      	cmp	r2, #48	; 0x30
 8000898:	f000 808c 	beq.w	80009b4 <HAL_CAN_IRQHandler+0x1e8>
 800089c:	d97c      	bls.n	8000998 <HAL_CAN_IRQHandler+0x1cc>
 800089e:	2a50      	cmp	r2, #80	; 0x50
 80008a0:	d075      	beq.n	800098e <HAL_CAN_IRQHandler+0x1c2>
 80008a2:	2a60      	cmp	r2, #96	; 0x60
 80008a4:	f000 8081 	beq.w	80009aa <HAL_CAN_IRQHandler+0x1de>
 80008a8:	2a40      	cmp	r2, #64	; 0x40
 80008aa:	d103      	bne.n	80008b4 <HAL_CAN_IRQHandler+0xe8>
          hcan->ErrorCode |= HAL_CAN_ERROR_BR;
 80008ac:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80008ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80008b2:	642a      	str	r2, [r5, #64]	; 0x40
    CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80008b4:	699a      	ldr	r2, [r3, #24]
 80008b6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80008ba:	619a      	str	r2, [r3, #24]
 80008bc:	e7d2      	b.n	8000864 <HAL_CAN_IRQHandler+0x98>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR)))
 80008be:	695a      	ldr	r2, [r3, #20]
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_BOF)) &&
 80008c0:	0410      	lsls	r0, r2, #16
 80008c2:	d5c8      	bpl.n	8000856 <HAL_CAN_IRQHandler+0x8a>
    hcan->ErrorCode |= HAL_CAN_ERROR_BOF;
 80008c4:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80008c6:	f042 0204 	orr.w	r2, r2, #4
 80008ca:	642a      	str	r2, [r5, #64]	; 0x40
 80008cc:	e7c3      	b.n	8000856 <HAL_CAN_IRQHandler+0x8a>
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80008ce:	2210      	movs	r2, #16
    errorcode |= HAL_CAN_ERROR_FOV1;
 80008d0:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80008d4:	611a      	str	r2, [r3, #16]
 80008d6:	e78b      	b.n	80007f0 <HAL_CAN_IRQHandler+0x24>
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80008d8:	2210      	movs	r2, #16
 80008da:	60da      	str	r2, [r3, #12]
    errorcode |= HAL_CAN_ERROR_FOV0;
 80008dc:	f44f 7400 	mov.w	r4, #512	; 0x200
 80008e0:	e780      	b.n	80007e4 <HAL_CAN_IRQHandler+0x18>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR)))
 80008e2:	695a      	ldr	r2, [r3, #20]
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EPV)) &&
 80008e4:	0411      	lsls	r1, r2, #16
 80008e6:	d5b0      	bpl.n	800084a <HAL_CAN_IRQHandler+0x7e>
    hcan->ErrorCode |= HAL_CAN_ERROR_EPV;
 80008e8:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80008ea:	f042 0202 	orr.w	r2, r2, #2
 80008ee:	642a      	str	r2, [r5, #64]	; 0x40
 80008f0:	e7ab      	b.n	800084a <HAL_CAN_IRQHandler+0x7e>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR)))
 80008f2:	695a      	ldr	r2, [r3, #20]
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EWG)) &&
 80008f4:	0412      	lsls	r2, r2, #16
 80008f6:	d5a2      	bpl.n	800083e <HAL_CAN_IRQHandler+0x72>
    hcan->ErrorCode |= HAL_CAN_ERROR_EWG;
 80008f8:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80008fa:	f042 0201 	orr.w	r2, r2, #1
 80008fe:	642a      	str	r2, [r5, #64]	; 0x40
 8000900:	e79d      	b.n	800083e <HAL_CAN_IRQHandler+0x72>
      if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_TXOK0)) ||
 8000902:	689a      	ldr	r2, [r3, #8]
 8000904:	0792      	lsls	r2, r2, #30
 8000906:	d408      	bmi.n	800091a <HAL_CAN_IRQHandler+0x14e>
         (__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_TXOK1)) ||
 8000908:	689a      	ldr	r2, [r3, #8]
      if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_TXOK0)) ||
 800090a:	0590      	lsls	r0, r2, #22
 800090c:	d405      	bmi.n	800091a <HAL_CAN_IRQHandler+0x14e>
         (__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_TXOK2)))
 800090e:	689a      	ldr	r2, [r3, #8]
         (__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_TXOK1)) ||
 8000910:	0391      	lsls	r1, r2, #14
 8000912:	d402      	bmi.n	800091a <HAL_CAN_IRQHandler+0x14e>
        errorcode |= HAL_CAN_ERROR_TXFAIL;
 8000914:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 8000918:	e017      	b.n	800094a <HAL_CAN_IRQHandler+0x17e>
  __HAL_CAN_DISABLE_IT(hcan, CAN_IT_TME);
 800091a:	695a      	ldr	r2, [r3, #20]
 800091c:	f022 0201 	bic.w	r2, r2, #1
 8000920:	615a      	str	r2, [r3, #20]
  if(hcan->State == HAL_CAN_STATE_BUSY_TX)
 8000922:	f895 203d 	ldrb.w	r2, [r5, #61]	; 0x3d
 8000926:	2a12      	cmp	r2, #18
 8000928:	d020      	beq.n	800096c <HAL_CAN_IRQHandler+0x1a0>
  switch(hcan->State)
 800092a:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
 800092e:	b2db      	uxtb	r3, r3
 8000930:	2b52      	cmp	r3, #82	; 0x52
 8000932:	d020      	beq.n	8000976 <HAL_CAN_IRQHandler+0x1aa>
 8000934:	2b72      	cmp	r3, #114	; 0x72
 8000936:	d026      	beq.n	8000986 <HAL_CAN_IRQHandler+0x1ba>
 8000938:	2b42      	cmp	r3, #66	; 0x42
 800093a:	d020      	beq.n	800097e <HAL_CAN_IRQHandler+0x1b2>
      hcan->State = HAL_CAN_STATE_READY;
 800093c:	2301      	movs	r3, #1
 800093e:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  HAL_CAN_TxCpltCallback(hcan);
 8000942:	4628      	mov	r0, r5
 8000944:	f001 fed2 	bl	80026ec <HAL_CAN_TxCpltCallback>
 8000948:	682b      	ldr	r3, [r5, #0]
      SET_BIT(hcan->Instance->TSR, CAN_TSR_RQCP0  | CAN_TSR_RQCP1  | CAN_TSR_RQCP2 | \
 800094a:	6899      	ldr	r1, [r3, #8]
 800094c:	4a21      	ldr	r2, [pc, #132]	; (80009d4 <HAL_CAN_IRQHandler+0x208>)
 800094e:	430a      	orrs	r2, r1
 8000950:	609a      	str	r2, [r3, #8]
 8000952:	e75d      	b.n	8000810 <HAL_CAN_IRQHandler+0x44>
    CAN_Receive_IT(hcan, CAN_FIFO0);
 8000954:	2100      	movs	r1, #0
 8000956:	4628      	mov	r0, r5
 8000958:	f7ff fe84 	bl	8000664 <CAN_Receive_IT>
 800095c:	682b      	ldr	r3, [r5, #0]
 800095e:	e75e      	b.n	800081e <HAL_CAN_IRQHandler+0x52>
    CAN_Receive_IT(hcan, CAN_FIFO1);
 8000960:	2101      	movs	r1, #1
 8000962:	4628      	mov	r0, r5
 8000964:	f7ff fe7e 	bl	8000664 <CAN_Receive_IT>
 8000968:	682b      	ldr	r3, [r5, #0]
 800096a:	e75f      	b.n	800082c <HAL_CAN_IRQHandler+0x60>
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_EWG |
 800096c:	695a      	ldr	r2, [r3, #20]
 800096e:	f422 420f 	bic.w	r2, r2, #36608	; 0x8f00
 8000972:	615a      	str	r2, [r3, #20]
 8000974:	e7d9      	b.n	800092a <HAL_CAN_IRQHandler+0x15e>
      hcan->State = HAL_CAN_STATE_BUSY_RX1;
 8000976:	2332      	movs	r3, #50	; 0x32
 8000978:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
 800097c:	e7e1      	b.n	8000942 <HAL_CAN_IRQHandler+0x176>
      hcan->State = HAL_CAN_STATE_BUSY_RX0;
 800097e:	2322      	movs	r3, #34	; 0x22
 8000980:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
 8000984:	e7dd      	b.n	8000942 <HAL_CAN_IRQHandler+0x176>
      hcan->State = HAL_CAN_STATE_BUSY_RX0_RX1;
 8000986:	2362      	movs	r3, #98	; 0x62
 8000988:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
 800098c:	e7d9      	b.n	8000942 <HAL_CAN_IRQHandler+0x176>
          hcan->ErrorCode |= HAL_CAN_ERROR_BD;
 800098e:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8000990:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000994:	642a      	str	r2, [r5, #64]	; 0x40
          break;
 8000996:	e78d      	b.n	80008b4 <HAL_CAN_IRQHandler+0xe8>
    switch(hcan->Instance->ESR & CAN_ESR_LEC)
 8000998:	2a10      	cmp	r2, #16
 800099a:	d010      	beq.n	80009be <HAL_CAN_IRQHandler+0x1f2>
 800099c:	2a20      	cmp	r2, #32
 800099e:	d189      	bne.n	80008b4 <HAL_CAN_IRQHandler+0xe8>
          hcan->ErrorCode |= HAL_CAN_ERROR_FOR;
 80009a0:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80009a2:	f042 0210 	orr.w	r2, r2, #16
 80009a6:	642a      	str	r2, [r5, #64]	; 0x40
          break;
 80009a8:	e784      	b.n	80008b4 <HAL_CAN_IRQHandler+0xe8>
          hcan->ErrorCode |= HAL_CAN_ERROR_CRC;
 80009aa:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80009ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80009b0:	642a      	str	r2, [r5, #64]	; 0x40
          break;
 80009b2:	e77f      	b.n	80008b4 <HAL_CAN_IRQHandler+0xe8>
          hcan->ErrorCode |= HAL_CAN_ERROR_ACK;
 80009b4:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80009b6:	f042 0220 	orr.w	r2, r2, #32
 80009ba:	642a      	str	r2, [r5, #64]	; 0x40
          break;
 80009bc:	e77a      	b.n	80008b4 <HAL_CAN_IRQHandler+0xe8>
          hcan->ErrorCode |= HAL_CAN_ERROR_STF;
 80009be:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80009c0:	f042 0208 	orr.w	r2, r2, #8
 80009c4:	642a      	str	r2, [r5, #64]	; 0x40
          break;
 80009c6:	e775      	b.n	80008b4 <HAL_CAN_IRQHandler+0xe8>
 80009c8:	04000001 	.word	0x04000001
 80009cc:	08000100 	.word	0x08000100
 80009d0:	10010000 	.word	0x10010000
 80009d4:	00010519 	.word	0x00010519

080009d8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009d8:	4a07      	ldr	r2, [pc, #28]	; (80009f8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80009da:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009dc:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 80009e0:	400b      	ands	r3, r1
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80009e2:	0200      	lsls	r0, r0, #8
 80009e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009e8:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 80009ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80009f0:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80009f2:	60d3      	str	r3, [r2, #12]
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	e000ed00 	.word	0xe000ed00

080009fc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009fc:	4b18      	ldr	r3, [pc, #96]	; (8000a60 <HAL_NVIC_SetPriority+0x64>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009fe:	b470      	push	{r4, r5, r6}
 8000a00:	68dc      	ldr	r4, [r3, #12]
 8000a02:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a06:	f1c4 0607 	rsb	r6, r4, #7
 8000a0a:	2e04      	cmp	r6, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a0c:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a10:	bf28      	it	cs
 8000a12:	2604      	movcs	r6, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a14:	2b06      	cmp	r3, #6
 8000a16:	d917      	bls.n	8000a48 <HAL_NVIC_SetPriority+0x4c>
 8000a18:	3c03      	subs	r4, #3
 8000a1a:	2501      	movs	r5, #1
 8000a1c:	40a5      	lsls	r5, r4
 8000a1e:	3d01      	subs	r5, #1
 8000a20:	402a      	ands	r2, r5

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a22:	2301      	movs	r3, #1
 8000a24:	40b3      	lsls	r3, r6
 8000a26:	3b01      	subs	r3, #1
 8000a28:	4019      	ands	r1, r3
 8000a2a:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) < 0)
 8000a2c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a2e:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) < 0)
 8000a32:	db0c      	blt.n	8000a4e <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a34:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000a38:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000a3c:	0109      	lsls	r1, r1, #4
 8000a3e:	b2c9      	uxtb	r1, r1
 8000a40:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000a44:	bc70      	pop	{r4, r5, r6}
 8000a46:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a48:	2200      	movs	r2, #0
 8000a4a:	4614      	mov	r4, r2
 8000a4c:	e7e9      	b.n	8000a22 <HAL_NVIC_SetPriority+0x26>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a4e:	4b05      	ldr	r3, [pc, #20]	; (8000a64 <HAL_NVIC_SetPriority+0x68>)
 8000a50:	f000 000f 	and.w	r0, r0, #15
 8000a54:	0109      	lsls	r1, r1, #4
 8000a56:	4403      	add	r3, r0
 8000a58:	b2c9      	uxtb	r1, r1
 8000a5a:	7619      	strb	r1, [r3, #24]
 8000a5c:	bc70      	pop	{r4, r5, r6}
 8000a5e:	4770      	bx	lr
 8000a60:	e000ed00 	.word	0xe000ed00
 8000a64:	e000ecfc 	.word	0xe000ecfc

08000a68 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000a68:	f000 011f 	and.w	r1, r0, #31
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	0940      	lsrs	r0, r0, #5
 8000a70:	4a02      	ldr	r2, [pc, #8]	; (8000a7c <HAL_NVIC_EnableIRQ+0x14>)
 8000a72:	408b      	lsls	r3, r1
 8000a74:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	e000e100 	.word	0xe000e100

08000a80 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a80:	3801      	subs	r0, #1
 8000a82:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a86:	d20e      	bcs.n	8000aa6 <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a88:	4b08      	ldr	r3, [pc, #32]	; (8000aac <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a8a:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a8c:	4c08      	ldr	r4, [pc, #32]	; (8000ab0 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a8e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a90:	20f0      	movs	r0, #240	; 0xf0
 8000a92:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a96:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a98:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a9a:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a9e:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 8000aa0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000aa4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000aa6:	2001      	movs	r0, #1
   return SysTick_Config(TicksNumb);
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	e000e010 	.word	0xe000e010
 8000ab0:	e000ed00 	.word	0xe000ed00

08000ab4 <HAL_SYSTICK_CLKSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000ab4:	4a04      	ldr	r2, [pc, #16]	; (8000ac8 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8000ab6:	6813      	ldr	r3, [r2, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000ab8:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000aba:	bf0c      	ite	eq
 8000abc:	f043 0304 	orreq.w	r3, r3, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000ac0:	f023 0304 	bicne.w	r3, r3, #4
 8000ac4:	6013      	str	r3, [r2, #0]
 8000ac6:	4770      	bx	lr
 8000ac8:	e000e010 	.word	0xe000e010

08000acc <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop

08000ad0 <HAL_SYSTICK_IRQHandler>:
{
 8000ad0:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000ad2:	f7ff fffb 	bl	8000acc <HAL_SYSTICK_Callback>
 8000ad6:	bd08      	pop	{r3, pc}

08000ad8 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000ad8:	2800      	cmp	r0, #0
 8000ada:	d038      	beq.n	8000b4e <HAL_DMA_Init+0x76>
 8000adc:	4603      	mov	r3, r0
{ 
 8000ade:	b4f0      	push	{r4, r5, r6, r7}
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000ae0:	6842      	ldr	r2, [r0, #4]
 8000ae2:	6887      	ldr	r7, [r0, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ae4:	68c0      	ldr	r0, [r0, #12]
 8000ae6:	6919      	ldr	r1, [r3, #16]
  tmp = hdma->Instance->CCR;
 8000ae8:	681e      	ldr	r6, [r3, #0]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000aea:	695d      	ldr	r5, [r3, #20]
 8000aec:	699c      	ldr	r4, [r3, #24]
  tmp |=  hdma->Init.Direction        |
 8000aee:	433a      	orrs	r2, r7
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000af0:	4302      	orrs	r2, r0
 8000af2:	430a      	orrs	r2, r1
  tmp = hdma->Instance->CCR;
 8000af4:	6831      	ldr	r1, [r6, #0]
          hdma->Init.Mode                | hdma->Init.Priority;
 8000af6:	69d8      	ldr	r0, [r3, #28]
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000af8:	4f16      	ldr	r7, [pc, #88]	; (8000b54 <HAL_DMA_Init+0x7c>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000afa:	432a      	orrs	r2, r5
 8000afc:	4322      	orrs	r2, r4
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000afe:	f421 517f 	bic.w	r1, r1, #16320	; 0x3fc0
 8000b02:	f021 0130 	bic.w	r1, r1, #48	; 0x30
          hdma->Init.Mode                | hdma->Init.Priority;
 8000b06:	4302      	orrs	r2, r0
  tmp |=  hdma->Init.Direction        |
 8000b08:	430a      	orrs	r2, r1
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000b0a:	42be      	cmp	r6, r7
  hdma->State = HAL_DMA_STATE_BUSY;
 8000b0c:	f04f 0102 	mov.w	r1, #2
 8000b10:	f883 1021 	strb.w	r1, [r3, #33]	; 0x21
  hdma->Instance->CCR = tmp;  
 8000b14:	6032      	str	r2, [r6, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000b16:	d916      	bls.n	8000b46 <HAL_DMA_Init+0x6e>
    hdma->DmaBaseAddress = DMA1;
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000b18:	4a0f      	ldr	r2, [pc, #60]	; (8000b58 <HAL_DMA_Init+0x80>)
 8000b1a:	4910      	ldr	r1, [pc, #64]	; (8000b5c <HAL_DMA_Init+0x84>)
    hdma->DmaBaseAddress = DMA2;
 8000b1c:	4810      	ldr	r0, [pc, #64]	; (8000b60 <HAL_DMA_Init+0x88>)
 8000b1e:	63d8      	str	r0, [r3, #60]	; 0x3c
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000b20:	4432      	add	r2, r6
 8000b22:	fba1 1202 	umull	r1, r2, r1, r2
 8000b26:	0912      	lsrs	r2, r2, #4
 8000b28:	0092      	lsls	r2, r2, #2
  hdma->XferCpltCallback = NULL;
 8000b2a:	2000      	movs	r0, #0
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000b2c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_READY;
 8000b2e:	2201      	movs	r2, #1
  hdma->XferCpltCallback = NULL;
 8000b30:	6298      	str	r0, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8000b32:	62d8      	str	r0, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8000b34:	6318      	str	r0, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8000b36:	6358      	str	r0, [r3, #52]	; 0x34
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b38:	6398      	str	r0, [r3, #56]	; 0x38
  hdma->Lock = HAL_UNLOCKED;
 8000b3a:	f883 0020 	strb.w	r0, [r3, #32]
  hdma->State = HAL_DMA_STATE_READY;
 8000b3e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}  
 8000b42:	bcf0      	pop	{r4, r5, r6, r7}
 8000b44:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000b46:	4a07      	ldr	r2, [pc, #28]	; (8000b64 <HAL_DMA_Init+0x8c>)
 8000b48:	4904      	ldr	r1, [pc, #16]	; (8000b5c <HAL_DMA_Init+0x84>)
    hdma->DmaBaseAddress = DMA1;
 8000b4a:	4807      	ldr	r0, [pc, #28]	; (8000b68 <HAL_DMA_Init+0x90>)
 8000b4c:	e7e7      	b.n	8000b1e <HAL_DMA_Init+0x46>
    return HAL_ERROR;
 8000b4e:	2001      	movs	r0, #1
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	40020407 	.word	0x40020407
 8000b58:	bffdfbf8 	.word	0xbffdfbf8
 8000b5c:	cccccccd 	.word	0xcccccccd
 8000b60:	40020400 	.word	0x40020400
 8000b64:	bffdfff8 	.word	0xbffdfff8
 8000b68:	40020000 	.word	0x40020000

08000b6c <HAL_DMA_Start_IT>:
{
 8000b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 8000b6e:	f890 4020 	ldrb.w	r4, [r0, #32]
 8000b72:	2c01      	cmp	r4, #1
 8000b74:	d00b      	beq.n	8000b8e <HAL_DMA_Start_IT+0x22>
  if(HAL_DMA_STATE_READY == hdma->State)
 8000b76:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8000b7a:	2501      	movs	r5, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8000b7c:	42ac      	cmp	r4, r5
  __HAL_LOCK(hdma);
 8000b7e:	f880 5020 	strb.w	r5, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8000b82:	d006      	beq.n	8000b92 <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma); 
 8000b84:	2300      	movs	r3, #0
 8000b86:	f880 3020 	strb.w	r3, [r0, #32]
    status = HAL_BUSY;
 8000b8a:	2002      	movs	r0, #2
 8000b8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(hdma);
 8000b8e:	2002      	movs	r0, #2
} 
 8000b90:	bdf0      	pop	{r4, r5, r6, r7, pc}
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000b92:	6805      	ldr	r5, [r0, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000b94:	6c07      	ldr	r7, [r0, #64]	; 0x40
 8000b96:	f8d0 e03c 	ldr.w	lr, [r0, #60]	; 0x3c
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b9a:	2600      	movs	r6, #0
 8000b9c:	6386      	str	r6, [r0, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000b9e:	682e      	ldr	r6, [r5, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000ba0:	40bc      	lsls	r4, r7
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000ba2:	f026 0601 	bic.w	r6, r6, #1
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000ba6:	6847      	ldr	r7, [r0, #4]
  	hdma->State = HAL_DMA_STATE_BUSY;
 8000ba8:	f04f 0c02 	mov.w	ip, #2
 8000bac:	f880 c021 	strb.w	ip, [r0, #33]	; 0x21
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000bb0:	602e      	str	r6, [r5, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000bb2:	f8ce 4004 	str.w	r4, [lr, #4]
  hdma->Instance->CNDTR = DataLength;
 8000bb6:	606b      	str	r3, [r5, #4]
    if(NULL != hdma->XferHalfCpltCallback )
 8000bb8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000bba:	2f10      	cmp	r7, #16
    hdma->Instance->CPAR = DstAddress;
 8000bbc:	bf0b      	itete	eq
 8000bbe:	60aa      	streq	r2, [r5, #8]
    hdma->Instance->CPAR = SrcAddress;
 8000bc0:	60a9      	strne	r1, [r5, #8]
    hdma->Instance->CMAR = SrcAddress;
 8000bc2:	60e9      	streq	r1, [r5, #12]
    hdma->Instance->CMAR = DstAddress;
 8000bc4:	60ea      	strne	r2, [r5, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8000bc6:	b14b      	cbz	r3, 8000bdc <HAL_DMA_Start_IT+0x70>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000bc8:	682b      	ldr	r3, [r5, #0]
 8000bca:	f043 030e 	orr.w	r3, r3, #14
 8000bce:	602b      	str	r3, [r5, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8000bd0:	682b      	ldr	r3, [r5, #0]
 8000bd2:	f043 0301 	orr.w	r3, r3, #1
 8000bd6:	602b      	str	r3, [r5, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8000bd8:	2000      	movs	r0, #0
 8000bda:	bdf0      	pop	{r4, r5, r6, r7, pc}
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000bdc:	682b      	ldr	r3, [r5, #0]
 8000bde:	f043 030a 	orr.w	r3, r3, #10
 8000be2:	602b      	str	r3, [r5, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000be4:	682b      	ldr	r3, [r5, #0]
 8000be6:	f023 0304 	bic.w	r3, r3, #4
 8000bea:	602b      	str	r3, [r5, #0]
 8000bec:	e7f0      	b.n	8000bd0 <HAL_DMA_Start_IT+0x64>
 8000bee:	bf00      	nop

08000bf0 <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000bf0:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
 8000bf4:	2a02      	cmp	r2, #2
{  
 8000bf6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000bf8:	d003      	beq.n	8000c02 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bfa:	2204      	movs	r2, #4
 8000bfc:	6382      	str	r2, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8000bfe:	2001      	movs	r0, #1
 8000c00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000c02:	6802      	ldr	r2, [r0, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000c04:	6c01      	ldr	r1, [r0, #64]	; 0x40
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000c06:	6814      	ldr	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000c08:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
    if(hdma->XferAbortCallback != NULL)
 8000c0a:	6b46      	ldr	r6, [r0, #52]	; 0x34
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000c0c:	f024 040e 	bic.w	r4, r4, #14
 8000c10:	6014      	str	r4, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000c12:	6814      	ldr	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000c14:	2501      	movs	r5, #1
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000c16:	f024 0401 	bic.w	r4, r4, #1
 8000c1a:	6014      	str	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000c1c:	fa05 f101 	lsl.w	r1, r5, r1
    __HAL_UNLOCK(hdma);
 8000c20:	2400      	movs	r4, #0
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000c22:	6079      	str	r1, [r7, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8000c24:	f880 5021 	strb.w	r5, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8000c28:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8000c2c:	b116      	cbz	r6, 8000c34 <HAL_DMA_Abort_IT+0x44>
      hdma->XferAbortCallback(hdma);
 8000c2e:	47b0      	blx	r6
  HAL_StatusTypeDef status = HAL_OK;
 8000c30:	4620      	mov	r0, r4
 8000c32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c34:	4630      	mov	r0, r6
}
 8000c36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000c38 <HAL_DMA_IRQHandler>:
{
 8000c38:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000c3a:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000c3c:	6c02      	ldr	r2, [r0, #64]	; 0x40
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000c3e:	6829      	ldr	r1, [r5, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8000c40:	6804      	ldr	r4, [r0, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000c42:	2304      	movs	r3, #4
 8000c44:	4093      	lsls	r3, r2
 8000c46:	4219      	tst	r1, r3
  uint32_t source_it = hdma->Instance->CCR;
 8000c48:	6826      	ldr	r6, [r4, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000c4a:	d00d      	beq.n	8000c68 <HAL_DMA_IRQHandler+0x30>
 8000c4c:	0777      	lsls	r7, r6, #29
 8000c4e:	d50b      	bpl.n	8000c68 <HAL_DMA_IRQHandler+0x30>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000c50:	6822      	ldr	r2, [r4, #0]
 8000c52:	0692      	lsls	r2, r2, #26
 8000c54:	d403      	bmi.n	8000c5e <HAL_DMA_IRQHandler+0x26>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000c56:	6822      	ldr	r2, [r4, #0]
 8000c58:	f022 0204 	bic.w	r2, r2, #4
 8000c5c:	6022      	str	r2, [r4, #0]
  	if(hdma->XferHalfCpltCallback != NULL)
 8000c5e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000c60:	606b      	str	r3, [r5, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 8000c62:	b1c2      	cbz	r2, 8000c96 <HAL_DMA_IRQHandler+0x5e>
}  
 8000c64:	bcf0      	pop	{r4, r5, r6, r7}
  		hdma->XferCpltCallback(hdma);
 8000c66:	4710      	bx	r2
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000c68:	2302      	movs	r3, #2
 8000c6a:	4093      	lsls	r3, r2
 8000c6c:	4219      	tst	r1, r3
 8000c6e:	d014      	beq.n	8000c9a <HAL_DMA_IRQHandler+0x62>
 8000c70:	07b7      	lsls	r7, r6, #30
 8000c72:	d512      	bpl.n	8000c9a <HAL_DMA_IRQHandler+0x62>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000c74:	6822      	ldr	r2, [r4, #0]
 8000c76:	0692      	lsls	r2, r2, #26
 8000c78:	d406      	bmi.n	8000c88 <HAL_DMA_IRQHandler+0x50>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000c7a:	6822      	ldr	r2, [r4, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 8000c7c:	2101      	movs	r1, #1
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000c7e:	f022 020a 	bic.w	r2, r2, #10
 8000c82:	6022      	str	r2, [r4, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 8000c84:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
  	if(hdma->XferCpltCallback != NULL)
 8000c88:	6a82      	ldr	r2, [r0, #40]	; 0x28
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000c8a:	606b      	str	r3, [r5, #4]
  	__HAL_UNLOCK(hdma);
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	f880 3020 	strb.w	r3, [r0, #32]
  	if(hdma->XferCpltCallback != NULL)
 8000c92:	2a00      	cmp	r2, #0
 8000c94:	d1e6      	bne.n	8000c64 <HAL_DMA_IRQHandler+0x2c>
}  
 8000c96:	bcf0      	pop	{r4, r5, r6, r7}
 8000c98:	4770      	bx	lr
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000c9a:	2308      	movs	r3, #8
 8000c9c:	4093      	lsls	r3, r2
 8000c9e:	420b      	tst	r3, r1
 8000ca0:	d0f9      	beq.n	8000c96 <HAL_DMA_IRQHandler+0x5e>
 8000ca2:	0733      	lsls	r3, r6, #28
 8000ca4:	d5f7      	bpl.n	8000c96 <HAL_DMA_IRQHandler+0x5e>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000ca6:	6821      	ldr	r1, [r4, #0]
    if(hdma->XferErrorCallback != NULL)
 8000ca8:	6b06      	ldr	r6, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000caa:	2301      	movs	r3, #1
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000cac:	f021 010e 	bic.w	r1, r1, #14
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000cb0:	fa03 f202 	lsl.w	r2, r3, r2
    __HAL_UNLOCK(hdma); 
 8000cb4:	2700      	movs	r7, #0
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000cb6:	6021      	str	r1, [r4, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000cb8:	606a      	str	r2, [r5, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000cba:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 8000cbc:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma); 
 8000cc0:	f880 7020 	strb.w	r7, [r0, #32]
    if(hdma->XferErrorCallback != NULL)
 8000cc4:	2e00      	cmp	r6, #0
 8000cc6:	d0e6      	beq.n	8000c96 <HAL_DMA_IRQHandler+0x5e>
    	hdma->XferErrorCallback(hdma);
 8000cc8:	4633      	mov	r3, r6
}  
 8000cca:	bcf0      	pop	{r4, r5, r6, r7}
    	hdma->XferErrorCallback(hdma);
 8000ccc:	4718      	bx	r3
 8000cce:	bf00      	nop

08000cd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cd0:	468c      	mov	ip, r1
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000cd2:	6809      	ldr	r1, [r1, #0]
 8000cd4:	2900      	cmp	r1, #0
 8000cd6:	f000 80f2 	beq.w	8000ebe <HAL_GPIO_Init+0x1ee>
{
 8000cda:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000cde:	f8df e1fc 	ldr.w	lr, [pc, #508]	; 8000edc <HAL_GPIO_Init+0x20c>
{
 8000ce2:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000ce4:	2500      	movs	r5, #0
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000ce6:	f04f 0801 	mov.w	r8, #1
 8000cea:	e083      	b.n	8000df4 <HAL_GPIO_Init+0x124>
 8000cec:	ea4f 0945 	mov.w	r9, r5, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000cf0:	2303      	movs	r3, #3
      temp = GPIOx->MODER;
 8000cf2:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000cf6:	fa03 f309 	lsl.w	r3, r3, r9
 8000cfa:	43db      	mvns	r3, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000cfc:	f004 0603 	and.w	r6, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d00:	ea0b 0b03 	and.w	fp, fp, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d04:	fa06 f609 	lsl.w	r6, r6, r9
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d08:	f10a 3aff 	add.w	sl, sl, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d0c:	ea46 060b 	orr.w	r6, r6, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d10:	f1ba 0f01 	cmp.w	sl, #1
      GPIOx->MODER = temp;
 8000d14:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d16:	f240 80a2 	bls.w	8000e5e <HAL_GPIO_Init+0x18e>
      temp = GPIOx->PUPDR;
 8000d1a:	68c6      	ldr	r6, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d1c:	f8dc 2008 	ldr.w	r2, [ip, #8]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d20:	4033      	ands	r3, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d22:	fa02 f209 	lsl.w	r2, r2, r9
 8000d26:	431a      	orrs	r2, r3
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d28:	00e3      	lsls	r3, r4, #3
      GPIOx->PUPDR = temp;
 8000d2a:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d2c:	d55e      	bpl.n	8000dec <HAL_GPIO_Init+0x11c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d2e:	4b64      	ldr	r3, [pc, #400]	; (8000ec0 <HAL_GPIO_Init+0x1f0>)
 8000d30:	4a63      	ldr	r2, [pc, #396]	; (8000ec0 <HAL_GPIO_Init+0x1f0>)
 8000d32:	699b      	ldr	r3, [r3, #24]
 8000d34:	f043 0301 	orr.w	r3, r3, #1
 8000d38:	6193      	str	r3, [r2, #24]
 8000d3a:	6993      	ldr	r3, [r2, #24]
 8000d3c:	f025 0603 	bic.w	r6, r5, #3
 8000d40:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8000d44:	f003 0301 	and.w	r3, r3, #1
 8000d48:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 8000d4c:	9301      	str	r3, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000d4e:	f005 0303 	and.w	r3, r5, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d52:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8000d54:	f8d6 9008 	ldr.w	r9, [r6, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000d58:	009b      	lsls	r3, r3, #2
 8000d5a:	220f      	movs	r2, #15
 8000d5c:	409a      	lsls	r2, r3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000d5e:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000d62:	ea29 0a02 	bic.w	sl, r9, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000d66:	f000 8091 	beq.w	8000e8c <HAL_GPIO_Init+0x1bc>
 8000d6a:	4a56      	ldr	r2, [pc, #344]	; (8000ec4 <HAL_GPIO_Init+0x1f4>)
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	f000 808f 	beq.w	8000e90 <HAL_GPIO_Init+0x1c0>
 8000d72:	4a55      	ldr	r2, [pc, #340]	; (8000ec8 <HAL_GPIO_Init+0x1f8>)
 8000d74:	4290      	cmp	r0, r2
 8000d76:	f000 808e 	beq.w	8000e96 <HAL_GPIO_Init+0x1c6>
 8000d7a:	4a54      	ldr	r2, [pc, #336]	; (8000ecc <HAL_GPIO_Init+0x1fc>)
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f000 808f 	beq.w	8000ea0 <HAL_GPIO_Init+0x1d0>
 8000d82:	4a53      	ldr	r2, [pc, #332]	; (8000ed0 <HAL_GPIO_Init+0x200>)
 8000d84:	4290      	cmp	r0, r2
 8000d86:	f000 8090 	beq.w	8000eaa <HAL_GPIO_Init+0x1da>
 8000d8a:	4a52      	ldr	r2, [pc, #328]	; (8000ed4 <HAL_GPIO_Init+0x204>)
 8000d8c:	4290      	cmp	r0, r2
 8000d8e:	f000 8091 	beq.w	8000eb4 <HAL_GPIO_Init+0x1e4>
 8000d92:	4a51      	ldr	r2, [pc, #324]	; (8000ed8 <HAL_GPIO_Init+0x208>)
 8000d94:	4290      	cmp	r0, r2
 8000d96:	bf0c      	ite	eq
 8000d98:	f04f 0906 	moveq.w	r9, #6
 8000d9c:	f04f 0907 	movne.w	r9, #7
 8000da0:	fa09 f303 	lsl.w	r3, r9, r3
 8000da4:	ea43 030a 	orr.w	r3, r3, sl
        SYSCFG->EXTICR[position >> 2] = temp;
 8000da8:	60b3      	str	r3, [r6, #8]
        temp = EXTI->IMR;
 8000daa:	f8de 3000 	ldr.w	r3, [lr]
        temp &= ~((uint32_t)iocurrent);
 8000dae:	43fa      	mvns	r2, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000db0:	03e6      	lsls	r6, r4, #15
        temp &= ~((uint32_t)iocurrent);
 8000db2:	bf54      	ite	pl
 8000db4:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8000db6:	433b      	orrmi	r3, r7
        }
        EXTI->IMR = temp;
 8000db8:	f8ce 3000 	str.w	r3, [lr]

        temp = EXTI->EMR;
 8000dbc:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000dc0:	03a6      	lsls	r6, r4, #14
        temp &= ~((uint32_t)iocurrent);
 8000dc2:	bf54      	ite	pl
 8000dc4:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8000dc6:	433b      	orrmi	r3, r7
        }
        EXTI->EMR = temp;
 8000dc8:	f8ce 3004 	str.w	r3, [lr, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000dcc:	f8de 3008 	ldr.w	r3, [lr, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000dd0:	02e6      	lsls	r6, r4, #11
        temp &= ~((uint32_t)iocurrent);
 8000dd2:	bf54      	ite	pl
 8000dd4:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8000dd6:	433b      	orrmi	r3, r7
        }
        EXTI->RTSR = temp;
 8000dd8:	f8ce 3008 	str.w	r3, [lr, #8]

        temp = EXTI->FTSR;
 8000ddc:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000de0:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000de2:	bf54      	ite	pl
 8000de4:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8000de6:	433b      	orrmi	r3, r7
        }
        EXTI->FTSR = temp;
 8000de8:	f8ce 300c 	str.w	r3, [lr, #12]
      }
    }
    
    position++;
 8000dec:	3501      	adds	r5, #1
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000dee:	fa31 f305 	lsrs.w	r3, r1, r5
 8000df2:	d048      	beq.n	8000e86 <HAL_GPIO_Init+0x1b6>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000df4:	fa08 f205 	lsl.w	r2, r8, r5
    if(iocurrent)
 8000df8:	ea12 0701 	ands.w	r7, r2, r1
 8000dfc:	d0f6      	beq.n	8000dec <HAL_GPIO_Init+0x11c>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dfe:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000e02:	f024 0a10 	bic.w	sl, r4, #16
 8000e06:	f1ba 0f02 	cmp.w	sl, #2
 8000e0a:	f47f af6f 	bne.w	8000cec <HAL_GPIO_Init+0x1c>
        temp = GPIOx->AFR[position >> 3];
 8000e0e:	ea4f 09d5 	mov.w	r9, r5, lsr #3
 8000e12:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e16:	f005 0307 	and.w	r3, r5, #7
        temp = GPIOx->AFR[position >> 3];
 8000e1a:	f8d9 6020 	ldr.w	r6, [r9, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e1e:	009b      	lsls	r3, r3, #2
 8000e20:	f04f 0b0f 	mov.w	fp, #15
 8000e24:	fa0b fb03 	lsl.w	fp, fp, r3
 8000e28:	ea26 0a0b 	bic.w	sl, r6, fp
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e2c:	f8dc 6010 	ldr.w	r6, [ip, #16]
 8000e30:	fa06 f303 	lsl.w	r3, r6, r3
 8000e34:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->AFR[position >> 3] = temp;
 8000e38:	f8c9 3020 	str.w	r3, [r9, #32]
 8000e3c:	ea4f 0945 	mov.w	r9, r5, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e40:	2303      	movs	r3, #3
      temp = GPIOx->MODER;
 8000e42:	f8d0 a000 	ldr.w	sl, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e46:	fa03 f309 	lsl.w	r3, r3, r9
 8000e4a:	43db      	mvns	r3, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e4c:	f004 0603 	and.w	r6, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e50:	ea03 0a0a 	and.w	sl, r3, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e54:	fa06 f609 	lsl.w	r6, r6, r9
 8000e58:	ea46 060a 	orr.w	r6, r6, sl
      GPIOx->MODER = temp;
 8000e5c:	6006      	str	r6, [r0, #0]
        temp = GPIOx->OSPEEDR;
 8000e5e:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e60:	ea06 0a03 	and.w	sl, r6, r3
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e64:	f8dc 600c 	ldr.w	r6, [ip, #12]
 8000e68:	fa06 f609 	lsl.w	r6, r6, r9
 8000e6c:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OSPEEDR = temp;
 8000e70:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000e72:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e76:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e7a:	ea2a 0202 	bic.w	r2, sl, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e7e:	40ae      	lsls	r6, r5
 8000e80:	4316      	orrs	r6, r2
        GPIOx->OTYPER = temp;
 8000e82:	6046      	str	r6, [r0, #4]
 8000e84:	e749      	b.n	8000d1a <HAL_GPIO_Init+0x4a>
  }
}
 8000e86:	b003      	add	sp, #12
 8000e88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	e789      	b.n	8000da4 <HAL_GPIO_Init+0xd4>
 8000e90:	fa08 f303 	lsl.w	r3, r8, r3
 8000e94:	e786      	b.n	8000da4 <HAL_GPIO_Init+0xd4>
 8000e96:	f04f 0902 	mov.w	r9, #2
 8000e9a:	fa09 f303 	lsl.w	r3, r9, r3
 8000e9e:	e781      	b.n	8000da4 <HAL_GPIO_Init+0xd4>
 8000ea0:	f04f 0903 	mov.w	r9, #3
 8000ea4:	fa09 f303 	lsl.w	r3, r9, r3
 8000ea8:	e77c      	b.n	8000da4 <HAL_GPIO_Init+0xd4>
 8000eaa:	f04f 0904 	mov.w	r9, #4
 8000eae:	fa09 f303 	lsl.w	r3, r9, r3
 8000eb2:	e777      	b.n	8000da4 <HAL_GPIO_Init+0xd4>
 8000eb4:	f04f 0905 	mov.w	r9, #5
 8000eb8:	fa09 f303 	lsl.w	r3, r9, r3
 8000ebc:	e772      	b.n	8000da4 <HAL_GPIO_Init+0xd4>
 8000ebe:	4770      	bx	lr
 8000ec0:	40021000 	.word	0x40021000
 8000ec4:	48000400 	.word	0x48000400
 8000ec8:	48000800 	.word	0x48000800
 8000ecc:	48000c00 	.word	0x48000c00
 8000ed0:	48001000 	.word	0x48001000
 8000ed4:	48001400 	.word	0x48001400
 8000ed8:	48001800 	.word	0x48001800
 8000edc:	40010400 	.word	0x40010400

08000ee0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ee0:	b90a      	cbnz	r2, 8000ee6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ee2:	6281      	str	r1, [r0, #40]	; 0x28
 8000ee4:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ee6:	6181      	str	r1, [r0, #24]
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000eec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ef0:	6803      	ldr	r3, [r0, #0]
 8000ef2:	07df      	lsls	r7, r3, #31
{
 8000ef4:	b083      	sub	sp, #12
 8000ef6:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ef8:	d53d      	bpl.n	8000f76 <HAL_RCC_OscConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000efa:	49bb      	ldr	r1, [pc, #748]	; (80011e8 <HAL_RCC_OscConfig+0x2fc>)
 8000efc:	684a      	ldr	r2, [r1, #4]
 8000efe:	f002 020c 	and.w	r2, r2, #12
 8000f02:	2a04      	cmp	r2, #4
 8000f04:	f000 817d 	beq.w	8001202 <HAL_RCC_OscConfig+0x316>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f08:	684a      	ldr	r2, [r1, #4]
 8000f0a:	f002 020c 	and.w	r2, r2, #12
 8000f0e:	2a08      	cmp	r2, #8
 8000f10:	f000 8170 	beq.w	80011f4 <HAL_RCC_OscConfig+0x308>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f14:	6863      	ldr	r3, [r4, #4]
 8000f16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f1a:	f000 8213 	beq.w	8001344 <HAL_RCC_OscConfig+0x458>
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	f000 8192 	beq.w	8001248 <HAL_RCC_OscConfig+0x35c>
 8000f24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f28:	f000 8299 	beq.w	800145e <HAL_RCC_OscConfig+0x572>
 8000f2c:	4bae      	ldr	r3, [pc, #696]	; (80011e8 <HAL_RCC_OscConfig+0x2fc>)
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000f3c:	601a      	str	r2, [r3, #0]

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f3e:	f7ff f979 	bl	8000234 <HAL_GetTick>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f42:	f44f 3800 	mov.w	r8, #131072	; 0x20000
 8000f46:	4607      	mov	r7, r0
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f48:	4ea7      	ldr	r6, [pc, #668]	; (80011e8 <HAL_RCC_OscConfig+0x2fc>)
 8000f4a:	2501      	movs	r5, #1
 8000f4c:	e005      	b.n	8000f5a <HAL_RCC_OscConfig+0x6e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f4e:	f7ff f971 	bl	8000234 <HAL_GetTick>
 8000f52:	1bc0      	subs	r0, r0, r7
 8000f54:	2864      	cmp	r0, #100	; 0x64
 8000f56:	f200 81bb 	bhi.w	80012d0 <HAL_RCC_OscConfig+0x3e4>
 8000f5a:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f5e:	6832      	ldr	r2, [r6, #0]
 8000f60:	fa98 f3a8 	rbit	r3, r8
 8000f64:	fab3 f383 	clz	r3, r3
 8000f68:	f003 031f 	and.w	r3, r3, #31
 8000f6c:	fa05 f303 	lsl.w	r3, r5, r3
 8000f70:	4213      	tst	r3, r2
 8000f72:	d0ec      	beq.n	8000f4e <HAL_RCC_OscConfig+0x62>
 8000f74:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f76:	079e      	lsls	r6, r3, #30
 8000f78:	d542      	bpl.n	8001000 <HAL_RCC_OscConfig+0x114>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000f7a:	4a9b      	ldr	r2, [pc, #620]	; (80011e8 <HAL_RCC_OscConfig+0x2fc>)
 8000f7c:	6851      	ldr	r1, [r2, #4]
 8000f7e:	f011 0f0c 	tst.w	r1, #12
 8000f82:	f000 80f1 	beq.w	8001168 <HAL_RCC_OscConfig+0x27c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000f86:	6851      	ldr	r1, [r2, #4]
 8000f88:	f001 010c 	and.w	r1, r1, #12
 8000f8c:	2908      	cmp	r1, #8
 8000f8e:	f000 80e4 	beq.w	800115a <HAL_RCC_OscConfig+0x26e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f92:	68e2      	ldr	r2, [r4, #12]
 8000f94:	2a00      	cmp	r2, #0
 8000f96:	f000 81db 	beq.w	8001350 <HAL_RCC_OscConfig+0x464>
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	fa92 f3a2 	rbit	r3, r2
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fa0:	fab3 f383 	clz	r3, r3
 8000fa4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000fa8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000fac:	009b      	lsls	r3, r3, #2
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fae:	4616      	mov	r6, r2
        __HAL_RCC_HSI_ENABLE();
 8000fb0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000fb2:	f7ff f93f 	bl	8000234 <HAL_GetTick>
 8000fb6:	f04f 0802 	mov.w	r8, #2
 8000fba:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fbc:	4d8a      	ldr	r5, [pc, #552]	; (80011e8 <HAL_RCC_OscConfig+0x2fc>)
 8000fbe:	e005      	b.n	8000fcc <HAL_RCC_OscConfig+0xe0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fc0:	f7ff f938 	bl	8000234 <HAL_GetTick>
 8000fc4:	1bc0      	subs	r0, r0, r7
 8000fc6:	2802      	cmp	r0, #2
 8000fc8:	f200 8182 	bhi.w	80012d0 <HAL_RCC_OscConfig+0x3e4>
 8000fcc:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fd0:	682a      	ldr	r2, [r5, #0]
 8000fd2:	fa98 f3a8 	rbit	r3, r8
 8000fd6:	fab3 f383 	clz	r3, r3
 8000fda:	f003 031f 	and.w	r3, r3, #31
 8000fde:	fa06 f303 	lsl.w	r3, r6, r3
 8000fe2:	4213      	tst	r3, r2
 8000fe4:	d0ec      	beq.n	8000fc0 <HAL_RCC_OscConfig+0xd4>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fe6:	6829      	ldr	r1, [r5, #0]
 8000fe8:	22f8      	movs	r2, #248	; 0xf8
 8000fea:	fa92 f2a2 	rbit	r2, r2
 8000fee:	6923      	ldr	r3, [r4, #16]
 8000ff0:	fab2 f282 	clz	r2, r2
 8000ff4:	f021 01f8 	bic.w	r1, r1, #248	; 0xf8
 8000ff8:	4093      	lsls	r3, r2
 8000ffa:	430b      	orrs	r3, r1
 8000ffc:	602b      	str	r3, [r5, #0]
 8000ffe:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001000:	071d      	lsls	r5, r3, #28
 8001002:	d446      	bmi.n	8001092 <HAL_RCC_OscConfig+0x1a6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001004:	0758      	lsls	r0, r3, #29
 8001006:	d572      	bpl.n	80010ee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001008:	4b77      	ldr	r3, [pc, #476]	; (80011e8 <HAL_RCC_OscConfig+0x2fc>)
 800100a:	69da      	ldr	r2, [r3, #28]
 800100c:	00d1      	lsls	r1, r2, #3
 800100e:	f140 810f 	bpl.w	8001230 <HAL_RCC_OscConfig+0x344>
    FlagStatus       pwrclkchanged = RESET;
 8001012:	f04f 0800 	mov.w	r8, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001016:	4d75      	ldr	r5, [pc, #468]	; (80011ec <HAL_RCC_OscConfig+0x300>)
 8001018:	682b      	ldr	r3, [r5, #0]
 800101a:	05da      	lsls	r2, r3, #23
 800101c:	f140 8148 	bpl.w	80012b0 <HAL_RCC_OscConfig+0x3c4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001020:	68a3      	ldr	r3, [r4, #8]
 8001022:	2b01      	cmp	r3, #1
 8001024:	f000 81ba 	beq.w	800139c <HAL_RCC_OscConfig+0x4b0>
 8001028:	2b00      	cmp	r3, #0
 800102a:	f000 815f 	beq.w	80012ec <HAL_RCC_OscConfig+0x400>
 800102e:	2b05      	cmp	r3, #5
 8001030:	4b6d      	ldr	r3, [pc, #436]	; (80011e8 <HAL_RCC_OscConfig+0x2fc>)
 8001032:	6a1a      	ldr	r2, [r3, #32]
 8001034:	f000 8220 	beq.w	8001478 <HAL_RCC_OscConfig+0x58c>
 8001038:	f022 0201 	bic.w	r2, r2, #1
 800103c:	621a      	str	r2, [r3, #32]
 800103e:	6a1a      	ldr	r2, [r3, #32]
 8001040:	f022 0204 	bic.w	r2, r2, #4
 8001044:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001046:	f7ff f8f5 	bl	8000234 <HAL_GetTick>
 800104a:	f04f 0902 	mov.w	r9, #2
 800104e:	4607      	mov	r7, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001050:	4e65      	ldr	r6, [pc, #404]	; (80011e8 <HAL_RCC_OscConfig+0x2fc>)
 8001052:	2501      	movs	r5, #1
 8001054:	e015      	b.n	8001082 <HAL_RCC_OscConfig+0x196>
 8001056:	fa99 f3a9 	rbit	r3, r9
 800105a:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800105c:	fa99 f3a9 	rbit	r3, r9
 8001060:	fab3 f383 	clz	r3, r3
 8001064:	f003 031f 	and.w	r3, r3, #31
 8001068:	fa05 f303 	lsl.w	r3, r5, r3
 800106c:	4213      	tst	r3, r2
 800106e:	f040 8133 	bne.w	80012d8 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001072:	f7ff f8df 	bl	8000234 <HAL_GetTick>
 8001076:	f241 3388 	movw	r3, #5000	; 0x1388
 800107a:	1bc0      	subs	r0, r0, r7
 800107c:	4298      	cmp	r0, r3
 800107e:	f200 8127 	bhi.w	80012d0 <HAL_RCC_OscConfig+0x3e4>
 8001082:	fa99 f3a9 	rbit	r3, r9
 8001086:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800108a:	2b00      	cmp	r3, #0
 800108c:	d0e3      	beq.n	8001056 <HAL_RCC_OscConfig+0x16a>
 800108e:	6a32      	ldr	r2, [r6, #32]
 8001090:	e7e4      	b.n	800105c <HAL_RCC_OscConfig+0x170>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001092:	6962      	ldr	r2, [r4, #20]
 8001094:	2a00      	cmp	r2, #0
 8001096:	d07f      	beq.n	8001198 <HAL_RCC_OscConfig+0x2ac>
 8001098:	2201      	movs	r2, #1
 800109a:	fa92 f1a2 	rbit	r1, r2
      __HAL_RCC_LSI_ENABLE();
 800109e:	4b54      	ldr	r3, [pc, #336]	; (80011f0 <HAL_RCC_OscConfig+0x304>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010a0:	4e51      	ldr	r6, [pc, #324]	; (80011e8 <HAL_RCC_OscConfig+0x2fc>)
      __HAL_RCC_LSI_ENABLE();
 80010a2:	fab1 f181 	clz	r1, r1
 80010a6:	440b      	add	r3, r1
 80010a8:	009b      	lsls	r3, r3, #2
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010aa:	4615      	mov	r5, r2
      __HAL_RCC_LSI_ENABLE();
 80010ac:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80010ae:	f7ff f8c1 	bl	8000234 <HAL_GetTick>
 80010b2:	f04f 0802 	mov.w	r8, #2
 80010b6:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010b8:	e005      	b.n	80010c6 <HAL_RCC_OscConfig+0x1da>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010ba:	f7ff f8bb 	bl	8000234 <HAL_GetTick>
 80010be:	1bc0      	subs	r0, r0, r7
 80010c0:	2802      	cmp	r0, #2
 80010c2:	f200 8105 	bhi.w	80012d0 <HAL_RCC_OscConfig+0x3e4>
 80010c6:	fa98 f3a8 	rbit	r3, r8
 80010ca:	fa98 f3a8 	rbit	r3, r8
 80010ce:	fa98 f3a8 	rbit	r3, r8
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010d2:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80010d4:	fa98 f3a8 	rbit	r3, r8
 80010d8:	fab3 f383 	clz	r3, r3
 80010dc:	f003 031f 	and.w	r3, r3, #31
 80010e0:	fa05 f303 	lsl.w	r3, r5, r3
 80010e4:	4213      	tst	r3, r2
 80010e6:	d0e8      	beq.n	80010ba <HAL_RCC_OscConfig+0x1ce>
 80010e8:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010ea:	0758      	lsls	r0, r3, #29
 80010ec:	d48c      	bmi.n	8001008 <HAL_RCC_OscConfig+0x11c>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010ee:	69a3      	ldr	r3, [r4, #24]
 80010f0:	b37b      	cbz	r3, 8001152 <HAL_RCC_OscConfig+0x266>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010f2:	4d3d      	ldr	r5, [pc, #244]	; (80011e8 <HAL_RCC_OscConfig+0x2fc>)
 80010f4:	686a      	ldr	r2, [r5, #4]
 80010f6:	f002 020c 	and.w	r2, r2, #12
 80010fa:	2a08      	cmp	r2, #8
 80010fc:	d048      	beq.n	8001190 <HAL_RCC_OscConfig+0x2a4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010fe:	2b02      	cmp	r3, #2
 8001100:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001104:	f000 8150 	beq.w	80013a8 <HAL_RCC_OscConfig+0x4bc>
 8001108:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800110c:	fab3 f383 	clz	r3, r3
 8001110:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001114:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800111e:	f7ff f889 	bl	8000234 <HAL_GetTick>
 8001122:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8001126:	4607      	mov	r7, r0
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001128:	2601      	movs	r6, #1
 800112a:	e005      	b.n	8001138 <HAL_RCC_OscConfig+0x24c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800112c:	f7ff f882 	bl	8000234 <HAL_GetTick>
 8001130:	1bc0      	subs	r0, r0, r7
 8001132:	2802      	cmp	r0, #2
 8001134:	f200 80cc 	bhi.w	80012d0 <HAL_RCC_OscConfig+0x3e4>
 8001138:	fa94 f3a4 	rbit	r3, r4
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800113c:	682a      	ldr	r2, [r5, #0]
 800113e:	fa94 f3a4 	rbit	r3, r4
 8001142:	fab3 f383 	clz	r3, r3
 8001146:	f003 031f 	and.w	r3, r3, #31
 800114a:	fa06 f303 	lsl.w	r3, r6, r3
 800114e:	4213      	tst	r3, r2
 8001150:	d1ec      	bne.n	800112c <HAL_RCC_OscConfig+0x240>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8001152:	2000      	movs	r0, #0
}
 8001154:	b003      	add	sp, #12
 8001156:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800115a:	6852      	ldr	r2, [r2, #4]
 800115c:	f402 32c0 	and.w	r2, r2, #98304	; 0x18000
 8001160:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001164:	f47f af15 	bne.w	8000f92 <HAL_RCC_OscConfig+0xa6>
 8001168:	2202      	movs	r2, #2
 800116a:	fa92 f1a2 	rbit	r1, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800116e:	491e      	ldr	r1, [pc, #120]	; (80011e8 <HAL_RCC_OscConfig+0x2fc>)
 8001170:	6808      	ldr	r0, [r1, #0]
 8001172:	fa92 f2a2 	rbit	r2, r2
 8001176:	fab2 f282 	clz	r2, r2
 800117a:	f002 021f 	and.w	r2, r2, #31
 800117e:	2101      	movs	r1, #1
 8001180:	fa01 f202 	lsl.w	r2, r1, r2
 8001184:	4202      	tst	r2, r0
 8001186:	f000 8082 	beq.w	800128e <HAL_RCC_OscConfig+0x3a2>
 800118a:	68e2      	ldr	r2, [r4, #12]
 800118c:	428a      	cmp	r2, r1
 800118e:	d07e      	beq.n	800128e <HAL_RCC_OscConfig+0x3a2>
        return HAL_ERROR;
 8001190:	2001      	movs	r0, #1
}
 8001192:	b003      	add	sp, #12
 8001194:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001198:	2501      	movs	r5, #1
 800119a:	fa95 f1a5 	rbit	r1, r5
      __HAL_RCC_LSI_DISABLE();
 800119e:	4b14      	ldr	r3, [pc, #80]	; (80011f0 <HAL_RCC_OscConfig+0x304>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011a0:	4e11      	ldr	r6, [pc, #68]	; (80011e8 <HAL_RCC_OscConfig+0x2fc>)
      __HAL_RCC_LSI_DISABLE();
 80011a2:	fab1 f181 	clz	r1, r1
 80011a6:	440b      	add	r3, r1
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	f04f 0802 	mov.w	r8, #2
 80011ae:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80011b0:	f7ff f840 	bl	8000234 <HAL_GetTick>
 80011b4:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011b6:	e005      	b.n	80011c4 <HAL_RCC_OscConfig+0x2d8>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011b8:	f7ff f83c 	bl	8000234 <HAL_GetTick>
 80011bc:	1bc0      	subs	r0, r0, r7
 80011be:	2802      	cmp	r0, #2
 80011c0:	f200 8086 	bhi.w	80012d0 <HAL_RCC_OscConfig+0x3e4>
 80011c4:	fa98 f3a8 	rbit	r3, r8
 80011c8:	fa98 f3a8 	rbit	r3, r8
 80011cc:	fa98 f3a8 	rbit	r3, r8
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011d0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80011d2:	fa98 f3a8 	rbit	r3, r8
 80011d6:	fab3 f383 	clz	r3, r3
 80011da:	f003 031f 	and.w	r3, r3, #31
 80011de:	fa05 f303 	lsl.w	r3, r5, r3
 80011e2:	4213      	tst	r3, r2
 80011e4:	d1e8      	bne.n	80011b8 <HAL_RCC_OscConfig+0x2cc>
 80011e6:	e77f      	b.n	80010e8 <HAL_RCC_OscConfig+0x1fc>
 80011e8:	40021000 	.word	0x40021000
 80011ec:	40007000 	.word	0x40007000
 80011f0:	10908120 	.word	0x10908120
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011f4:	684a      	ldr	r2, [r1, #4]
 80011f6:	f402 32c0 	and.w	r2, r2, #98304	; 0x18000
 80011fa:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80011fe:	f47f ae89 	bne.w	8000f14 <HAL_RCC_OscConfig+0x28>
 8001202:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001206:	fa92 f1a2 	rbit	r1, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800120a:	499f      	ldr	r1, [pc, #636]	; (8001488 <HAL_RCC_OscConfig+0x59c>)
 800120c:	6808      	ldr	r0, [r1, #0]
 800120e:	fa92 f2a2 	rbit	r2, r2
 8001212:	fab2 f282 	clz	r2, r2
 8001216:	f002 021f 	and.w	r2, r2, #31
 800121a:	2101      	movs	r1, #1
 800121c:	fa01 f202 	lsl.w	r2, r1, r2
 8001220:	4202      	tst	r2, r0
 8001222:	f43f aea8 	beq.w	8000f76 <HAL_RCC_OscConfig+0x8a>
 8001226:	6862      	ldr	r2, [r4, #4]
 8001228:	2a00      	cmp	r2, #0
 800122a:	f47f aea4 	bne.w	8000f76 <HAL_RCC_OscConfig+0x8a>
 800122e:	e7af      	b.n	8001190 <HAL_RCC_OscConfig+0x2a4>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001230:	69da      	ldr	r2, [r3, #28]
 8001232:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001236:	61da      	str	r2, [r3, #28]
 8001238:	69db      	ldr	r3, [r3, #28]
 800123a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800123e:	9301      	str	r3, [sp, #4]
 8001240:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001242:	f04f 0801 	mov.w	r8, #1
 8001246:	e6e6      	b.n	8001016 <HAL_RCC_OscConfig+0x12a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001248:	4d8f      	ldr	r5, [pc, #572]	; (8001488 <HAL_RCC_OscConfig+0x59c>)
 800124a:	682b      	ldr	r3, [r5, #0]
 800124c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001250:	602b      	str	r3, [r5, #0]
 8001252:	682b      	ldr	r3, [r5, #0]
 8001254:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001258:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800125a:	f7fe ffeb 	bl	8000234 <HAL_GetTick>
 800125e:	f44f 3800 	mov.w	r8, #131072	; 0x20000
 8001262:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001264:	2601      	movs	r6, #1
 8001266:	e004      	b.n	8001272 <HAL_RCC_OscConfig+0x386>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001268:	f7fe ffe4 	bl	8000234 <HAL_GetTick>
 800126c:	1bc0      	subs	r0, r0, r7
 800126e:	2864      	cmp	r0, #100	; 0x64
 8001270:	d82e      	bhi.n	80012d0 <HAL_RCC_OscConfig+0x3e4>
 8001272:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001276:	682a      	ldr	r2, [r5, #0]
 8001278:	fa98 f3a8 	rbit	r3, r8
 800127c:	fab3 f383 	clz	r3, r3
 8001280:	f003 031f 	and.w	r3, r3, #31
 8001284:	fa06 f303 	lsl.w	r3, r6, r3
 8001288:	4213      	tst	r3, r2
 800128a:	d1ed      	bne.n	8001268 <HAL_RCC_OscConfig+0x37c>
 800128c:	e672      	b.n	8000f74 <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800128e:	4d7e      	ldr	r5, [pc, #504]	; (8001488 <HAL_RCC_OscConfig+0x59c>)
 8001290:	21f8      	movs	r1, #248	; 0xf8
 8001292:	6828      	ldr	r0, [r5, #0]
 8001294:	fa91 f1a1 	rbit	r1, r1
 8001298:	6922      	ldr	r2, [r4, #16]
 800129a:	fab1 f181 	clz	r1, r1
 800129e:	f020 00f8 	bic.w	r0, r0, #248	; 0xf8
 80012a2:	408a      	lsls	r2, r1
 80012a4:	4302      	orrs	r2, r0
 80012a6:	602a      	str	r2, [r5, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012a8:	071d      	lsls	r5, r3, #28
 80012aa:	f57f aeab 	bpl.w	8001004 <HAL_RCC_OscConfig+0x118>
 80012ae:	e6f0      	b.n	8001092 <HAL_RCC_OscConfig+0x1a6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012b0:	682b      	ldr	r3, [r5, #0]
 80012b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012b6:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80012b8:	f7fe ffbc 	bl	8000234 <HAL_GetTick>
 80012bc:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012be:	682b      	ldr	r3, [r5, #0]
 80012c0:	05db      	lsls	r3, r3, #23
 80012c2:	f53f aead 	bmi.w	8001020 <HAL_RCC_OscConfig+0x134>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012c6:	f7fe ffb5 	bl	8000234 <HAL_GetTick>
 80012ca:	1b80      	subs	r0, r0, r6
 80012cc:	2864      	cmp	r0, #100	; 0x64
 80012ce:	d9f6      	bls.n	80012be <HAL_RCC_OscConfig+0x3d2>
            return HAL_TIMEOUT;
 80012d0:	2003      	movs	r0, #3
}
 80012d2:	b003      	add	sp, #12
 80012d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(pwrclkchanged == SET)
 80012d8:	f1b8 0f00 	cmp.w	r8, #0
 80012dc:	f43f af07 	beq.w	80010ee <HAL_RCC_OscConfig+0x202>
      __HAL_RCC_PWR_CLK_DISABLE();
 80012e0:	4a69      	ldr	r2, [pc, #420]	; (8001488 <HAL_RCC_OscConfig+0x59c>)
 80012e2:	69d3      	ldr	r3, [r2, #28]
 80012e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012e8:	61d3      	str	r3, [r2, #28]
 80012ea:	e700      	b.n	80010ee <HAL_RCC_OscConfig+0x202>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012ec:	4d66      	ldr	r5, [pc, #408]	; (8001488 <HAL_RCC_OscConfig+0x59c>)
 80012ee:	6a2b      	ldr	r3, [r5, #32]
 80012f0:	f023 0301 	bic.w	r3, r3, #1
 80012f4:	622b      	str	r3, [r5, #32]
 80012f6:	6a2b      	ldr	r3, [r5, #32]
 80012f8:	f023 0304 	bic.w	r3, r3, #4
 80012fc:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 80012fe:	f7fe ff99 	bl	8000234 <HAL_GetTick>
 8001302:	f04f 0902 	mov.w	r9, #2
 8001306:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001308:	2601      	movs	r6, #1
 800130a:	e013      	b.n	8001334 <HAL_RCC_OscConfig+0x448>
 800130c:	fa99 f3a9 	rbit	r3, r9
 8001310:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8001312:	fa99 f3a9 	rbit	r3, r9
 8001316:	fab3 f383 	clz	r3, r3
 800131a:	f003 031f 	and.w	r3, r3, #31
 800131e:	fa06 f303 	lsl.w	r3, r6, r3
 8001322:	4213      	tst	r3, r2
 8001324:	d0d8      	beq.n	80012d8 <HAL_RCC_OscConfig+0x3ec>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001326:	f7fe ff85 	bl	8000234 <HAL_GetTick>
 800132a:	f241 3388 	movw	r3, #5000	; 0x1388
 800132e:	1bc0      	subs	r0, r0, r7
 8001330:	4298      	cmp	r0, r3
 8001332:	d8cd      	bhi.n	80012d0 <HAL_RCC_OscConfig+0x3e4>
 8001334:	fa99 f3a9 	rbit	r3, r9
 8001338:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800133c:	2b00      	cmp	r3, #0
 800133e:	d0e5      	beq.n	800130c <HAL_RCC_OscConfig+0x420>
 8001340:	6a2a      	ldr	r2, [r5, #32]
 8001342:	e7e6      	b.n	8001312 <HAL_RCC_OscConfig+0x426>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001344:	4a50      	ldr	r2, [pc, #320]	; (8001488 <HAL_RCC_OscConfig+0x59c>)
 8001346:	6813      	ldr	r3, [r2, #0]
 8001348:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800134c:	6013      	str	r3, [r2, #0]
 800134e:	e5f6      	b.n	8000f3e <HAL_RCC_OscConfig+0x52>
 8001350:	2501      	movs	r5, #1
 8001352:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_DISABLE();
 8001356:	fab3 f383 	clz	r3, r3
 800135a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800135e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	f04f 0802 	mov.w	r8, #2
 8001368:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800136a:	f7fe ff63 	bl	8000234 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800136e:	4e46      	ldr	r6, [pc, #280]	; (8001488 <HAL_RCC_OscConfig+0x59c>)
        tickstart = HAL_GetTick();
 8001370:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001372:	e004      	b.n	800137e <HAL_RCC_OscConfig+0x492>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001374:	f7fe ff5e 	bl	8000234 <HAL_GetTick>
 8001378:	1bc0      	subs	r0, r0, r7
 800137a:	2802      	cmp	r0, #2
 800137c:	d8a8      	bhi.n	80012d0 <HAL_RCC_OscConfig+0x3e4>
 800137e:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001382:	6832      	ldr	r2, [r6, #0]
 8001384:	fa98 f3a8 	rbit	r3, r8
 8001388:	fab3 f383 	clz	r3, r3
 800138c:	f003 031f 	and.w	r3, r3, #31
 8001390:	fa05 f303 	lsl.w	r3, r5, r3
 8001394:	4213      	tst	r3, r2
 8001396:	d1ed      	bne.n	8001374 <HAL_RCC_OscConfig+0x488>
 8001398:	6823      	ldr	r3, [r4, #0]
 800139a:	e631      	b.n	8001000 <HAL_RCC_OscConfig+0x114>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800139c:	4a3a      	ldr	r2, [pc, #232]	; (8001488 <HAL_RCC_OscConfig+0x59c>)
 800139e:	6a13      	ldr	r3, [r2, #32]
 80013a0:	f043 0301 	orr.w	r3, r3, #1
 80013a4:	6213      	str	r3, [r2, #32]
 80013a6:	e64e      	b.n	8001046 <HAL_RCC_OscConfig+0x15a>
 80013a8:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80013ac:	fab3 f383 	clz	r3, r3
 80013b0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80013b4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80013be:	f7fe ff39 	bl	8000234 <HAL_GetTick>
 80013c2:	f04f 7800 	mov.w	r8, #33554432	; 0x2000000
 80013c6:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013c8:	2601      	movs	r6, #1
 80013ca:	e005      	b.n	80013d8 <HAL_RCC_OscConfig+0x4ec>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013cc:	f7fe ff32 	bl	8000234 <HAL_GetTick>
 80013d0:	1bc0      	subs	r0, r0, r7
 80013d2:	2802      	cmp	r0, #2
 80013d4:	f63f af7c 	bhi.w	80012d0 <HAL_RCC_OscConfig+0x3e4>
 80013d8:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013dc:	682a      	ldr	r2, [r5, #0]
 80013de:	fa98 f3a8 	rbit	r3, r8
 80013e2:	fab3 f383 	clz	r3, r3
 80013e6:	f003 031f 	and.w	r3, r3, #31
 80013ea:	fa06 f303 	lsl.w	r3, r6, r3
 80013ee:	4213      	tst	r3, r2
 80013f0:	d1ec      	bne.n	80013cc <HAL_RCC_OscConfig+0x4e0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013f2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80013f4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80013f6:	f023 030f 	bic.w	r3, r3, #15
 80013fa:	4313      	orrs	r3, r2
 80013fc:	62eb      	str	r3, [r5, #44]	; 0x2c
 80013fe:	686a      	ldr	r2, [r5, #4]
 8001400:	6a23      	ldr	r3, [r4, #32]
 8001402:	69e1      	ldr	r1, [r4, #28]
 8001404:	f422 1276 	bic.w	r2, r2, #4030464	; 0x3d8000
 8001408:	430b      	orrs	r3, r1
 800140a:	4313      	orrs	r3, r2
 800140c:	606b      	str	r3, [r5, #4]
 800140e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001412:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8001416:	fab3 f383 	clz	r3, r3
 800141a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800141e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8001428:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 800142a:	f7fe ff03 	bl	8000234 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800142e:	4e16      	ldr	r6, [pc, #88]	; (8001488 <HAL_RCC_OscConfig+0x59c>)
        tickstart = HAL_GetTick();
 8001430:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001432:	2501      	movs	r5, #1
 8001434:	e005      	b.n	8001442 <HAL_RCC_OscConfig+0x556>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001436:	f7fe fefd 	bl	8000234 <HAL_GetTick>
 800143a:	1bc0      	subs	r0, r0, r7
 800143c:	2802      	cmp	r0, #2
 800143e:	f63f af47 	bhi.w	80012d0 <HAL_RCC_OscConfig+0x3e4>
 8001442:	fa94 f3a4 	rbit	r3, r4
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001446:	6832      	ldr	r2, [r6, #0]
 8001448:	fa94 f3a4 	rbit	r3, r4
 800144c:	fab3 f383 	clz	r3, r3
 8001450:	f003 031f 	and.w	r3, r3, #31
 8001454:	fa05 f303 	lsl.w	r3, r5, r3
 8001458:	4213      	tst	r3, r2
 800145a:	d0ec      	beq.n	8001436 <HAL_RCC_OscConfig+0x54a>
 800145c:	e679      	b.n	8001152 <HAL_RCC_OscConfig+0x266>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800145e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001462:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800146c:	601a      	str	r2, [r3, #0]
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	e562      	b.n	8000f3e <HAL_RCC_OscConfig+0x52>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001478:	f042 0204 	orr.w	r2, r2, #4
 800147c:	621a      	str	r2, [r3, #32]
 800147e:	6a1a      	ldr	r2, [r3, #32]
 8001480:	f042 0201 	orr.w	r2, r2, #1
 8001484:	621a      	str	r2, [r3, #32]
 8001486:	e5de      	b.n	8001046 <HAL_RCC_OscConfig+0x15a>
 8001488:	40021000 	.word	0x40021000

0800148c <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 800148c:	4a12      	ldr	r2, [pc, #72]	; (80014d8 <HAL_RCC_GetSysClockFreq+0x4c>)
 800148e:	6853      	ldr	r3, [r2, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001490:	f003 010c 	and.w	r1, r3, #12
 8001494:	2908      	cmp	r1, #8
 8001496:	d11d      	bne.n	80014d4 <HAL_RCC_GetSysClockFreq+0x48>
{
 8001498:	b430      	push	{r4, r5}
 800149a:	f44f 1070 	mov.w	r0, #3932160	; 0x3c0000
 800149e:	fa90 f0a0 	rbit	r0, r0
 80014a2:	210f      	movs	r1, #15
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80014a4:	fab0 f080 	clz	r0, r0
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80014a8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80014aa:	fa91 f1a1 	rbit	r1, r1
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80014ae:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80014b2:	40c3      	lsrs	r3, r0
 80014b4:	4809      	ldr	r0, [pc, #36]	; (80014dc <HAL_RCC_GetSysClockFreq+0x50>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80014b6:	4d0a      	ldr	r5, [pc, #40]	; (80014e0 <HAL_RCC_GetSysClockFreq+0x54>)
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80014b8:	5cc0      	ldrb	r0, [r0, r3]
        pllclk = (HSE_VALUE / prediv) * pllmul;
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 80014ba:	4c0a      	ldr	r4, [pc, #40]	; (80014e4 <HAL_RCC_GetSysClockFreq+0x58>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80014bc:	fab1 f181 	clz	r1, r1
 80014c0:	f002 030f 	and.w	r3, r2, #15
 80014c4:	40cb      	lsrs	r3, r1
 80014c6:	5ceb      	ldrb	r3, [r5, r3]
        pllclk = (HSI_VALUE / prediv) * pllmul;
 80014c8:	fbb4 f3f3 	udiv	r3, r4, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80014cc:	bc30      	pop	{r4, r5}
        pllclk = (HSI_VALUE / prediv) * pllmul;
 80014ce:	fb00 f003 	mul.w	r0, r0, r3
}
 80014d2:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 80014d4:	4803      	ldr	r0, [pc, #12]	; (80014e4 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 80014d6:	4770      	bx	lr
 80014d8:	40021000 	.word	0x40021000
 80014dc:	08002ca0 	.word	0x08002ca0
 80014e0:	08002cb0 	.word	0x08002cb0
 80014e4:	007a1200 	.word	0x007a1200

080014e8 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80014e8:	4a5f      	ldr	r2, [pc, #380]	; (8001668 <HAL_RCC_ClockConfig+0x180>)
 80014ea:	6813      	ldr	r3, [r2, #0]
 80014ec:	f003 0307 	and.w	r3, r3, #7
 80014f0:	428b      	cmp	r3, r1
 80014f2:	d20b      	bcs.n	800150c <HAL_RCC_ClockConfig+0x24>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014f4:	6813      	ldr	r3, [r2, #0]
 80014f6:	f023 0307 	bic.w	r3, r3, #7
 80014fa:	430b      	orrs	r3, r1
 80014fc:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80014fe:	6813      	ldr	r3, [r2, #0]
 8001500:	f003 0307 	and.w	r3, r3, #7
 8001504:	4299      	cmp	r1, r3
 8001506:	d001      	beq.n	800150c <HAL_RCC_ClockConfig+0x24>
      return HAL_ERROR;
 8001508:	2001      	movs	r0, #1
}
 800150a:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800150c:	6803      	ldr	r3, [r0, #0]
{
 800150e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001512:	079c      	lsls	r4, r3, #30
 8001514:	d506      	bpl.n	8001524 <HAL_RCC_ClockConfig+0x3c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001516:	4c55      	ldr	r4, [pc, #340]	; (800166c <HAL_RCC_ClockConfig+0x184>)
 8001518:	6885      	ldr	r5, [r0, #8]
 800151a:	6862      	ldr	r2, [r4, #4]
 800151c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001520:	432a      	orrs	r2, r5
 8001522:	6062      	str	r2, [r4, #4]
 8001524:	460c      	mov	r4, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001526:	07d9      	lsls	r1, r3, #31
 8001528:	4606      	mov	r6, r0
 800152a:	d531      	bpl.n	8001590 <HAL_RCC_ClockConfig+0xa8>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800152c:	6842      	ldr	r2, [r0, #4]
 800152e:	2a01      	cmp	r2, #1
 8001530:	f000 8087 	beq.w	8001642 <HAL_RCC_ClockConfig+0x15a>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001534:	2a02      	cmp	r2, #2
 8001536:	bf0c      	ite	eq
 8001538:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 800153c:	2302      	movne	r3, #2
 800153e:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001542:	494a      	ldr	r1, [pc, #296]	; (800166c <HAL_RCC_ClockConfig+0x184>)
 8001544:	6808      	ldr	r0, [r1, #0]
 8001546:	fa93 f3a3 	rbit	r3, r3
 800154a:	fab3 f383 	clz	r3, r3
 800154e:	f003 031f 	and.w	r3, r3, #31
 8001552:	2101      	movs	r1, #1
 8001554:	fa01 f303 	lsl.w	r3, r1, r3
 8001558:	4203      	tst	r3, r0
 800155a:	d029      	beq.n	80015b0 <HAL_RCC_ClockConfig+0xc8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800155c:	4d43      	ldr	r5, [pc, #268]	; (800166c <HAL_RCC_ClockConfig+0x184>)
 800155e:	686b      	ldr	r3, [r5, #4]
 8001560:	f023 0303 	bic.w	r3, r3, #3
 8001564:	4313      	orrs	r3, r2
 8001566:	606b      	str	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8001568:	f7fe fe64 	bl	8000234 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800156c:	6873      	ldr	r3, [r6, #4]
 800156e:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 8001570:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001572:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001576:	d023      	beq.n	80015c0 <HAL_RCC_ClockConfig+0xd8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001578:	2b02      	cmp	r3, #2
 800157a:	d105      	bne.n	8001588 <HAL_RCC_ClockConfig+0xa0>
 800157c:	e058      	b.n	8001630 <HAL_RCC_ClockConfig+0x148>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800157e:	f7fe fe59 	bl	8000234 <HAL_GetTick>
 8001582:	1bc0      	subs	r0, r0, r7
 8001584:	4540      	cmp	r0, r8
 8001586:	d859      	bhi.n	800163c <HAL_RCC_ClockConfig+0x154>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001588:	686b      	ldr	r3, [r5, #4]
 800158a:	f013 0f0c 	tst.w	r3, #12
 800158e:	d1f6      	bne.n	800157e <HAL_RCC_ClockConfig+0x96>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001590:	4a35      	ldr	r2, [pc, #212]	; (8001668 <HAL_RCC_ClockConfig+0x180>)
 8001592:	6813      	ldr	r3, [r2, #0]
 8001594:	f003 0307 	and.w	r3, r3, #7
 8001598:	429c      	cmp	r4, r3
 800159a:	d217      	bcs.n	80015cc <HAL_RCC_ClockConfig+0xe4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800159c:	6813      	ldr	r3, [r2, #0]
 800159e:	f023 0307 	bic.w	r3, r3, #7
 80015a2:	4323      	orrs	r3, r4
 80015a4:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80015a6:	6813      	ldr	r3, [r2, #0]
 80015a8:	f003 0307 	and.w	r3, r3, #7
 80015ac:	429c      	cmp	r4, r3
 80015ae:	d00d      	beq.n	80015cc <HAL_RCC_ClockConfig+0xe4>
      return HAL_ERROR;
 80015b0:	2001      	movs	r0, #1
 80015b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015b6:	f7fe fe3d 	bl	8000234 <HAL_GetTick>
 80015ba:	1bc0      	subs	r0, r0, r7
 80015bc:	4540      	cmp	r0, r8
 80015be:	d83d      	bhi.n	800163c <HAL_RCC_ClockConfig+0x154>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80015c0:	686b      	ldr	r3, [r5, #4]
 80015c2:	f003 030c 	and.w	r3, r3, #12
 80015c6:	2b04      	cmp	r3, #4
 80015c8:	d1f5      	bne.n	80015b6 <HAL_RCC_ClockConfig+0xce>
 80015ca:	e7e1      	b.n	8001590 <HAL_RCC_ClockConfig+0xa8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015cc:	6833      	ldr	r3, [r6, #0]
 80015ce:	075a      	lsls	r2, r3, #29
 80015d0:	d506      	bpl.n	80015e0 <HAL_RCC_ClockConfig+0xf8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015d2:	4926      	ldr	r1, [pc, #152]	; (800166c <HAL_RCC_ClockConfig+0x184>)
 80015d4:	68f0      	ldr	r0, [r6, #12]
 80015d6:	684a      	ldr	r2, [r1, #4]
 80015d8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80015dc:	4302      	orrs	r2, r0
 80015de:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015e0:	071b      	lsls	r3, r3, #28
 80015e2:	d507      	bpl.n	80015f4 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015e4:	4a21      	ldr	r2, [pc, #132]	; (800166c <HAL_RCC_ClockConfig+0x184>)
 80015e6:	6931      	ldr	r1, [r6, #16]
 80015e8:	6853      	ldr	r3, [r2, #4]
 80015ea:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80015ee:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80015f2:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80015f4:	f7ff ff4a 	bl	800148c <HAL_RCC_GetSysClockFreq>
 80015f8:	4b1c      	ldr	r3, [pc, #112]	; (800166c <HAL_RCC_ClockConfig+0x184>)
 80015fa:	4601      	mov	r1, r0
 80015fc:	22f0      	movs	r2, #240	; 0xf0
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	fa92 f2a2 	rbit	r2, r2
 8001604:	fab2 f282 	clz	r2, r2
 8001608:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800160c:	40d3      	lsrs	r3, r2
 800160e:	4818      	ldr	r0, [pc, #96]	; (8001670 <HAL_RCC_ClockConfig+0x188>)
 8001610:	4a18      	ldr	r2, [pc, #96]	; (8001674 <HAL_RCC_ClockConfig+0x18c>)
 8001612:	5cc3      	ldrb	r3, [r0, r3]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001614:	2000      	movs	r0, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001616:	fa21 f303 	lsr.w	r3, r1, r3
 800161a:	6013      	str	r3, [r2, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800161c:	f7fe fdda 	bl	80001d4 <HAL_InitTick>
  return HAL_OK;
 8001620:	2000      	movs	r0, #0
}
 8001622:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001626:	f7fe fe05 	bl	8000234 <HAL_GetTick>
 800162a:	1bc0      	subs	r0, r0, r7
 800162c:	4540      	cmp	r0, r8
 800162e:	d805      	bhi.n	800163c <HAL_RCC_ClockConfig+0x154>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001630:	686b      	ldr	r3, [r5, #4]
 8001632:	f003 030c 	and.w	r3, r3, #12
 8001636:	2b08      	cmp	r3, #8
 8001638:	d1f5      	bne.n	8001626 <HAL_RCC_ClockConfig+0x13e>
 800163a:	e7a9      	b.n	8001590 <HAL_RCC_ClockConfig+0xa8>
          return HAL_TIMEOUT;
 800163c:	2003      	movs	r0, #3
 800163e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001642:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001646:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800164a:	4908      	ldr	r1, [pc, #32]	; (800166c <HAL_RCC_ClockConfig+0x184>)
 800164c:	6809      	ldr	r1, [r1, #0]
 800164e:	fa93 f3a3 	rbit	r3, r3
 8001652:	fab3 f383 	clz	r3, r3
 8001656:	f003 031f 	and.w	r3, r3, #31
 800165a:	fa02 f303 	lsl.w	r3, r2, r3
 800165e:	420b      	tst	r3, r1
 8001660:	f47f af7c 	bne.w	800155c <HAL_RCC_ClockConfig+0x74>
 8001664:	e7a4      	b.n	80015b0 <HAL_RCC_ClockConfig+0xc8>
 8001666:	bf00      	nop
 8001668:	40022000 	.word	0x40022000
 800166c:	40021000 	.word	0x40021000
 8001670:	08002cd4 	.word	0x08002cd4
 8001674:	20000000 	.word	0x20000000

08001678 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8001678:	4b01      	ldr	r3, [pc, #4]	; (8001680 <HAL_RCC_GetHCLKFreq+0x8>)
}
 800167a:	6818      	ldr	r0, [r3, #0]
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	20000000 	.word	0x20000000

08001684 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001684:	4b08      	ldr	r3, [pc, #32]	; (80016a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001686:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	fa92 f2a2 	rbit	r2, r2
 8001690:	fab2 f282 	clz	r2, r2
 8001694:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001698:	40d3      	lsrs	r3, r2
 800169a:	4904      	ldr	r1, [pc, #16]	; (80016ac <HAL_RCC_GetPCLK1Freq+0x28>)
  return SystemCoreClock;
 800169c:	4a04      	ldr	r2, [pc, #16]	; (80016b0 <HAL_RCC_GetPCLK1Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800169e:	5ccb      	ldrb	r3, [r1, r3]
 80016a0:	6810      	ldr	r0, [r2, #0]
}    
 80016a2:	40d8      	lsrs	r0, r3
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	40021000 	.word	0x40021000
 80016ac:	08002ce4 	.word	0x08002ce4
 80016b0:	20000000 	.word	0x20000000

080016b4 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80016b4:	4b08      	ldr	r3, [pc, #32]	; (80016d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80016b6:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	fa92 f2a2 	rbit	r2, r2
 80016c0:	fab2 f282 	clz	r2, r2
 80016c4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80016c8:	40d3      	lsrs	r3, r2
 80016ca:	4904      	ldr	r1, [pc, #16]	; (80016dc <HAL_RCC_GetPCLK2Freq+0x28>)
  return SystemCoreClock;
 80016cc:	4a04      	ldr	r2, [pc, #16]	; (80016e0 <HAL_RCC_GetPCLK2Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80016ce:	5ccb      	ldrb	r3, [r1, r3]
 80016d0:	6810      	ldr	r0, [r2, #0]
} 
 80016d2:	40d8      	lsrs	r0, r3
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	40021000 	.word	0x40021000
 80016dc:	08002ce4 	.word	0x08002ce4
 80016e0:	20000000 	.word	0x20000000

080016e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80016e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80016e8:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80016ea:	6800      	ldr	r0, [r0, #0]
 80016ec:	03c6      	lsls	r6, r0, #15
{
 80016ee:	b083      	sub	sp, #12
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80016f0:	d53c      	bpl.n	800176c <HAL_RCCEx_PeriphCLKConfig+0x88>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016f2:	4ba1      	ldr	r3, [pc, #644]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80016f4:	69da      	ldr	r2, [r3, #28]
 80016f6:	00d5      	lsls	r5, r2, #3
 80016f8:	f140 80f2 	bpl.w	80018e0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016fc:	4d9f      	ldr	r5, [pc, #636]	; (800197c <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80016fe:	682b      	ldr	r3, [r5, #0]
 8001700:	05d8      	lsls	r0, r3, #23
    FlagStatus       pwrclkchanged = RESET;
 8001702:	f04f 0600 	mov.w	r6, #0
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001706:	f140 80fb 	bpl.w	8001900 <HAL_RCCEx_PeriphCLKConfig+0x21c>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800170a:	4d9b      	ldr	r5, [pc, #620]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800170c:	6a2b      	ldr	r3, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800170e:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001712:	d020      	beq.n	8001756 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8001714:	6861      	ldr	r1, [r4, #4]
 8001716:	f401 7240 	and.w	r2, r1, #768	; 0x300
 800171a:	4293      	cmp	r3, r2
 800171c:	d01c      	beq.n	8001758 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800171e:	6a29      	ldr	r1, [r5, #32]
 8001720:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001724:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 8001728:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800172c:	4f94      	ldr	r7, [pc, #592]	; (8001980 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800172e:	fab2 f282 	clz	r2, r2
 8001732:	443a      	add	r2, r7
 8001734:	0092      	lsls	r2, r2, #2
 8001736:	f04f 0e01 	mov.w	lr, #1
 800173a:	f8c2 e000 	str.w	lr, [r2]
 800173e:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001742:	fab3 f383 	clz	r3, r3
 8001746:	443b      	add	r3, r7
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	2200      	movs	r2, #0
 800174c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800174e:	07ca      	lsls	r2, r1, #31
      RCC->BDCR = temp_reg;
 8001750:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001752:	f100 80ec 	bmi.w	800192e <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8001756:	6861      	ldr	r1, [r4, #4]
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001758:	4a87      	ldr	r2, [pc, #540]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800175a:	6a13      	ldr	r3, [r2, #32]
 800175c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001760:	430b      	orrs	r3, r1
 8001762:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001764:	2e00      	cmp	r6, #0
 8001766:	f040 80dd 	bne.w	8001924 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800176a:	6820      	ldr	r0, [r4, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800176c:	07c3      	lsls	r3, r0, #31
 800176e:	d506      	bpl.n	800177e <HAL_RCCEx_PeriphCLKConfig+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001770:	4a81      	ldr	r2, [pc, #516]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8001772:	68a1      	ldr	r1, [r4, #8]
 8001774:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001776:	f023 0303 	bic.w	r3, r3, #3
 800177a:	430b      	orrs	r3, r1
 800177c:	6313      	str	r3, [r2, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800177e:	0787      	lsls	r7, r0, #30
 8001780:	d506      	bpl.n	8001790 <HAL_RCCEx_PeriphCLKConfig+0xac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001782:	4a7d      	ldr	r2, [pc, #500]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8001784:	68e1      	ldr	r1, [r4, #12]
 8001786:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001788:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800178c:	430b      	orrs	r3, r1
 800178e:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001790:	0746      	lsls	r6, r0, #29
 8001792:	d506      	bpl.n	80017a2 <HAL_RCCEx_PeriphCLKConfig+0xbe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001794:	4a78      	ldr	r2, [pc, #480]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8001796:	6921      	ldr	r1, [r4, #16]
 8001798:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800179a:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 800179e:	430b      	orrs	r3, r1
 80017a0:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80017a2:	0685      	lsls	r5, r0, #26
 80017a4:	d506      	bpl.n	80017b4 <HAL_RCCEx_PeriphCLKConfig+0xd0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80017a6:	4a74      	ldr	r2, [pc, #464]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80017a8:	69e1      	ldr	r1, [r4, #28]
 80017aa:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80017ac:	f023 0310 	bic.w	r3, r3, #16
 80017b0:	430b      	orrs	r3, r1
 80017b2:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80017b4:	0381      	lsls	r1, r0, #14
 80017b6:	d506      	bpl.n	80017c6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80017b8:	4a6f      	ldr	r2, [pc, #444]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80017ba:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80017bc:	6853      	ldr	r3, [r2, #4]
 80017be:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80017c2:	430b      	orrs	r3, r1
 80017c4:	6053      	str	r3, [r2, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80017c6:	0642      	lsls	r2, r0, #25
 80017c8:	d506      	bpl.n	80017d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80017ca:	4a6b      	ldr	r2, [pc, #428]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80017cc:	6a21      	ldr	r1, [r4, #32]
 80017ce:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80017d0:	f023 0320 	bic.w	r3, r3, #32
 80017d4:	430b      	orrs	r3, r1
 80017d6:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80017d8:	0343      	lsls	r3, r0, #13
 80017da:	d506      	bpl.n	80017ea <HAL_RCCEx_PeriphCLKConfig+0x106>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80017dc:	4a66      	ldr	r2, [pc, #408]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80017de:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80017e0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80017e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80017e6:	430b      	orrs	r3, r1
 80017e8:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80017ea:	0707      	lsls	r7, r0, #28
 80017ec:	d506      	bpl.n	80017fc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80017ee:	4a62      	ldr	r2, [pc, #392]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80017f0:	6961      	ldr	r1, [r4, #20]
 80017f2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80017f4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80017f8:	430b      	orrs	r3, r1
 80017fa:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80017fc:	06c6      	lsls	r6, r0, #27
 80017fe:	d506      	bpl.n	800180e <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001800:	4a5d      	ldr	r2, [pc, #372]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8001802:	69a1      	ldr	r1, [r4, #24]
 8001804:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001806:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800180a:	430b      	orrs	r3, r1
 800180c:	6313      	str	r3, [r2, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800180e:	0585      	lsls	r5, r0, #22
 8001810:	d506      	bpl.n	8001820 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001812:	4a59      	ldr	r2, [pc, #356]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8001814:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001816:	6853      	ldr	r3, [r2, #4]
 8001818:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800181c:	430b      	orrs	r3, r1
 800181e:	6053      	str	r3, [r2, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8001820:	0601      	lsls	r1, r0, #24
 8001822:	d506      	bpl.n	8001832 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8001824:	4a54      	ldr	r2, [pc, #336]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8001826:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001828:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800182a:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 800182e:	430b      	orrs	r3, r1
 8001830:	62d3      	str	r3, [r2, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8001832:	05c2      	lsls	r2, r0, #23
 8001834:	d506      	bpl.n	8001844 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8001836:	4a50      	ldr	r2, [pc, #320]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8001838:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800183a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800183c:	f423 5378 	bic.w	r3, r3, #15872	; 0x3e00
 8001840:	430b      	orrs	r3, r1
 8001842:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001844:	04c3      	lsls	r3, r0, #19
 8001846:	d506      	bpl.n	8001856 <HAL_RCCEx_PeriphCLKConfig+0x172>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001848:	4a4b      	ldr	r2, [pc, #300]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800184a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800184c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800184e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001852:	430b      	orrs	r3, r1
 8001854:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8001856:	0487      	lsls	r7, r0, #18
 8001858:	d506      	bpl.n	8001868 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800185a:	4a47      	ldr	r2, [pc, #284]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800185c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800185e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001860:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001864:	430b      	orrs	r3, r1
 8001866:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8001868:	02c6      	lsls	r6, r0, #11
 800186a:	d506      	bpl.n	800187a <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 800186c:	4a42      	ldr	r2, [pc, #264]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800186e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001870:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001872:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001876:	430b      	orrs	r3, r1
 8001878:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800187a:	0285      	lsls	r5, r0, #10
 800187c:	d506      	bpl.n	800188c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800187e:	4a3e      	ldr	r2, [pc, #248]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8001880:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001882:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001884:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8001888:	430b      	orrs	r3, r1
 800188a:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800188c:	0241      	lsls	r1, r0, #9
 800188e:	d506      	bpl.n	800189e <HAL_RCCEx_PeriphCLKConfig+0x1ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8001890:	4a39      	ldr	r2, [pc, #228]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8001892:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001894:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001896:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800189a:	430b      	orrs	r3, r1
 800189c:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800189e:	0202      	lsls	r2, r0, #8
 80018a0:	d506      	bpl.n	80018b0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80018a2:	4a35      	ldr	r2, [pc, #212]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80018a4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80018a6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80018a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80018ac:	430b      	orrs	r3, r1
 80018ae:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80018b0:	01c3      	lsls	r3, r0, #7
 80018b2:	d40d      	bmi.n	80018d0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80018b4:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 80018b8:	d007      	beq.n	80018ca <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80018ba:	4a2f      	ldr	r2, [pc, #188]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80018bc:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80018be:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80018c0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80018c4:	430b      	orrs	r3, r1
 80018c6:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80018c8:	2000      	movs	r0, #0
}
 80018ca:	b003      	add	sp, #12
 80018cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80018d0:	4a29      	ldr	r2, [pc, #164]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80018d2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80018d4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80018d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80018da:	430b      	orrs	r3, r1
 80018dc:	6313      	str	r3, [r2, #48]	; 0x30
 80018de:	e7e9      	b.n	80018b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      __HAL_RCC_PWR_CLK_ENABLE();
 80018e0:	69da      	ldr	r2, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018e2:	4d26      	ldr	r5, [pc, #152]	; (800197c <HAL_RCCEx_PeriphCLKConfig+0x298>)
      __HAL_RCC_PWR_CLK_ENABLE();
 80018e4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80018e8:	61da      	str	r2, [r3, #28]
 80018ea:	69db      	ldr	r3, [r3, #28]
 80018ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018f0:	9301      	str	r3, [sp, #4]
 80018f2:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018f4:	682b      	ldr	r3, [r5, #0]
 80018f6:	05d8      	lsls	r0, r3, #23
      pwrclkchanged = SET;
 80018f8:	f04f 0601 	mov.w	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018fc:	f53f af05 	bmi.w	800170a <HAL_RCCEx_PeriphCLKConfig+0x26>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001900:	682b      	ldr	r3, [r5, #0]
 8001902:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001906:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001908:	f7fe fc94 	bl	8000234 <HAL_GetTick>
 800190c:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800190e:	682b      	ldr	r3, [r5, #0]
 8001910:	05d9      	lsls	r1, r3, #23
 8001912:	f53f aefa 	bmi.w	800170a <HAL_RCCEx_PeriphCLKConfig+0x26>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001916:	f7fe fc8d 	bl	8000234 <HAL_GetTick>
 800191a:	1bc0      	subs	r0, r0, r7
 800191c:	2864      	cmp	r0, #100	; 0x64
 800191e:	d9f6      	bls.n	800190e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          return HAL_TIMEOUT;
 8001920:	2003      	movs	r0, #3
 8001922:	e7d2      	b.n	80018ca <HAL_RCCEx_PeriphCLKConfig+0x1e6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001924:	69d3      	ldr	r3, [r2, #28]
 8001926:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800192a:	61d3      	str	r3, [r2, #28]
 800192c:	e71d      	b.n	800176a <HAL_RCCEx_PeriphCLKConfig+0x86>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800192e:	4677      	mov	r7, lr
        tickstart = HAL_GetTick();
 8001930:	f7fe fc80 	bl	8000234 <HAL_GetTick>
 8001934:	f04f 0902 	mov.w	r9, #2
 8001938:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800193a:	e015      	b.n	8001968 <HAL_RCCEx_PeriphCLKConfig+0x284>
 800193c:	fa99 f3a9 	rbit	r3, r9
 8001940:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8001942:	fa99 f3a9 	rbit	r3, r9
 8001946:	fab3 f383 	clz	r3, r3
 800194a:	f003 031f 	and.w	r3, r3, #31
 800194e:	fa07 f303 	lsl.w	r3, r7, r3
 8001952:	4213      	tst	r3, r2
 8001954:	f47f aeff 	bne.w	8001756 <HAL_RCCEx_PeriphCLKConfig+0x72>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001958:	f7fe fc6c 	bl	8000234 <HAL_GetTick>
 800195c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001960:	eba0 0008 	sub.w	r0, r0, r8
 8001964:	4298      	cmp	r0, r3
 8001966:	d8db      	bhi.n	8001920 <HAL_RCCEx_PeriphCLKConfig+0x23c>
 8001968:	fa99 f3a9 	rbit	r3, r9
 800196c:	fa99 f3a9 	rbit	r3, r9
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001970:	2b00      	cmp	r3, #0
 8001972:	d0e3      	beq.n	800193c <HAL_RCCEx_PeriphCLKConfig+0x258>
 8001974:	6a2a      	ldr	r2, [r5, #32]
 8001976:	e7e4      	b.n	8001942 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8001978:	40021000 	.word	0x40021000
 800197c:	40007000 	.word	0x40007000
 8001980:	10908100 	.word	0x10908100

08001984 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001984:	6803      	ldr	r3, [r0, #0]
 8001986:	68da      	ldr	r2, [r3, #12]
 8001988:	f042 0201 	orr.w	r2, r2, #1
 800198c:	60da      	str	r2, [r3, #12]
      
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	f042 0201 	orr.w	r2, r2, #1
 8001994:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
}
 8001996:	2000      	movs	r0, #0
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop

0800199c <HAL_TIM_Base_Stop_IT>:
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800199c:	6803      	ldr	r3, [r0, #0]
 800199e:	68da      	ldr	r2, [r3, #12]
 80019a0:	f022 0201 	bic.w	r2, r2, #1
 80019a4:	60da      	str	r2, [r3, #12]
      
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80019a6:	6a19      	ldr	r1, [r3, #32]
 80019a8:	f241 1211 	movw	r2, #4369	; 0x1111
 80019ac:	4211      	tst	r1, r2
 80019ae:	d108      	bne.n	80019c2 <HAL_TIM_Base_Stop_IT+0x26>
 80019b0:	6a19      	ldr	r1, [r3, #32]
 80019b2:	f240 4244 	movw	r2, #1092	; 0x444
 80019b6:	4211      	tst	r1, r2
 80019b8:	d103      	bne.n	80019c2 <HAL_TIM_Base_Stop_IT+0x26>
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	f022 0201 	bic.w	r2, r2, #1
 80019c0:	601a      	str	r2, [r3, #0]
    
  /* Return function status */
  return HAL_OK;
}
 80019c2:	2000      	movs	r0, #0
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop

080019c8 <HAL_TIM_OC_DelayElapsedCallback>:
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop

080019cc <HAL_TIM_IC_CaptureCallback>:
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop

080019d0 <HAL_TIM_PWM_PulseFinishedCallback>:
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop

080019d4 <HAL_TIM_TriggerCallback>:
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop

080019d8 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80019d8:	6803      	ldr	r3, [r0, #0]
 80019da:	691a      	ldr	r2, [r3, #16]
 80019dc:	0791      	lsls	r1, r2, #30
{
 80019de:	b510      	push	{r4, lr}
 80019e0:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80019e2:	d502      	bpl.n	80019ea <HAL_TIM_IRQHandler+0x12>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80019e4:	68da      	ldr	r2, [r3, #12]
 80019e6:	0792      	lsls	r2, r2, #30
 80019e8:	d465      	bmi.n	8001ab6 <HAL_TIM_IRQHandler+0xde>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80019ea:	691a      	ldr	r2, [r3, #16]
 80019ec:	0752      	lsls	r2, r2, #29
 80019ee:	d502      	bpl.n	80019f6 <HAL_TIM_IRQHandler+0x1e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80019f0:	68da      	ldr	r2, [r3, #12]
 80019f2:	0750      	lsls	r0, r2, #29
 80019f4:	d44c      	bmi.n	8001a90 <HAL_TIM_IRQHandler+0xb8>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
    } 
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80019f6:	691a      	ldr	r2, [r3, #16]
 80019f8:	0711      	lsls	r1, r2, #28
 80019fa:	d502      	bpl.n	8001a02 <HAL_TIM_IRQHandler+0x2a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80019fc:	68da      	ldr	r2, [r3, #12]
 80019fe:	0712      	lsls	r2, r2, #28
 8001a00:	d434      	bmi.n	8001a6c <HAL_TIM_IRQHandler+0x94>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001a02:	691a      	ldr	r2, [r3, #16]
 8001a04:	06d0      	lsls	r0, r2, #27
 8001a06:	d502      	bpl.n	8001a0e <HAL_TIM_IRQHandler+0x36>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001a08:	68da      	ldr	r2, [r3, #12]
 8001a0a:	06d1      	lsls	r1, r2, #27
 8001a0c:	d41e      	bmi.n	8001a4c <HAL_TIM_IRQHandler+0x74>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
    } 
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001a0e:	691a      	ldr	r2, [r3, #16]
 8001a10:	07d2      	lsls	r2, r2, #31
 8001a12:	d502      	bpl.n	8001a1a <HAL_TIM_IRQHandler+0x42>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001a14:	68da      	ldr	r2, [r3, #12]
 8001a16:	07d0      	lsls	r0, r2, #31
 8001a18:	d46b      	bmi.n	8001af2 <HAL_TIM_IRQHandler+0x11a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
      HAL_TIM_PeriodElapsedCallback(htim);
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001a1a:	691a      	ldr	r2, [r3, #16]
 8001a1c:	0611      	lsls	r1, r2, #24
 8001a1e:	d502      	bpl.n	8001a26 <HAL_TIM_IRQHandler+0x4e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001a20:	68da      	ldr	r2, [r3, #12]
 8001a22:	0612      	lsls	r2, r2, #24
 8001a24:	d46d      	bmi.n	8001b02 <HAL_TIM_IRQHandler+0x12a>
    }
  }

#if defined(TIM_FLAG_BREAK2)
  /* TIM Break input 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001a26:	691a      	ldr	r2, [r3, #16]
 8001a28:	05d0      	lsls	r0, r2, #23
 8001a2a:	d502      	bpl.n	8001a32 <HAL_TIM_IRQHandler+0x5a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001a2c:	68da      	ldr	r2, [r3, #12]
 8001a2e:	0611      	lsls	r1, r2, #24
 8001a30:	d46f      	bmi.n	8001b12 <HAL_TIM_IRQHandler+0x13a>
    }
  }
#endif

  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001a32:	691a      	ldr	r2, [r3, #16]
 8001a34:	0652      	lsls	r2, r2, #25
 8001a36:	d502      	bpl.n	8001a3e <HAL_TIM_IRQHandler+0x66>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001a38:	68da      	ldr	r2, [r3, #12]
 8001a3a:	0650      	lsls	r0, r2, #25
 8001a3c:	d451      	bmi.n	8001ae2 <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
      HAL_TIM_TriggerCallback(htim);
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001a3e:	691a      	ldr	r2, [r3, #16]
 8001a40:	0691      	lsls	r1, r2, #26
 8001a42:	d502      	bpl.n	8001a4a <HAL_TIM_IRQHandler+0x72>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001a44:	68da      	ldr	r2, [r3, #12]
 8001a46:	0692      	lsls	r2, r2, #26
 8001a48:	d443      	bmi.n	8001ad2 <HAL_TIM_IRQHandler+0xfa>
 8001a4a:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001a4c:	f06f 0210 	mvn.w	r2, #16
 8001a50:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001a52:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001a54:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001a56:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001a5a:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8001a5c:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001a5e:	d06c      	beq.n	8001b3a <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_IC_CaptureCallback(htim);
 8001a60:	f7ff ffb4 	bl	80019cc <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a64:	2200      	movs	r2, #0
 8001a66:	6823      	ldr	r3, [r4, #0]
 8001a68:	7722      	strb	r2, [r4, #28]
 8001a6a:	e7d0      	b.n	8001a0e <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001a6c:	f06f 0208 	mvn.w	r2, #8
 8001a70:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a72:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001a74:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a76:	079b      	lsls	r3, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001a78:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8001a7a:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a7c:	d15a      	bne.n	8001b34 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a7e:	f7ff ffa3 	bl	80019c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8001a82:	4620      	mov	r0, r4
 8001a84:	f7ff ffa4 	bl	80019d0 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a88:	2200      	movs	r2, #0
 8001a8a:	6823      	ldr	r3, [r4, #0]
 8001a8c:	7722      	strb	r2, [r4, #28]
 8001a8e:	e7b8      	b.n	8001a02 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001a90:	f06f 0204 	mvn.w	r2, #4
 8001a94:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001a96:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001a98:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001a9a:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001a9e:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8001aa0:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001aa2:	d144      	bne.n	8001b2e <HAL_TIM_IRQHandler+0x156>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001aa4:	f7ff ff90 	bl	80019c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001aa8:	4620      	mov	r0, r4
 8001aaa:	f7ff ff91 	bl	80019d0 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001aae:	2200      	movs	r2, #0
 8001ab0:	6823      	ldr	r3, [r4, #0]
 8001ab2:	7722      	strb	r2, [r4, #28]
 8001ab4:	e79f      	b.n	80019f6 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001ab6:	f06f 0202 	mvn.w	r2, #2
 8001aba:	611a      	str	r2, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001abc:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001abe:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ac0:	0799      	lsls	r1, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ac2:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ac4:	d02d      	beq.n	8001b22 <HAL_TIM_IRQHandler+0x14a>
          HAL_TIM_IC_CaptureCallback(htim);
 8001ac6:	f7ff ff81 	bl	80019cc <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001aca:	2200      	movs	r2, #0
 8001acc:	6823      	ldr	r3, [r4, #0]
 8001ace:	7722      	strb	r2, [r4, #28]
 8001ad0:	e78b      	b.n	80019ea <HAL_TIM_IRQHandler+0x12>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001ad2:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8001ad6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001ad8:	611a      	str	r2, [r3, #16]
    }
  }
}
 8001ada:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8001ade:	f000 b8e3 	b.w	8001ca8 <HAL_TIMEx_CommutationCallback>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001ae2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001ae6:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001ae8:	4620      	mov	r0, r4
 8001aea:	f7ff ff73 	bl	80019d4 <HAL_TIM_TriggerCallback>
 8001aee:	6823      	ldr	r3, [r4, #0]
 8001af0:	e7a5      	b.n	8001a3e <HAL_TIM_IRQHandler+0x66>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001af2:	f06f 0201 	mvn.w	r2, #1
 8001af6:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001af8:	4620      	mov	r0, r4
 8001afa:	f000 fe25 	bl	8002748 <HAL_TIM_PeriodElapsedCallback>
 8001afe:	6823      	ldr	r3, [r4, #0]
 8001b00:	e78b      	b.n	8001a1a <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001b02:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001b06:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001b08:	4620      	mov	r0, r4
 8001b0a:	f000 f8cf 	bl	8001cac <HAL_TIMEx_BreakCallback>
 8001b0e:	6823      	ldr	r3, [r4, #0]
 8001b10:	e789      	b.n	8001a26 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001b12:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001b16:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8001b18:	4620      	mov	r0, r4
 8001b1a:	f000 f8c9 	bl	8001cb0 <HAL_TIMEx_Break2Callback>
 8001b1e:	6823      	ldr	r3, [r4, #0]
 8001b20:	e787      	b.n	8001a32 <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b22:	f7ff ff51 	bl	80019c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b26:	4620      	mov	r0, r4
 8001b28:	f7ff ff52 	bl	80019d0 <HAL_TIM_PWM_PulseFinishedCallback>
 8001b2c:	e7cd      	b.n	8001aca <HAL_TIM_IRQHandler+0xf2>
        HAL_TIM_IC_CaptureCallback(htim);
 8001b2e:	f7ff ff4d 	bl	80019cc <HAL_TIM_IC_CaptureCallback>
 8001b32:	e7bc      	b.n	8001aae <HAL_TIM_IRQHandler+0xd6>
        HAL_TIM_IC_CaptureCallback(htim);
 8001b34:	f7ff ff4a 	bl	80019cc <HAL_TIM_IC_CaptureCallback>
 8001b38:	e7a6      	b.n	8001a88 <HAL_TIM_IRQHandler+0xb0>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b3a:	f7ff ff45 	bl	80019c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b3e:	4620      	mov	r0, r4
 8001b40:	f7ff ff46 	bl	80019d0 <HAL_TIM_PWM_PulseFinishedCallback>
 8001b44:	e78e      	b.n	8001a64 <HAL_TIM_IRQHandler+0x8c>
 8001b46:	bf00      	nop

08001b48 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b48:	4a45      	ldr	r2, [pc, #276]	; (8001c60 <TIM_Base_SetConfig+0x118>)
  tmpcr1 = TIMx->CR1;
 8001b4a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b4c:	4290      	cmp	r0, r2
{
 8001b4e:	b4f0      	push	{r4, r5, r6, r7}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b50:	d067      	beq.n	8001c22 <TIM_Base_SetConfig+0xda>
 8001b52:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001b56:	d06b      	beq.n	8001c30 <TIM_Base_SetConfig+0xe8>
 8001b58:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001b5c:	4290      	cmp	r0, r2
 8001b5e:	d027      	beq.n	8001bb0 <TIM_Base_SetConfig+0x68>
 8001b60:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001b64:	4290      	cmp	r0, r2
 8001b66:	d023      	beq.n	8001bb0 <TIM_Base_SetConfig+0x68>
 8001b68:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8001b6c:	4290      	cmp	r0, r2
 8001b6e:	d01f      	beq.n	8001bb0 <TIM_Base_SetConfig+0x68>
 8001b70:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 8001b74:	4290      	cmp	r0, r2
 8001b76:	d06d      	beq.n	8001c54 <TIM_Base_SetConfig+0x10c>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001b78:	f5a2 5280 	sub.w	r2, r2, #4096	; 0x1000
 8001b7c:	4290      	cmp	r0, r2
 8001b7e:	d040      	beq.n	8001c02 <TIM_Base_SetConfig+0xba>
 8001b80:	4a38      	ldr	r2, [pc, #224]	; (8001c64 <TIM_Base_SetConfig+0x11c>)
 8001b82:	4290      	cmp	r0, r2
 8001b84:	d03d      	beq.n	8001c02 <TIM_Base_SetConfig+0xba>
 8001b86:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001b8a:	4290      	cmp	r0, r2
 8001b8c:	d039      	beq.n	8001c02 <TIM_Base_SetConfig+0xba>
 8001b8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b92:	4290      	cmp	r0, r2
 8001b94:	d035      	beq.n	8001c02 <TIM_Base_SetConfig+0xba>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001b96:	694d      	ldr	r5, [r1, #20]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001b98:	688c      	ldr	r4, [r1, #8]
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001b9a:	680a      	ldr	r2, [r1, #0]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001b9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ba0:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8001ba2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ba4:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001ba6:	6282      	str	r2, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	6143      	str	r3, [r0, #20]
}
 8001bac:	bcf0      	pop	{r4, r5, r6, r7}
 8001bae:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8001bb0:	684a      	ldr	r2, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001bb2:	68ce      	ldr	r6, [r1, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001bb4:	694c      	ldr	r4, [r1, #20]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001bb6:	688f      	ldr	r7, [r1, #8]
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001bb8:	680d      	ldr	r5, [r1, #0]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001bba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001bbe:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8001bc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8001bc4:	4a28      	ldr	r2, [pc, #160]	; (8001c68 <TIM_Base_SetConfig+0x120>)
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001bc6:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001bc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001bcc:	4323      	orrs	r3, r4
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8001bce:	4290      	cmp	r0, r2
  TIMx->CR1 = tmpcr1;
 8001bd0:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001bd2:	62c7      	str	r7, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001bd4:	6285      	str	r5, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8001bd6:	d00e      	beq.n	8001bf6 <TIM_Base_SetConfig+0xae>
 8001bd8:	4b24      	ldr	r3, [pc, #144]	; (8001c6c <TIM_Base_SetConfig+0x124>)
 8001bda:	4298      	cmp	r0, r3
 8001bdc:	d00b      	beq.n	8001bf6 <TIM_Base_SetConfig+0xae>
 8001bde:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001be2:	4298      	cmp	r0, r3
 8001be4:	d007      	beq.n	8001bf6 <TIM_Base_SetConfig+0xae>
 8001be6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001bea:	4298      	cmp	r0, r3
 8001bec:	d003      	beq.n	8001bf6 <TIM_Base_SetConfig+0xae>
 8001bee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bf2:	4298      	cmp	r0, r3
 8001bf4:	d1d8      	bne.n	8001ba8 <TIM_Base_SetConfig+0x60>
    TIMx->RCR = Structure->RepetitionCounter;
 8001bf6:	690b      	ldr	r3, [r1, #16]
 8001bf8:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	6143      	str	r3, [r0, #20]
}
 8001bfe:	bcf0      	pop	{r4, r5, r6, r7}
 8001c00:	4770      	bx	lr
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c02:	68cc      	ldr	r4, [r1, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c04:	694a      	ldr	r2, [r1, #20]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c0a:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c10:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001c12:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c14:	688b      	ldr	r3, [r1, #8]
 8001c16:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001c18:	680b      	ldr	r3, [r1, #0]
 8001c1a:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8001c1c:	690b      	ldr	r3, [r1, #16]
 8001c1e:	6303      	str	r3, [r0, #48]	; 0x30
 8001c20:	e7eb      	b.n	8001bfa <TIM_Base_SetConfig+0xb2>
    tmpcr1 |= Structure->CounterMode;
 8001c22:	684d      	ldr	r5, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c24:	68cc      	ldr	r4, [r1, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c26:	694a      	ldr	r2, [r1, #20]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001c2c:	432b      	orrs	r3, r5
 8001c2e:	e7ea      	b.n	8001c06 <TIM_Base_SetConfig+0xbe>
 8001c30:	684e      	ldr	r6, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c32:	68cc      	ldr	r4, [r1, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c34:	694a      	ldr	r2, [r1, #20]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c36:	688f      	ldr	r7, [r1, #8]
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001c38:	680d      	ldr	r5, [r1, #0]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001c3e:	4333      	orrs	r3, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c44:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c4a:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001c4c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c4e:	62c7      	str	r7, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001c50:	6285      	str	r5, [r0, #40]	; 0x28
 8001c52:	e7c1      	b.n	8001bd8 <TIM_Base_SetConfig+0x90>
    tmpcr1 |= Structure->CounterMode;
 8001c54:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	e790      	b.n	8001b80 <TIM_Base_SetConfig+0x38>
 8001c5e:	bf00      	nop
 8001c60:	40012c00 	.word	0x40012c00
 8001c64:	40014400 	.word	0x40014400
 8001c68:	40013400 	.word	0x40013400
 8001c6c:	40014000 	.word	0x40014000

08001c70 <HAL_TIM_Base_Init>:
  if(htim == NULL)
 8001c70:	b1b8      	cbz	r0, 8001ca2 <HAL_TIM_Base_Init+0x32>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001c72:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{ 
 8001c76:	b510      	push	{r4, lr}
  if(htim->State == HAL_TIM_STATE_RESET)
 8001c78:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001c7c:	4604      	mov	r4, r0
 8001c7e:	b15b      	cbz	r3, 8001c98 <HAL_TIM_Base_Init+0x28>
  htim->State= HAL_TIM_STATE_BUSY;
 8001c80:	2302      	movs	r3, #2
 8001c82:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001c86:	6820      	ldr	r0, [r4, #0]
 8001c88:	1d21      	adds	r1, r4, #4
 8001c8a:	f7ff ff5d 	bl	8001b48 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001c94:	2000      	movs	r0, #0
 8001c96:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8001c98:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001c9c:	f000 fefa 	bl	8002a94 <HAL_TIM_Base_MspInit>
 8001ca0:	e7ee      	b.n	8001c80 <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 8001ca2:	2001      	movs	r0, #1
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop

08001ca8 <HAL_TIMEx_CommutationCallback>:
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop

08001cac <HAL_TIMEx_BreakCallback>:
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop

08001cb0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop

08001cb4 <HAL_UART_Transmit_DMA>:
  *       DMA half transfer complete, DMA transfer complete and DMA transfer
  *       error interrupts are enabled
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Check if UART instance supports continuous communication using DMA */
  assert_param(IS_UART_DMA_INSTANCE(huart->Instance));

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8001cb6:	f890 4069 	ldrb.w	r4, [r0, #105]	; 0x69
 8001cba:	2c20      	cmp	r4, #32
 8001cbc:	d001      	beq.n	8001cc2 <HAL_UART_Transmit_DMA+0xe>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001cbe:	2002      	movs	r0, #2
  }
}
 8001cc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((pData == NULL ) || (Size == 0U))
 8001cc2:	b361      	cbz	r1, 8001d1e <HAL_UART_Transmit_DMA+0x6a>
 8001cc4:	b35a      	cbz	r2, 8001d1e <HAL_UART_Transmit_DMA+0x6a>
    __HAL_LOCK(huart);
 8001cc6:	f890 4068 	ldrb.w	r4, [r0, #104]	; 0x68
 8001cca:	2c01      	cmp	r4, #1
 8001ccc:	d0f7      	beq.n	8001cbe <HAL_UART_Transmit_DMA+0xa>
 8001cce:	4604      	mov	r4, r0
 8001cd0:	2601      	movs	r6, #1
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8001cd2:	6e00      	ldr	r0, [r0, #96]	; 0x60
    __HAL_LOCK(huart);
 8001cd4:	f884 6068 	strb.w	r6, [r4, #104]	; 0x68
 8001cd8:	4613      	mov	r3, r2
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cda:	2500      	movs	r5, #0
    HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size);
 8001cdc:	6822      	ldr	r2, [r4, #0]
    huart->TxXferCount = Size;
 8001cde:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001ce2:	2621      	movs	r6, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ce4:	66e5      	str	r5, [r4, #108]	; 0x6c
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8001ce6:	f8df e044 	ldr.w	lr, [pc, #68]	; 8001d2c <HAL_UART_Transmit_DMA+0x78>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001cea:	f884 6069 	strb.w	r6, [r4, #105]	; 0x69
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8001cee:	4f0d      	ldr	r7, [pc, #52]	; (8001d24 <HAL_UART_Transmit_DMA+0x70>)
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8001cf0:	4e0d      	ldr	r6, [pc, #52]	; (8001d28 <HAL_UART_Transmit_DMA+0x74>)
    huart->TxXferSize = Size;
 8001cf2:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
    huart->pTxBuffPtr = pData;
 8001cf6:	64e1      	str	r1, [r4, #76]	; 0x4c
    HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size);
 8001cf8:	3228      	adds	r2, #40	; 0x28
    huart->hdmatx->XferAbortCallback = NULL;
 8001cfa:	6345      	str	r5, [r0, #52]	; 0x34
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8001cfc:	f8c0 e028 	str.w	lr, [r0, #40]	; 0x28
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8001d00:	62c7      	str	r7, [r0, #44]	; 0x2c
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8001d02:	6306      	str	r6, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size);
 8001d04:	f7fe ff32 	bl	8000b6c <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8001d08:	6823      	ldr	r3, [r4, #0]
 8001d0a:	2240      	movs	r2, #64	; 0x40
 8001d0c:	621a      	str	r2, [r3, #32]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001d0e:	689a      	ldr	r2, [r3, #8]
    __HAL_UNLOCK(huart);
 8001d10:	f884 5068 	strb.w	r5, [r4, #104]	; 0x68
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001d14:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    return HAL_OK;
 8001d18:	4628      	mov	r0, r5
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001d1a:	609a      	str	r2, [r3, #8]
    return HAL_OK;
 8001d1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8001d1e:	2001      	movs	r0, #1
 8001d20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d22:	bf00      	nop
 8001d24:	08001de9 	.word	0x08001de9
 8001d28:	08001e41 	.word	0x08001e41
 8001d2c:	08001db9 	.word	0x08001db9

08001d30 <HAL_UART_Receive_DMA>:
  *       DMA half transfer complete, DMA transfer complete and DMA transfer
  *       error interrupts are enabled
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Check if UART instance supports continuous communication using DMA */
  assert_param(IS_UART_DMA_INSTANCE(huart->Instance));

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 8001d32:	f890 406a 	ldrb.w	r4, [r0, #106]	; 0x6a
 8001d36:	2c20      	cmp	r4, #32
 8001d38:	d001      	beq.n	8001d3e <HAL_UART_Receive_DMA+0xe>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001d3a:	2002      	movs	r0, #2
  }
}
 8001d3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((pData == NULL ) || (Size == 0U))
 8001d3e:	2900      	cmp	r1, #0
 8001d40:	d030      	beq.n	8001da4 <HAL_UART_Receive_DMA+0x74>
 8001d42:	2a00      	cmp	r2, #0
 8001d44:	d02e      	beq.n	8001da4 <HAL_UART_Receive_DMA+0x74>
    __HAL_LOCK(huart);
 8001d46:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d0f5      	beq.n	8001d3a <HAL_UART_Receive_DMA+0xa>
 8001d4e:	4604      	mov	r4, r0
 8001d50:	2701      	movs	r7, #1
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8001d52:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8001d54:	4e14      	ldr	r6, [pc, #80]	; (8001da8 <HAL_UART_Receive_DMA+0x78>)
    __HAL_LOCK(huart);
 8001d56:	f884 7068 	strb.w	r7, [r4, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d5a:	2500      	movs	r5, #0
 8001d5c:	4613      	mov	r3, r2
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001d5e:	2722      	movs	r7, #34	; 0x22
 8001d60:	460a      	mov	r2, r1
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size);
 8001d62:	6821      	ldr	r1, [r4, #0]
    huart->pRxBuffPtr = pData;
 8001d64:	6562      	str	r2, [r4, #84]	; 0x54
    huart->RxXferSize = Size;
 8001d66:	f8a4 3058 	strh.w	r3, [r4, #88]	; 0x58
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d6a:	66e5      	str	r5, [r4, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001d6c:	f884 706a 	strb.w	r7, [r4, #106]	; 0x6a
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8001d70:	4f0e      	ldr	r7, [pc, #56]	; (8001dac <HAL_UART_Receive_DMA+0x7c>)
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8001d72:	6286      	str	r6, [r0, #40]	; 0x28
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8001d74:	4e0e      	ldr	r6, [pc, #56]	; (8001db0 <HAL_UART_Receive_DMA+0x80>)
    huart->hdmarx->XferAbortCallback = NULL;
 8001d76:	6345      	str	r5, [r0, #52]	; 0x34
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8001d78:	62c7      	str	r7, [r0, #44]	; 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8001d7a:	6306      	str	r6, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size);
 8001d7c:	3124      	adds	r1, #36	; 0x24
 8001d7e:	f7fe fef5 	bl	8000b6c <HAL_DMA_Start_IT>
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001d82:	6823      	ldr	r3, [r4, #0]
    __HAL_UNLOCK(huart);
 8001d84:	f884 5068 	strb.w	r5, [r4, #104]	; 0x68
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d8e:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d90:	689a      	ldr	r2, [r3, #8]
 8001d92:	f042 0201 	orr.w	r2, r2, #1
 8001d96:	609a      	str	r2, [r3, #8]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001d98:	689a      	ldr	r2, [r3, #8]
 8001d9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    return HAL_OK;
 8001d9e:	4628      	mov	r0, r5
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001da0:	609a      	str	r2, [r3, #8]
    return HAL_OK;
 8001da2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8001da4:	2001      	movs	r0, #1
 8001da6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001da8:	08001df5 	.word	0x08001df5
 8001dac:	08001e31 	.word	0x08001e31
 8001db0:	08001e41 	.word	0x08001e41

08001db4 <HAL_UART_TxCpltCallback>:
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop

08001db8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8001db8:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8001dba:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8001dbc:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f013 0320 	ands.w	r3, r3, #32
 8001dc4:	d10b      	bne.n	8001dde <UART_DMATransmitCplt+0x26>
  {
    huart->TxXferCount = 0U;

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001dc6:	6802      	ldr	r2, [r0, #0]
    huart->TxXferCount = 0U;
 8001dc8:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001dcc:	6893      	ldr	r3, [r2, #8]
 8001dce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001dd2:	6093      	str	r3, [r2, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001dd4:	6813      	ldr	r3, [r2, #0]
 8001dd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001dda:	6013      	str	r3, [r2, #0]
 8001ddc:	bd08      	pop	{r3, pc}
  }
  /* DMA Circular mode */
  else
  {
    HAL_UART_TxCpltCallback(huart);
 8001dde:	f7ff ffe9 	bl	8001db4 <HAL_UART_TxCpltCallback>
 8001de2:	bd08      	pop	{r3, pc}

08001de4 <HAL_UART_TxHalfCpltCallback>:
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop

08001de8 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8001de8:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);

  HAL_UART_TxHalfCpltCallback(huart);
 8001dea:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001dec:	f7ff fffa 	bl	8001de4 <HAL_UART_TxHalfCpltCallback>
 8001df0:	bd08      	pop	{r3, pc}
 8001df2:	bf00      	nop

08001df4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8001df4:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);

  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8001df6:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8001df8:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f013 0320 	ands.w	r3, r3, #32
 8001e00:	d111      	bne.n	8001e26 <UART_DMAReceiveCplt+0x32>
  {
    huart->RxXferCount = 0U;

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001e02:	6802      	ldr	r2, [r0, #0]
    huart->RxXferCount = 0U;
 8001e04:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001e08:	6813      	ldr	r3, [r2, #0]
 8001e0a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e0e:	6013      	str	r3, [r2, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e10:	6893      	ldr	r3, [r2, #8]
 8001e12:	f023 0301 	bic.w	r3, r3, #1
 8001e16:	6093      	str	r3, [r2, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001e18:	6893      	ldr	r3, [r2, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001e1a:	2120      	movs	r1, #32
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001e1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001e20:	6093      	str	r3, [r2, #8]
    huart->RxState = HAL_UART_STATE_READY;
 8001e22:	f880 106a 	strb.w	r1, [r0, #106]	; 0x6a
  }

  HAL_UART_RxCpltCallback(huart);
 8001e26:	f000 fca5 	bl	8002774 <HAL_UART_RxCpltCallback>
 8001e2a:	bd08      	pop	{r3, pc}

08001e2c <HAL_UART_RxHalfCpltCallback>:
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop

08001e30 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8001e30:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);

  HAL_UART_RxHalfCpltCallback(huart);
 8001e32:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001e34:	f7ff fffa 	bl	8001e2c <HAL_UART_RxHalfCpltCallback>
 8001e38:	bd08      	pop	{r3, pc}
 8001e3a:	bf00      	nop

08001e3c <HAL_UART_ErrorCallback>:
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop

08001e40 <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8001e40:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8001e42:	b508      	push	{r3, lr}

  /* Stop UART DMA Tx request if ongoing */
  if (  (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001e44:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8001e48:	2b21      	cmp	r3, #33	; 0x21
 8001e4a:	d01d      	beq.n	8001e88 <UART_DMAError+0x48>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if (  (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001e4c:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8001e50:	2b22      	cmp	r3, #34	; 0x22
 8001e52:	d006      	beq.n	8001e62 <UART_DMAError+0x22>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8001e54:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8001e56:	f043 0310 	orr.w	r3, r3, #16
 8001e5a:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 8001e5c:	f7ff ffee 	bl	8001e3c <HAL_UART_ErrorCallback>
 8001e60:	bd08      	pop	{r3, pc}
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) )
 8001e62:	6803      	ldr	r3, [r0, #0]
 8001e64:	689a      	ldr	r2, [r3, #8]
 8001e66:	0652      	lsls	r2, r2, #25
 8001e68:	d5f4      	bpl.n	8001e54 <UART_DMAError+0x14>
    huart->RxXferCount = 0U;
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001e76:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e78:	689a      	ldr	r2, [r3, #8]
  huart->RxState = HAL_UART_STATE_READY;
 8001e7a:	2120      	movs	r1, #32
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e7c:	f022 0201 	bic.w	r2, r2, #1
 8001e80:	609a      	str	r2, [r3, #8]
  huart->RxState = HAL_UART_STATE_READY;
 8001e82:	f880 106a 	strb.w	r1, [r0, #106]	; 0x6a
 8001e86:	e7e5      	b.n	8001e54 <UART_DMAError+0x14>
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) )
 8001e88:	6803      	ldr	r3, [r0, #0]
 8001e8a:	689a      	ldr	r2, [r3, #8]
 8001e8c:	0611      	lsls	r1, r2, #24
 8001e8e:	d5dd      	bpl.n	8001e4c <UART_DMAError+0xc>
    huart->TxXferCount = 0U;
 8001e90:	2200      	movs	r2, #0
 8001e92:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8001e96:	681a      	ldr	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8001e98:	2120      	movs	r1, #32
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8001e9a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8001e9e:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8001ea0:	f880 1069 	strb.w	r1, [r0, #105]	; 0x69
 8001ea4:	e7d2      	b.n	8001e4c <UART_DMAError+0xc>
 8001ea6:	bf00      	nop

08001ea8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001ea8:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8001eaa:	6a43      	ldr	r3, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 8001eac:	2200      	movs	r2, #0
 8001eae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;

  HAL_UART_ErrorCallback(huart);
 8001eb2:	4618      	mov	r0, r3
  huart->TxXferCount = 0U;
 8001eb4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 8001eb8:	f7ff ffc0 	bl	8001e3c <HAL_UART_ErrorCallback>
 8001ebc:	bd08      	pop	{r3, pc}
 8001ebe:	bf00      	nop

08001ec0 <UART_SetConfig>:
{
 8001ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001ec2:	6804      	ldr	r4, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001ec4:	6907      	ldr	r7, [r0, #16]
 8001ec6:	6883      	ldr	r3, [r0, #8]
 8001ec8:	6946      	ldr	r6, [r0, #20]
 8001eca:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001ecc:	4a8d      	ldr	r2, [pc, #564]	; (8002104 <UART_SetConfig+0x244>)
{
 8001ece:	4605      	mov	r5, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001ed0:	433b      	orrs	r3, r7
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001ed2:	6820      	ldr	r0, [r4, #0]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001ed4:	6a2f      	ldr	r7, [r5, #32]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001ed6:	4333      	orrs	r3, r6
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001ed8:	4002      	ands	r2, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001eda:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001edc:	4313      	orrs	r3, r2
 8001ede:	6023      	str	r3, [r4, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001ee0:	6862      	ldr	r2, [r4, #4]
 8001ee2:	68ee      	ldr	r6, [r5, #12]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001ee4:	69ab      	ldr	r3, [r5, #24]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001ee6:	4888      	ldr	r0, [pc, #544]	; (8002108 <UART_SetConfig+0x248>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001ee8:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001eec:	4332      	orrs	r2, r6
 8001eee:	6062      	str	r2, [r4, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001ef0:	68a2      	ldr	r2, [r4, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001ef2:	433b      	orrs	r3, r7
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001ef4:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8001ef8:	4313      	orrs	r3, r2
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001efa:	4284      	cmp	r4, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001efc:	60a3      	str	r3, [r4, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001efe:	d03f      	beq.n	8001f80 <UART_SetConfig+0xc0>
 8001f00:	4b82      	ldr	r3, [pc, #520]	; (800210c <UART_SetConfig+0x24c>)
 8001f02:	429c      	cmp	r4, r3
 8001f04:	d05e      	beq.n	8001fc4 <UART_SetConfig+0x104>
 8001f06:	4b82      	ldr	r3, [pc, #520]	; (8002110 <UART_SetConfig+0x250>)
 8001f08:	429c      	cmp	r4, r3
 8001f0a:	d06b      	beq.n	8001fe4 <UART_SetConfig+0x124>
 8001f0c:	4b81      	ldr	r3, [pc, #516]	; (8002114 <UART_SetConfig+0x254>)
 8001f0e:	429c      	cmp	r4, r3
 8001f10:	d01a      	beq.n	8001f48 <UART_SetConfig+0x88>
 8001f12:	4b81      	ldr	r3, [pc, #516]	; (8002118 <UART_SetConfig+0x258>)
 8001f14:	429c      	cmp	r4, r3
 8001f16:	d005      	beq.n	8001f24 <UART_SetConfig+0x64>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001f18:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001f1c:	f000 80ca 	beq.w	80020b4 <UART_SetConfig+0x1f4>
        ret = HAL_ERROR;
 8001f20:	2001      	movs	r0, #1
  return ret;
 8001f22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001f24:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 8001f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2a:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8001f2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f32:	f000 8085 	beq.w	8002040 <UART_SetConfig+0x180>
 8001f36:	d910      	bls.n	8001f5a <UART_SetConfig+0x9a>
 8001f38:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001f3c:	d05e      	beq.n	8001ffc <UART_SetConfig+0x13c>
 8001f3e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001f42:	f000 808a 	beq.w	800205a <UART_SetConfig+0x19a>
 8001f46:	e7e7      	b.n	8001f18 <UART_SetConfig+0x58>
 8001f48:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001f52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f56:	d05e      	beq.n	8002016 <UART_SetConfig+0x156>
 8001f58:	d878      	bhi.n	800204c <UART_SetConfig+0x18c>
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d1dc      	bne.n	8001f18 <UART_SetConfig+0x58>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001f5e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001f62:	d102      	bne.n	8001f6a <UART_SetConfig+0xaa>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001f64:	f7ff fb8e 	bl	8001684 <HAL_RCC_GetPCLK1Freq>
 8001f68:	e05a      	b.n	8002020 <UART_SetConfig+0x160>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001f6a:	f7ff fb8b 	bl	8001684 <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001f6e:	686b      	ldr	r3, [r5, #4]
 8001f70:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8001f74:	fbb0 f0f3 	udiv	r0, r0, r3
 8001f78:	b280      	uxth	r0, r0
 8001f7a:	60e0      	str	r0, [r4, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001f7c:	2000      	movs	r0, #0
        break;
 8001f7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001f80:	4b66      	ldr	r3, [pc, #408]	; (800211c <UART_SetConfig+0x25c>)
 8001f82:	4a67      	ldr	r2, [pc, #412]	; (8002120 <UART_SetConfig+0x260>)
 8001f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f86:	f003 0303 	and.w	r3, r3, #3
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001f8a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001f8e:	5cd3      	ldrb	r3, [r2, r3]
 8001f90:	f040 8093 	bne.w	80020ba <UART_SetConfig+0x1fa>
    switch (clocksource)
 8001f94:	2b08      	cmp	r3, #8
 8001f96:	f200 808d 	bhi.w	80020b4 <UART_SetConfig+0x1f4>
 8001f9a:	a201      	add	r2, pc, #4	; (adr r2, 8001fa0 <UART_SetConfig+0xe0>)
 8001f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fa0:	08001f65 	.word	0x08001f65
 8001fa4:	08002079 	.word	0x08002079
 8001fa8:	080020a3 	.word	0x080020a3
 8001fac:	080020b5 	.word	0x080020b5
 8001fb0:	0800201d 	.word	0x0800201d
 8001fb4:	080020b5 	.word	0x080020b5
 8001fb8:	080020b5 	.word	0x080020b5
 8001fbc:	080020b5 	.word	0x080020b5
 8001fc0:	08002087 	.word	0x08002087
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001fc4:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fd2:	d020      	beq.n	8002016 <UART_SetConfig+0x156>
 8001fd4:	d9c1      	bls.n	8001f5a <UART_SetConfig+0x9a>
 8001fd6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001fda:	d00f      	beq.n	8001ffc <UART_SetConfig+0x13c>
 8001fdc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001fe0:	d03b      	beq.n	800205a <UART_SetConfig+0x19a>
 8001fe2:	e799      	b.n	8001f18 <UART_SetConfig+0x58>
 8001fe4:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fea:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8001fee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001ff2:	d010      	beq.n	8002016 <UART_SetConfig+0x156>
 8001ff4:	d9b1      	bls.n	8001f5a <UART_SetConfig+0x9a>
 8001ff6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001ffa:	d140      	bne.n	800207e <UART_SetConfig+0x1be>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ffc:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002000:	d041      	beq.n	8002086 <UART_SetConfig+0x1c6>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002002:	686a      	ldr	r2, [r5, #4]
 8002004:	0853      	lsrs	r3, r2, #1
 8002006:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800200a:	fbb3 f3f2 	udiv	r3, r3, r2
 800200e:	b29b      	uxth	r3, r3
 8002010:	60e3      	str	r3, [r4, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002012:	2000      	movs	r0, #0
        break;
 8002014:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002016:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800201a:	d114      	bne.n	8002046 <UART_SetConfig+0x186>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800201c:	f7ff fa36 	bl	800148c <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002020:	686a      	ldr	r2, [r5, #4]
 8002022:	682c      	ldr	r4, [r5, #0]
 8002024:	0853      	lsrs	r3, r2, #1
 8002026:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800202a:	fbb0 f0f2 	udiv	r0, r0, r2
 800202e:	f3c0 0342 	ubfx	r3, r0, #1, #3
 8002032:	f020 000f 	bic.w	r0, r0, #15
 8002036:	4303      	orrs	r3, r0
 8002038:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800203a:	2000      	movs	r0, #0
    huart->Instance->BRR = brrtemp;
 800203c:	60e3      	str	r3, [r4, #12]
 800203e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002040:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002044:	d0ea      	beq.n	800201c <UART_SetConfig+0x15c>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002046:	f7ff fa21 	bl	800148c <HAL_RCC_GetSysClockFreq>
 800204a:	e790      	b.n	8001f6e <UART_SetConfig+0xae>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800204c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002050:	d0d4      	beq.n	8001ffc <UART_SetConfig+0x13c>
 8002052:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002056:	f47f af5f 	bne.w	8001f18 <UART_SetConfig+0x58>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800205a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800205e:	d020      	beq.n	80020a2 <UART_SetConfig+0x1e2>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002060:	686a      	ldr	r2, [r5, #4]
 8002062:	0853      	lsrs	r3, r2, #1
 8002064:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8002068:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800206c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002070:	b29b      	uxth	r3, r3
 8002072:	60e3      	str	r3, [r4, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002074:	2000      	movs	r0, #0
        break;
 8002076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002078:	f7ff fb1c 	bl	80016b4 <HAL_RCC_GetPCLK2Freq>
 800207c:	e7d0      	b.n	8002020 <UART_SetConfig+0x160>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800207e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002082:	d0ea      	beq.n	800205a <UART_SetConfig+0x19a>
 8002084:	e748      	b.n	8001f18 <UART_SetConfig+0x58>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002086:	686b      	ldr	r3, [r5, #4]
 8002088:	085a      	lsrs	r2, r3, #1
 800208a:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 800208e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002092:	f3c2 0342 	ubfx	r3, r2, #1, #3
 8002096:	f022 020f 	bic.w	r2, r2, #15
 800209a:	4313      	orrs	r3, r2
 800209c:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800209e:	2000      	movs	r0, #0
        break;
 80020a0:	e7cc      	b.n	800203c <UART_SetConfig+0x17c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80020a2:	686a      	ldr	r2, [r5, #4]
 80020a4:	0853      	lsrs	r3, r2, #1
 80020a6:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80020aa:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80020ae:	fbb3 f2f2 	udiv	r2, r3, r2
 80020b2:	e7ee      	b.n	8002092 <UART_SetConfig+0x1d2>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80020b4:	2300      	movs	r3, #0
        ret = HAL_ERROR;
 80020b6:	2001      	movs	r0, #1
 80020b8:	e7c0      	b.n	800203c <UART_SetConfig+0x17c>
    switch (clocksource)
 80020ba:	2b08      	cmp	r3, #8
 80020bc:	f63f af30 	bhi.w	8001f20 <UART_SetConfig+0x60>
 80020c0:	a201      	add	r2, pc, #4	; (adr r2, 80020c8 <UART_SetConfig+0x208>)
 80020c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020c6:	bf00      	nop
 80020c8:	08001f6b 	.word	0x08001f6b
 80020cc:	080020ed 	.word	0x080020ed
 80020d0:	08002061 	.word	0x08002061
 80020d4:	08001f21 	.word	0x08001f21
 80020d8:	08002047 	.word	0x08002047
 80020dc:	08001f21 	.word	0x08001f21
 80020e0:	08001f21 	.word	0x08001f21
 80020e4:	08001f21 	.word	0x08001f21
 80020e8:	08002003 	.word	0x08002003
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80020ec:	f7ff fae2 	bl	80016b4 <HAL_RCC_GetPCLK2Freq>
 80020f0:	686b      	ldr	r3, [r5, #4]
 80020f2:	4a05      	ldr	r2, [pc, #20]	; (8002108 <UART_SetConfig+0x248>)
 80020f4:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80020f8:	fbb0 f0f3 	udiv	r0, r0, r3
 80020fc:	b280      	uxth	r0, r0
 80020fe:	60d0      	str	r0, [r2, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002100:	2000      	movs	r0, #0
        break;
 8002102:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002104:	efff69f3 	.word	0xefff69f3
 8002108:	40013800 	.word	0x40013800
 800210c:	40004400 	.word	0x40004400
 8002110:	40004800 	.word	0x40004800
 8002114:	40004c00 	.word	0x40004c00
 8002118:	40005000 	.word	0x40005000
 800211c:	40021000 	.word	0x40021000
 8002120:	08002cc0 	.word	0x08002cc0

08002124 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002124:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002126:	07da      	lsls	r2, r3, #31
{
 8002128:	b410      	push	{r4}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800212a:	d506      	bpl.n	800213a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800212c:	6801      	ldr	r1, [r0, #0]
 800212e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8002130:	684a      	ldr	r2, [r1, #4]
 8002132:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002136:	4322      	orrs	r2, r4
 8002138:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800213a:	079c      	lsls	r4, r3, #30
 800213c:	d506      	bpl.n	800214c <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800213e:	6801      	ldr	r1, [r0, #0]
 8002140:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002142:	684a      	ldr	r2, [r1, #4]
 8002144:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002148:	4322      	orrs	r2, r4
 800214a:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800214c:	0759      	lsls	r1, r3, #29
 800214e:	d506      	bpl.n	800215e <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002150:	6801      	ldr	r1, [r0, #0]
 8002152:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002154:	684a      	ldr	r2, [r1, #4]
 8002156:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800215a:	4322      	orrs	r2, r4
 800215c:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800215e:	071a      	lsls	r2, r3, #28
 8002160:	d506      	bpl.n	8002170 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002162:	6801      	ldr	r1, [r0, #0]
 8002164:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002166:	684a      	ldr	r2, [r1, #4]
 8002168:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800216c:	4322      	orrs	r2, r4
 800216e:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002170:	06dc      	lsls	r4, r3, #27
 8002172:	d506      	bpl.n	8002182 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002174:	6801      	ldr	r1, [r0, #0]
 8002176:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002178:	688a      	ldr	r2, [r1, #8]
 800217a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800217e:	4322      	orrs	r2, r4
 8002180:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002182:	0699      	lsls	r1, r3, #26
 8002184:	d506      	bpl.n	8002194 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002186:	6801      	ldr	r1, [r0, #0]
 8002188:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800218a:	688a      	ldr	r2, [r1, #8]
 800218c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002190:	4322      	orrs	r2, r4
 8002192:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002194:	065a      	lsls	r2, r3, #25
 8002196:	d509      	bpl.n	80021ac <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002198:	6801      	ldr	r1, [r0, #0]
 800219a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800219c:	684a      	ldr	r2, [r1, #4]
 800219e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80021a2:	4322      	orrs	r2, r4
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80021a4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80021a8:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80021aa:	d00b      	beq.n	80021c4 <UART_AdvFeatureConfig+0xa0>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80021ac:	061b      	lsls	r3, r3, #24
 80021ae:	d506      	bpl.n	80021be <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80021b0:	6802      	ldr	r2, [r0, #0]
 80021b2:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80021b4:	6853      	ldr	r3, [r2, #4]
 80021b6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80021ba:	430b      	orrs	r3, r1
 80021bc:	6053      	str	r3, [r2, #4]
}
 80021be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80021c2:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80021c4:	684a      	ldr	r2, [r1, #4]
 80021c6:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80021c8:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80021cc:	4322      	orrs	r2, r4
 80021ce:	604a      	str	r2, [r1, #4]
 80021d0:	e7ec      	b.n	80021ac <UART_AdvFeatureConfig+0x88>
 80021d2:	bf00      	nop

080021d4 <UART_WaitOnFlagUntilTimeout>:
{
 80021d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80021d8:	9d08      	ldr	r5, [sp, #32]
 80021da:	4680      	mov	r8, r0
 80021dc:	460f      	mov	r7, r1
 80021de:	4616      	mov	r6, r2
 80021e0:	4699      	mov	r9, r3
 80021e2:	f8d8 4000 	ldr.w	r4, [r8]
 80021e6:	e001      	b.n	80021ec <UART_WaitOnFlagUntilTimeout+0x18>
    if(Timeout != HAL_MAX_DELAY)
 80021e8:	1c6b      	adds	r3, r5, #1
 80021ea:	d10a      	bne.n	8002202 <UART_WaitOnFlagUntilTimeout+0x2e>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80021ec:	69e0      	ldr	r0, [r4, #28]
 80021ee:	ea37 0300 	bics.w	r3, r7, r0
 80021f2:	bf0c      	ite	eq
 80021f4:	2001      	moveq	r0, #1
 80021f6:	2000      	movne	r0, #0
 80021f8:	42b0      	cmp	r0, r6
 80021fa:	d0f5      	beq.n	80021e8 <UART_WaitOnFlagUntilTimeout+0x14>
  return HAL_OK;
 80021fc:	2000      	movs	r0, #0
}
 80021fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002202:	b13d      	cbz	r5, 8002214 <UART_WaitOnFlagUntilTimeout+0x40>
 8002204:	f7fe f816 	bl	8000234 <HAL_GetTick>
 8002208:	eba0 0009 	sub.w	r0, r0, r9
 800220c:	4285      	cmp	r5, r0
 800220e:	d2e8      	bcs.n	80021e2 <UART_WaitOnFlagUntilTimeout+0xe>
 8002210:	f8d8 4000 	ldr.w	r4, [r8]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002214:	6823      	ldr	r3, [r4, #0]
 8002216:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800221a:	6023      	str	r3, [r4, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800221c:	68a3      	ldr	r3, [r4, #8]
        huart->gState  = HAL_UART_STATE_READY;
 800221e:	2220      	movs	r2, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002220:	f023 0301 	bic.w	r3, r3, #1
        __HAL_UNLOCK(huart);
 8002224:	2100      	movs	r1, #0
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002226:	60a3      	str	r3, [r4, #8]
        __HAL_UNLOCK(huart);
 8002228:	2003      	movs	r0, #3
        huart->gState  = HAL_UART_STATE_READY;
 800222a:	f888 2069 	strb.w	r2, [r8, #105]	; 0x69
        __HAL_UNLOCK(huart);
 800222e:	f888 1068 	strb.w	r1, [r8, #104]	; 0x68
        huart->RxState = HAL_UART_STATE_READY;
 8002232:	f888 206a 	strb.w	r2, [r8, #106]	; 0x6a
 8002236:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800223a:	bf00      	nop

0800223c <UART_CheckIdleState>:
{
 800223c:	b570      	push	{r4, r5, r6, lr}
 800223e:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002240:	2500      	movs	r5, #0
{
 8002242:	b082      	sub	sp, #8
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002244:	66c5      	str	r5, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8002246:	f7fd fff5 	bl	8000234 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800224a:	6823      	ldr	r3, [r4, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	0712      	lsls	r2, r2, #28
  tickstart = HAL_GetTick();
 8002250:	4606      	mov	r6, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002252:	d40c      	bmi.n	800226e <UART_CheckIdleState+0x32>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	075b      	lsls	r3, r3, #29
 8002258:	d417      	bmi.n	800228a <UART_CheckIdleState+0x4e>
  huart->gState  = HAL_UART_STATE_READY;
 800225a:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 800225c:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 800225e:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 8002262:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 8002266:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
}
 800226a:	b002      	add	sp, #8
 800226c:	bd70      	pop	{r4, r5, r6, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800226e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002272:	9300      	str	r3, [sp, #0]
 8002274:	462a      	mov	r2, r5
 8002276:	4603      	mov	r3, r0
 8002278:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800227c:	4620      	mov	r0, r4
 800227e:	f7ff ffa9 	bl	80021d4 <UART_WaitOnFlagUntilTimeout>
 8002282:	b180      	cbz	r0, 80022a6 <UART_CheckIdleState+0x6a>
      return HAL_TIMEOUT;
 8002284:	2003      	movs	r0, #3
}
 8002286:	b002      	add	sp, #8
 8002288:	bd70      	pop	{r4, r5, r6, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800228a:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 800228e:	9200      	str	r2, [sp, #0]
 8002290:	4633      	mov	r3, r6
 8002292:	2200      	movs	r2, #0
 8002294:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002298:	4620      	mov	r0, r4
 800229a:	f7ff ff9b 	bl	80021d4 <UART_WaitOnFlagUntilTimeout>
 800229e:	2800      	cmp	r0, #0
 80022a0:	d0db      	beq.n	800225a <UART_CheckIdleState+0x1e>
      return HAL_TIMEOUT;
 80022a2:	2003      	movs	r0, #3
 80022a4:	e7ef      	b.n	8002286 <UART_CheckIdleState+0x4a>
 80022a6:	6823      	ldr	r3, [r4, #0]
 80022a8:	e7d4      	b.n	8002254 <UART_CheckIdleState+0x18>
 80022aa:	bf00      	nop

080022ac <HAL_UART_Init>:
  if(huart == NULL)
 80022ac:	b390      	cbz	r0, 8002314 <HAL_UART_Init+0x68>
  if(huart->gState == HAL_UART_STATE_RESET)
 80022ae:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
{
 80022b2:	b510      	push	{r4, lr}
  if(huart->gState == HAL_UART_STATE_RESET)
 80022b4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80022b8:	4604      	mov	r4, r0
 80022ba:	b303      	cbz	r3, 80022fe <HAL_UART_Init+0x52>
  __HAL_UART_DISABLE(huart);
 80022bc:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80022be:	2324      	movs	r3, #36	; 0x24
 80022c0:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 80022c4:	6813      	ldr	r3, [r2, #0]
 80022c6:	f023 0301 	bic.w	r3, r3, #1
 80022ca:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80022cc:	4620      	mov	r0, r4
 80022ce:	f7ff fdf7 	bl	8001ec0 <UART_SetConfig>
 80022d2:	2801      	cmp	r0, #1
 80022d4:	d018      	beq.n	8002308 <HAL_UART_Init+0x5c>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80022d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80022d8:	b9c3      	cbnz	r3, 800230c <HAL_UART_Init+0x60>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022da:	6823      	ldr	r3, [r4, #0]
 80022dc:	685a      	ldr	r2, [r3, #4]
 80022de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80022e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022e4:	689a      	ldr	r2, [r3, #8]
 80022e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80022ea:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 80022f2:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 80022f4:	601a      	str	r2, [r3, #0]
}
 80022f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 80022fa:	f7ff bf9f 	b.w	800223c <UART_CheckIdleState>
    huart->Lock = HAL_UNLOCKED;
 80022fe:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 8002302:	f000 fc0b 	bl	8002b1c <HAL_UART_MspInit>
 8002306:	e7d9      	b.n	80022bc <HAL_UART_Init+0x10>
}
 8002308:	2001      	movs	r0, #1
 800230a:	bd10      	pop	{r4, pc}
    UART_AdvFeatureConfig(huart);
 800230c:	4620      	mov	r0, r4
 800230e:	f7ff ff09 	bl	8002124 <UART_AdvFeatureConfig>
 8002312:	e7e2      	b.n	80022da <HAL_UART_Init+0x2e>
}
 8002314:	2001      	movs	r0, #1
 8002316:	4770      	bx	lr

08002318 <UART_Transmit_IT>:
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002318:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 800231c:	2b21      	cmp	r3, #33	; 0x21
 800231e:	d001      	beq.n	8002324 <UART_Transmit_IT+0xc>
      return HAL_OK;
    }
  }
  else
  {
    return HAL_BUSY;
 8002320:	2002      	movs	r0, #2
  }
}
 8002322:	4770      	bx	lr
    if(huart->TxXferCount == 0U)
 8002324:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8002328:	b29b      	uxth	r3, r3
 800232a:	b18b      	cbz	r3, 8002350 <UART_Transmit_IT+0x38>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800232c:	6883      	ldr	r3, [r0, #8]
 800232e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002332:	d018      	beq.n	8002366 <UART_Transmit_IT+0x4e>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 8002334:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8002336:	6802      	ldr	r2, [r0, #0]
 8002338:	1c59      	adds	r1, r3, #1
 800233a:	64c1      	str	r1, [r0, #76]	; 0x4c
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8002340:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8002344:	3b01      	subs	r3, #1
 8002346:	b29b      	uxth	r3, r3
 8002348:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
      return HAL_OK;
 800234c:	2000      	movs	r0, #0
 800234e:	4770      	bx	lr
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002350:	6802      	ldr	r2, [r0, #0]
 8002352:	6811      	ldr	r1, [r2, #0]
 8002354:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8002358:	6011      	str	r1, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800235a:	6811      	ldr	r1, [r2, #0]
 800235c:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8002360:	4618      	mov	r0, r3
 8002362:	6011      	str	r1, [r2, #0]
 8002364:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002366:	6903      	ldr	r3, [r0, #16]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d1e3      	bne.n	8002334 <UART_Transmit_IT+0x1c>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 800236c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800236e:	6801      	ldr	r1, [r0, #0]
 8002370:	f833 2b02 	ldrh.w	r2, [r3], #2
 8002374:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002378:	850a      	strh	r2, [r1, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800237a:	64c3      	str	r3, [r0, #76]	; 0x4c
 800237c:	e7e0      	b.n	8002340 <UART_Transmit_IT+0x28>
 800237e:	bf00      	nop

08002380 <UART_Receive_IT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002380:	b538      	push	{r3, r4, r5, lr}
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002382:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8002386:	2b22      	cmp	r3, #34	; 0x22
 8002388:	d006      	beq.n	8002398 <UART_Receive_IT+0x18>
    return HAL_OK;
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800238a:	6802      	ldr	r2, [r0, #0]
 800238c:	6993      	ldr	r3, [r2, #24]
 800238e:	f043 0308 	orr.w	r3, r3, #8
 8002392:	6193      	str	r3, [r2, #24]

    return HAL_BUSY;
 8002394:	2002      	movs	r0, #2
 8002396:	bd38      	pop	{r3, r4, r5, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002398:	6803      	ldr	r3, [r0, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800239a:	6882      	ldr	r2, [r0, #8]
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800239c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
  uint16_t  uhMask = huart->Mask;
 800239e:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023a2:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80023a6:	b29b      	uxth	r3, r3
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023a8:	d01d      	beq.n	80023e6 <UART_Receive_IT+0x66>
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 80023aa:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80023ac:	400b      	ands	r3, r1
 80023ae:	1c51      	adds	r1, r2, #1
 80023b0:	6541      	str	r1, [r0, #84]	; 0x54
 80023b2:	7013      	strb	r3, [r2, #0]
    if(--huart->RxXferCount == 0U)
 80023b4:	f8b0 405a 	ldrh.w	r4, [r0, #90]	; 0x5a
 80023b8:	3c01      	subs	r4, #1
 80023ba:	b2a4      	uxth	r4, r4
 80023bc:	f8a0 405a 	strh.w	r4, [r0, #90]	; 0x5a
 80023c0:	b10c      	cbz	r4, 80023c6 <UART_Receive_IT+0x46>
    return HAL_OK;
 80023c2:	2000      	movs	r0, #0
  }
}
 80023c4:	bd38      	pop	{r3, r4, r5, pc}
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80023c6:	6803      	ldr	r3, [r0, #0]
 80023c8:	6819      	ldr	r1, [r3, #0]
 80023ca:	f421 7190 	bic.w	r1, r1, #288	; 0x120
 80023ce:	6019      	str	r1, [r3, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023d0:	6899      	ldr	r1, [r3, #8]
      huart->RxState = HAL_UART_STATE_READY;
 80023d2:	2520      	movs	r5, #32
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023d4:	f021 0101 	bic.w	r1, r1, #1
 80023d8:	6099      	str	r1, [r3, #8]
      huart->RxState = HAL_UART_STATE_READY;
 80023da:	f880 506a 	strb.w	r5, [r0, #106]	; 0x6a
      HAL_UART_RxCpltCallback(huart);
 80023de:	f000 f9c9 	bl	8002774 <HAL_UART_RxCpltCallback>
 80023e2:	4620      	mov	r0, r4
 80023e4:	bd38      	pop	{r3, r4, r5, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023e6:	6902      	ldr	r2, [r0, #16]
 80023e8:	2a00      	cmp	r2, #0
 80023ea:	d1de      	bne.n	80023aa <UART_Receive_IT+0x2a>
      *tmp = (uint16_t)(uhdata & uhMask);
 80023ec:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80023ee:	400b      	ands	r3, r1
 80023f0:	f822 3b02 	strh.w	r3, [r2], #2
      huart->pRxBuffPtr +=2U;
 80023f4:	6542      	str	r2, [r0, #84]	; 0x54
 80023f6:	e7dd      	b.n	80023b4 <UART_Receive_IT+0x34>

080023f8 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80023f8:	6803      	ldr	r3, [r0, #0]
 80023fa:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80023fc:	6819      	ldr	r1, [r3, #0]
{
 80023fe:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 8002400:	0715      	lsls	r5, r2, #28
{
 8002402:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8002404:	d110      	bne.n	8002428 <HAL_UART_IRQHandler+0x30>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002406:	0696      	lsls	r6, r2, #26
 8002408:	d45b      	bmi.n	80024c2 <HAL_UART_IRQHandler+0xca>
  cr3its = READ_REG(huart->Instance->CR3);
 800240a:	6898      	ldr	r0, [r3, #8]
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 800240c:	02d5      	lsls	r5, r2, #11
 800240e:	d501      	bpl.n	8002414 <HAL_UART_IRQHandler+0x1c>
 8002410:	0240      	lsls	r0, r0, #9
 8002412:	d47f      	bmi.n	8002514 <HAL_UART_IRQHandler+0x11c>
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002414:	0616      	lsls	r6, r2, #24
 8002416:	d502      	bpl.n	800241e <HAL_UART_IRQHandler+0x26>
 8002418:	060d      	lsls	r5, r1, #24
 800241a:	f100 808c 	bmi.w	8002536 <HAL_UART_IRQHandler+0x13e>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800241e:	0650      	lsls	r0, r2, #25
 8002420:	d501      	bpl.n	8002426 <HAL_UART_IRQHandler+0x2e>
 8002422:	064a      	lsls	r2, r1, #25
 8002424:	d464      	bmi.n	80024f0 <HAL_UART_IRQHandler+0xf8>
 8002426:	bd70      	pop	{r4, r5, r6, pc}
  cr3its = READ_REG(huart->Instance->CR3);
 8002428:	6898      	ldr	r0, [r3, #8]
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 800242a:	f010 0501 	ands.w	r5, r0, #1
 800242e:	d04e      	beq.n	80024ce <HAL_UART_IRQHandler+0xd6>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002430:	07d6      	lsls	r6, r2, #31
 8002432:	d507      	bpl.n	8002444 <HAL_UART_IRQHandler+0x4c>
 8002434:	05c8      	lsls	r0, r1, #23
 8002436:	d505      	bpl.n	8002444 <HAL_UART_IRQHandler+0x4c>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8002438:	2001      	movs	r0, #1
 800243a:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800243c:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800243e:	f040 0001 	orr.w	r0, r0, #1
 8002442:	66e0      	str	r0, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002444:	0796      	lsls	r6, r2, #30
 8002446:	d548      	bpl.n	80024da <HAL_UART_IRQHandler+0xe2>
 8002448:	b13d      	cbz	r5, 800245a <HAL_UART_IRQHandler+0x62>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 800244a:	2002      	movs	r0, #2
 800244c:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800244e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8002450:	f040 0004 	orr.w	r0, r0, #4
 8002454:	66e0      	str	r0, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002456:	0750      	lsls	r0, r2, #29
 8002458:	d443      	bmi.n	80024e2 <HAL_UART_IRQHandler+0xea>
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 800245a:	0710      	lsls	r0, r2, #28
 800245c:	d503      	bpl.n	8002466 <HAL_UART_IRQHandler+0x6e>
 800245e:	068e      	lsls	r6, r1, #26
 8002460:	d451      	bmi.n	8002506 <HAL_UART_IRQHandler+0x10e>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002462:	2d00      	cmp	r5, #0
 8002464:	d14f      	bne.n	8002506 <HAL_UART_IRQHandler+0x10e>
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002466:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8002468:	2800      	cmp	r0, #0
 800246a:	d0dc      	beq.n	8002426 <HAL_UART_IRQHandler+0x2e>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800246c:	0690      	lsls	r0, r2, #26
 800246e:	d501      	bpl.n	8002474 <HAL_UART_IRQHandler+0x7c>
 8002470:	0689      	lsls	r1, r1, #26
 8002472:	d465      	bmi.n	8002540 <HAL_UART_IRQHandler+0x148>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8002474:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8002476:	0712      	lsls	r2, r2, #28
 8002478:	d403      	bmi.n	8002482 <HAL_UART_IRQHandler+0x8a>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 800247a:	689d      	ldr	r5, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 800247c:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8002480:	d063      	beq.n	800254a <HAL_UART_IRQHandler+0x152>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002488:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800248a:	689a      	ldr	r2, [r3, #8]
  huart->RxState = HAL_UART_STATE_READY;
 800248c:	2120      	movs	r1, #32
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800248e:	f022 0201 	bic.w	r2, r2, #1
 8002492:	609a      	str	r2, [r3, #8]
  huart->RxState = HAL_UART_STATE_READY;
 8002494:	f884 106a 	strb.w	r1, [r4, #106]	; 0x6a
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002498:	689a      	ldr	r2, [r3, #8]
 800249a:	0656      	lsls	r6, r2, #25
 800249c:	d547      	bpl.n	800252e <HAL_UART_IRQHandler+0x136>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800249e:	689a      	ldr	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 80024a0:	6e60      	ldr	r0, [r4, #100]	; 0x64
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80024a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024a6:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 80024a8:	2800      	cmp	r0, #0
 80024aa:	d040      	beq.n	800252e <HAL_UART_IRQHandler+0x136>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80024ac:	4b29      	ldr	r3, [pc, #164]	; (8002554 <HAL_UART_IRQHandler+0x15c>)
 80024ae:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80024b0:	f7fe fb9e 	bl	8000bf0 <HAL_DMA_Abort_IT>
 80024b4:	2800      	cmp	r0, #0
 80024b6:	d0b6      	beq.n	8002426 <HAL_UART_IRQHandler+0x2e>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80024b8:	6e60      	ldr	r0, [r4, #100]	; 0x64
}
 80024ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80024be:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80024c0:	4718      	bx	r3
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80024c2:	068d      	lsls	r5, r1, #26
 80024c4:	d5a1      	bpl.n	800240a <HAL_UART_IRQHandler+0x12>
}
 80024c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 80024ca:	f7ff bf59 	b.w	8002380 <UART_Receive_IT>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 80024ce:	f411 7f90 	tst.w	r1, #288	; 0x120
 80024d2:	d09b      	beq.n	800240c <HAL_UART_IRQHandler+0x14>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80024d4:	07d6      	lsls	r6, r2, #31
 80024d6:	d5b5      	bpl.n	8002444 <HAL_UART_IRQHandler+0x4c>
 80024d8:	e7ac      	b.n	8002434 <HAL_UART_IRQHandler+0x3c>
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024da:	0756      	lsls	r6, r2, #29
 80024dc:	d5bd      	bpl.n	800245a <HAL_UART_IRQHandler+0x62>
 80024de:	2d00      	cmp	r5, #0
 80024e0:	d0bb      	beq.n	800245a <HAL_UART_IRQHandler+0x62>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 80024e2:	2004      	movs	r0, #4
 80024e4:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80024e6:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80024e8:	f040 0002 	orr.w	r0, r0, #2
 80024ec:	66e0      	str	r0, [r4, #108]	; 0x6c
 80024ee:	e7b4      	b.n	800245a <HAL_UART_IRQHandler+0x62>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80024f0:	681a      	ldr	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80024f2:	2120      	movs	r1, #32
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80024f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024f8:	601a      	str	r2, [r3, #0]
  HAL_UART_TxCpltCallback(huart);
 80024fa:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_READY;
 80024fc:	f884 1069 	strb.w	r1, [r4, #105]	; 0x69
  HAL_UART_TxCpltCallback(huart);
 8002500:	f7ff fc58 	bl	8001db4 <HAL_UART_TxCpltCallback>
 8002504:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8002506:	2008      	movs	r0, #8
 8002508:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800250a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800250c:	f040 0008 	orr.w	r0, r0, #8
 8002510:	66e0      	str	r0, [r4, #108]	; 0x6c
 8002512:	e7a8      	b.n	8002466 <HAL_UART_IRQHandler+0x6e>
    huart->gState  = HAL_UART_STATE_READY;
 8002514:	2220      	movs	r2, #32
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 8002516:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 800251a:	6219      	str	r1, [r3, #32]
    HAL_UARTEx_WakeupCallback(huart);
 800251c:	4620      	mov	r0, r4
    huart->gState  = HAL_UART_STATE_READY;
 800251e:	f884 2069 	strb.w	r2, [r4, #105]	; 0x69
    huart->RxState = HAL_UART_STATE_READY;
 8002522:	f884 206a 	strb.w	r2, [r4, #106]	; 0x6a
}
 8002526:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 800252a:	f000 b815 	b.w	8002558 <HAL_UARTEx_WakeupCallback>
            HAL_UART_ErrorCallback(huart);
 800252e:	4620      	mov	r0, r4
 8002530:	f7ff fc84 	bl	8001e3c <HAL_UART_ErrorCallback>
 8002534:	bd70      	pop	{r4, r5, r6, pc}
    UART_Transmit_IT(huart);
 8002536:	4620      	mov	r0, r4
}
 8002538:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    UART_Transmit_IT(huart);
 800253c:	f7ff beec 	b.w	8002318 <UART_Transmit_IT>
        UART_Receive_IT(huart);
 8002540:	4620      	mov	r0, r4
 8002542:	f7ff ff1d 	bl	8002380 <UART_Receive_IT>
 8002546:	6823      	ldr	r3, [r4, #0]
 8002548:	e794      	b.n	8002474 <HAL_UART_IRQHandler+0x7c>
        HAL_UART_ErrorCallback(huart);
 800254a:	4620      	mov	r0, r4
 800254c:	f7ff fc76 	bl	8001e3c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002550:	66e5      	str	r5, [r4, #108]	; 0x6c
 8002552:	bd70      	pop	{r4, r5, r6, pc}
 8002554:	08001ea9 	.word	0x08001ea9

08002558 <HAL_UARTEx_WakeupCallback>:
  * @brief  UART wakeup from Stop mode callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop

0800255c <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 800255c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  hcan.Instance = CAN;
 800255e:	4b11      	ldr	r3, [pc, #68]	; (80025a4 <MX_CAN_Init+0x48>)
 8002560:	4a11      	ldr	r2, [pc, #68]	; (80025a8 <MX_CAN_Init+0x4c>)
 8002562:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 18;
 8002564:	2712      	movs	r7, #18
  hcan.Init.Mode = CAN_MODE_LOOPBACK;
  hcan.Init.SJW = CAN_SJW_4TQ;
  hcan.Init.BS1 = CAN_BS1_4TQ;
  hcan.Init.BS2 = CAN_BS2_3TQ;
  hcan.Init.TTCM = DISABLE;
 8002566:	2200      	movs	r2, #0
  hcan.Init.Mode = CAN_MODE_LOOPBACK;
 8002568:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
  hcan.Init.SJW = CAN_SJW_4TQ;
 800256c:	f04f 7540 	mov.w	r5, #50331648	; 0x3000000
  hcan.Init.BS1 = CAN_BS1_4TQ;
 8002570:	f44f 3440 	mov.w	r4, #196608	; 0x30000
  hcan.Init.BS2 = CAN_BS2_3TQ;
 8002574:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
  hcan.Init.ABOM = DISABLE;
  hcan.Init.AWUM = DISABLE;
  hcan.Init.NART = DISABLE;
  hcan.Init.RFLM = DISABLE;
  hcan.Init.TXFP = DISABLE;
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8002578:	4618      	mov	r0, r3
  hcan.Init.Prescaler = 18;
 800257a:	605f      	str	r7, [r3, #4]
  hcan.Init.Mode = CAN_MODE_LOOPBACK;
 800257c:	609e      	str	r6, [r3, #8]
  hcan.Init.SJW = CAN_SJW_4TQ;
 800257e:	60dd      	str	r5, [r3, #12]
  hcan.Init.BS1 = CAN_BS1_4TQ;
 8002580:	611c      	str	r4, [r3, #16]
  hcan.Init.BS2 = CAN_BS2_3TQ;
 8002582:	6159      	str	r1, [r3, #20]
  hcan.Init.TTCM = DISABLE;
 8002584:	619a      	str	r2, [r3, #24]
  hcan.Init.ABOM = DISABLE;
 8002586:	61da      	str	r2, [r3, #28]
  hcan.Init.AWUM = DISABLE;
 8002588:	621a      	str	r2, [r3, #32]
  hcan.Init.NART = DISABLE;
 800258a:	625a      	str	r2, [r3, #36]	; 0x24
  hcan.Init.RFLM = DISABLE;
 800258c:	629a      	str	r2, [r3, #40]	; 0x28
  hcan.Init.TXFP = DISABLE;
 800258e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8002590:	f7fd fec4 	bl	800031c <HAL_CAN_Init>
 8002594:	b900      	cbnz	r0, 8002598 <MX_CAN_Init+0x3c>
 8002596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  {
    _Error_Handler(__FILE__, __LINE__);
 8002598:	2145      	movs	r1, #69	; 0x45
 800259a:	4804      	ldr	r0, [pc, #16]	; (80025ac <MX_CAN_Init+0x50>)
  }

}
 800259c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    _Error_Handler(__FILE__, __LINE__);
 80025a0:	f000 b9a4 	b.w	80028ec <_Error_Handler>
 80025a4:	2000002c 	.word	0x2000002c
 80025a8:	40006400 	.word	0x40006400
 80025ac:	08002cc4 	.word	0x08002cc4

080025b0 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(canHandle->Instance==CAN)
 80025b0:	6802      	ldr	r2, [r0, #0]
 80025b2:	4b21      	ldr	r3, [pc, #132]	; (8002638 <HAL_CAN_MspInit+0x88>)
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d000      	beq.n	80025ba <HAL_CAN_MspInit+0xa>
 80025b8:	4770      	bx	lr
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80025ba:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
{
 80025be:	b5f0      	push	{r4, r5, r6, r7, lr}
    __HAL_RCC_CAN1_CLK_ENABLE();
 80025c0:	69da      	ldr	r2, [r3, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025c2:	481e      	ldr	r0, [pc, #120]	; (800263c <HAL_CAN_MspInit+0x8c>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 80025c4:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80025c8:	61da      	str	r2, [r3, #28]
 80025ca:	69db      	ldr	r3, [r3, #28]
{
 80025cc:	b087      	sub	sp, #28
    __HAL_RCC_CAN1_CLK_ENABLE();
 80025ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d2:	2400      	movs	r4, #0
    __HAL_RCC_CAN1_CLK_ENABLE();
 80025d4:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025d6:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 80025d8:	2309      	movs	r3, #9
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025da:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80025dc:	f44f 7640 	mov.w	r6, #768	; 0x300
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025e0:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 80025e2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025e4:	9204      	str	r2, [sp, #16]
    __HAL_RCC_CAN1_CLK_ENABLE();
 80025e6:	9f00      	ldr	r7, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80025e8:	9601      	str	r6, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ea:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ec:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025ee:	f7fe fb6f 	bl	8000cd0 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN_TX_IRQn, 0, 0);
 80025f2:	4622      	mov	r2, r4
 80025f4:	4621      	mov	r1, r4
 80025f6:	2013      	movs	r0, #19
 80025f8:	f7fe fa00 	bl	80009fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN_TX_IRQn);
 80025fc:	2013      	movs	r0, #19
 80025fe:	f7fe fa33 	bl	8000a68 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8002602:	4622      	mov	r2, r4
 8002604:	4621      	mov	r1, r4
 8002606:	2014      	movs	r0, #20
 8002608:	f7fe f9f8 	bl	80009fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 800260c:	2014      	movs	r0, #20
 800260e:	f7fe fa2b 	bl	8000a68 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX1_IRQn, 0, 0);
 8002612:	4622      	mov	r2, r4
 8002614:	4621      	mov	r1, r4
 8002616:	2015      	movs	r0, #21
 8002618:	f7fe f9f0 	bl	80009fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX1_IRQn);
 800261c:	2015      	movs	r0, #21
 800261e:	f7fe fa23 	bl	8000a68 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_SCE_IRQn, 0, 0);
 8002622:	4622      	mov	r2, r4
 8002624:	4621      	mov	r1, r4
 8002626:	2016      	movs	r0, #22
 8002628:	f7fe f9e8 	bl	80009fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_SCE_IRQn);
 800262c:	2016      	movs	r0, #22
 800262e:	f7fe fa1b 	bl	8000a68 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 8002632:	b007      	add	sp, #28
 8002634:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002636:	bf00      	nop
 8002638:	40006400 	.word	0x40006400
 800263c:	48000400 	.word	0x48000400

08002640 <MX_DMA_Init>:
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002640:	4b0f      	ldr	r3, [pc, #60]	; (8002680 <MX_DMA_Init+0x40>)
{
 8002642:	b500      	push	{lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002644:	695a      	ldr	r2, [r3, #20]
 8002646:	f042 0201 	orr.w	r2, r2, #1
 800264a:	615a      	str	r2, [r3, #20]
 800264c:	695b      	ldr	r3, [r3, #20]
{
 800264e:	b083      	sub	sp, #12

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8002650:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002652:	f003 0301 	and.w	r3, r3, #1
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8002656:	4611      	mov	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002658:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800265a:	2010      	movs	r0, #16
  __HAL_RCC_DMA1_CLK_ENABLE();
 800265c:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800265e:	f7fe f9cd 	bl	80009fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8002662:	2010      	movs	r0, #16
 8002664:	f7fe fa00 	bl	8000a68 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8002668:	2200      	movs	r2, #0
 800266a:	4611      	mov	r1, r2
 800266c:	2011      	movs	r0, #17
 800266e:	f7fe f9c5 	bl	80009fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8002672:	2011      	movs	r0, #17
 8002674:	f7fe f9f8 	bl	8000a68 <HAL_NVIC_EnableIRQ>

}
 8002678:	b003      	add	sp, #12
 800267a:	f85d fb04 	ldr.w	pc, [sp], #4
 800267e:	bf00      	nop
 8002680:	40021000 	.word	0x40021000

08002684 <MX_GPIO_Init>:
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002684:	4b18      	ldr	r3, [pc, #96]	; (80026e8 <MX_GPIO_Init+0x64>)
{
 8002686:	b510      	push	{r4, lr}
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002688:	695a      	ldr	r2, [r3, #20]
 800268a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800268e:	615a      	str	r2, [r3, #20]
 8002690:	695a      	ldr	r2, [r3, #20]
{
 8002692:	b088      	sub	sp, #32
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002694:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8002698:	9200      	str	r2, [sp, #0]
 800269a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800269c:	695a      	ldr	r2, [r3, #20]
 800269e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80026a2:	615a      	str	r2, [r3, #20]
 80026a4:	695a      	ldr	r2, [r3, #20]
 80026a6:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80026aa:	9201      	str	r2, [sp, #4]
 80026ac:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026ae:	695a      	ldr	r2, [r3, #20]
 80026b0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80026b4:	615a      	str	r2, [r3, #20]
 80026b6:	695b      	ldr	r3, [r3, #20]
 80026b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026bc:	9302      	str	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LEDMain_GPIO_Port, LEDMain_Pin, GPIO_PIN_RESET);
 80026be:	2200      	movs	r2, #0
 80026c0:	2120      	movs	r1, #32
 80026c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026c6:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LEDMain_Pin;
 80026c8:	2420      	movs	r4, #32
  HAL_GPIO_WritePin(LEDMain_GPIO_Port, LEDMain_Pin, GPIO_PIN_RESET);
 80026ca:	f7fe fc09 	bl	8000ee0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ce:	2300      	movs	r3, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026d0:	2201      	movs	r2, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LEDMain_GPIO_Port, &GPIO_InitStruct);
 80026d2:	a903      	add	r1, sp, #12
 80026d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = LEDMain_Pin;
 80026d8:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026da:	9204      	str	r2, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026dc:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026de:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(LEDMain_GPIO_Port, &GPIO_InitStruct);
 80026e0:	f7fe faf6 	bl	8000cd0 <HAL_GPIO_Init>

}
 80026e4:	b008      	add	sp, #32
 80026e6:	bd10      	pop	{r4, pc}
 80026e8:	40021000 	.word	0x40021000

080026ec <HAL_CAN_TxCpltCallback>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);

/* USER CODE BEGIN PFP */
/* Private function prototypes -----------------------------------------------*/
void HAL_CAN_TxCpltCallback(CAN_HandleTypeDef *hcan){
 80026ec:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(LEDMain_GPIO_Port, LEDMain_Pin, GPIO_PIN_SET); //świecimy jeśli wyślemy ramke
 80026ee:	2201      	movs	r2, #1
 80026f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026f4:	2120      	movs	r1, #32
 80026f6:	f7fe fbf3 	bl	8000ee0 <HAL_GPIO_WritePin>
	TIM16->CNT=0;
 80026fa:	4b04      	ldr	r3, [pc, #16]	; (800270c <HAL_CAN_TxCpltCallback+0x20>)
	HAL_TIM_Base_Start_IT(&htim16);
 80026fc:	4804      	ldr	r0, [pc, #16]	; (8002710 <HAL_CAN_TxCpltCallback+0x24>)
	TIM16->CNT=0;
 80026fe:	2200      	movs	r2, #0
 8002700:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002702:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_TIM_Base_Start_IT(&htim16);
 8002706:	f7ff b93d 	b.w	8001984 <HAL_TIM_Base_Start_IT>
 800270a:	bf00      	nop
 800270c:	40014400 	.word	0x40014400
 8002710:	200000fc 	.word	0x200000fc

08002714 <HAL_CAN_RxCpltCallback>:

void HAL_CAN_RxCpltCallback(CAN_HandleTypeDef *hcan){
 8002714:	b510      	push	{r4, lr}
//	uint8_t i;
//	for(i=0; i<CAN_DATA_LEN; i++){
//		DataCAN[i] = Rx.Data[i];
//	}

	memcpy(DataCAN, Rx.Data, sizeof(Rx.Data)); //działa
 8002716:	4a09      	ldr	r2, [pc, #36]	; (800273c <HAL_CAN_RxCpltCallback+0x28>)
 8002718:	4b09      	ldr	r3, [pc, #36]	; (8002740 <HAL_CAN_RxCpltCallback+0x2c>)
void HAL_CAN_RxCpltCallback(CAN_HandleTypeDef *hcan){
 800271a:	4604      	mov	r4, r0
	memcpy(DataCAN, Rx.Data, sizeof(Rx.Data)); //działa
 800271c:	e892 0003 	ldmia.w	r2, {r0, r1}

	HAL_UART_Transmit_DMA(&huart2, DataCAN, sizeof(DataCAN)); //wysłanie danych przez UART
 8002720:	2204      	movs	r2, #4
	memcpy(DataCAN, Rx.Data, sizeof(Rx.Data)); //działa
 8002722:	e883 0003 	stmia.w	r3, {r0, r1}
	HAL_UART_Transmit_DMA(&huart2, DataCAN, sizeof(DataCAN)); //wysłanie danych przez UART
 8002726:	4619      	mov	r1, r3
 8002728:	4806      	ldr	r0, [pc, #24]	; (8002744 <HAL_CAN_RxCpltCallback+0x30>)
 800272a:	f7ff fac3 	bl	8001cb4 <HAL_UART_Transmit_DMA>

	HAL_CAN_Receive_IT(hcan, CAN_FIFO0); //powrót do nasłuchiwania przerwań
 800272e:	4620      	mov	r0, r4
 8002730:	2100      	movs	r1, #0
}
 8002732:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_CAN_Receive_IT(hcan, CAN_FIFO0); //powrót do nasłuchiwania przerwań
 8002736:	f7fd bf15 	b.w	8000564 <HAL_CAN_Receive_IT>
 800273a:	bf00      	nop
 800273c:	200000ac 	.word	0x200000ac
 8002740:	20000020 	.word	0x20000020
 8002744:	200001c4 	.word	0x200001c4

08002748 <HAL_TIM_PeriodElapsedCallback>:
//		TIM16->CNT=0;
//		HAL_TIM_Base_Start_IT(&htim16);
//	}
//}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002748:	b508      	push	{r3, lr}
	if(htim->Instance == TIM16){
 800274a:	6802      	ldr	r2, [r0, #0]
 800274c:	4b07      	ldr	r3, [pc, #28]	; (800276c <HAL_TIM_PeriodElapsedCallback+0x24>)
 800274e:	429a      	cmp	r2, r3
 8002750:	d000      	beq.n	8002754 <HAL_TIM_PeriodElapsedCallback+0xc>
 8002752:	bd08      	pop	{r3, pc}
		HAL_GPIO_WritePin(LEDMain_GPIO_Port, LEDMain_Pin, GPIO_PIN_RESET);
 8002754:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002758:	2200      	movs	r2, #0
 800275a:	2120      	movs	r1, #32
 800275c:	f7fe fbc0 	bl	8000ee0 <HAL_GPIO_WritePin>
		HAL_TIM_Base_Stop_IT(&htim16);
 8002760:	4803      	ldr	r0, [pc, #12]	; (8002770 <HAL_TIM_PeriodElapsedCallback+0x28>)
	}
}
 8002762:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_TIM_Base_Stop_IT(&htim16);
 8002766:	f7ff b919 	b.w	800199c <HAL_TIM_Base_Stop_IT>
 800276a:	bf00      	nop
 800276c:	40014400 	.word	0x40014400
 8002770:	200000fc 	.word	0x200000fc

08002774 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002774:	b538      	push	{r3, r4, r5, lr}
//	uint8_t i;
//	for(i=0; i<CAN_DATA_LEN; i++){ //pętla do przepisania danych
//		Tx.Data[i] = DataUART[i];
//	}

	memcpy(Tx.Data, DataUART, sizeof(Tx.Data));
 8002776:	4c08      	ldr	r4, [pc, #32]	; (8002798 <HAL_UART_RxCpltCallback+0x24>)
 8002778:	4b08      	ldr	r3, [pc, #32]	; (800279c <HAL_UART_RxCpltCallback+0x28>)
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800277a:	4605      	mov	r5, r0
	memcpy(Tx.Data, DataUART, sizeof(Tx.Data));
 800277c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002780:	e883 0003 	stmia.w	r3, {r0, r1}

	HAL_CAN_Transmit_IT(&hcan); //wysłanie ramki przez CANa
 8002784:	4806      	ldr	r0, [pc, #24]	; (80027a0 <HAL_UART_RxCpltCallback+0x2c>)
 8002786:	f7fd fe67 	bl	8000458 <HAL_CAN_Transmit_IT>

	HAL_UART_Receive_DMA(huart, DataUART, CAN_DATA_LEN); // ponowne włączenie nasłuchiwania na przerwania, byc może niekonieczne
 800278a:	4621      	mov	r1, r4
 800278c:	4628      	mov	r0, r5
 800278e:	2204      	movs	r2, #4
}
 8002790:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_UART_Receive_DMA(huart, DataUART, CAN_DATA_LEN); // ponowne włączenie nasłuchiwania na przerwania, byc może niekonieczne
 8002794:	f7ff bacc 	b.w	8001d30 <HAL_UART_Receive_DMA>
 8002798:	20000024 	.word	0x20000024
 800279c:	200000f4 	.word	0x200000f4
 80027a0:	2000002c 	.word	0x2000002c

080027a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80027a4:	b570      	push	{r4, r5, r6, lr}
 80027a6:	b0a6      	sub	sp, #152	; 0x98
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80027a8:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80027aa:	2601      	movs	r6, #1
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80027ac:	2510      	movs	r5, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80027ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80027b2:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80027b6:	2300      	movs	r3, #0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027b8:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80027ba:	9406      	str	r4, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80027bc:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80027be:	9609      	str	r6, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80027c0:	950a      	str	r5, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80027c2:	910d      	str	r1, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80027c4:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80027c6:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027c8:	f7fe fb90 	bl	8000eec <HAL_RCC_OscConfig>
 80027cc:	b100      	cbz	r0, 80027d0 <SystemClock_Config+0x2c>
 80027ce:	e7fe      	b.n	80027ce <SystemClock_Config+0x2a>
 80027d0:	4603      	mov	r3, r0
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80027d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80027d6:	4621      	mov	r1, r4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027d8:	250f      	movs	r5, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80027da:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027dc:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80027de:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027e0:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027e2:	9501      	str	r5, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80027e4:	9204      	str	r2, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80027e6:	f7fe fe7f 	bl	80014e8 <HAL_RCC_ClockConfig>
 80027ea:	4603      	mov	r3, r0
 80027ec:	b100      	cbz	r0, 80027f0 <SystemClock_Config+0x4c>
 80027ee:	e7fe      	b.n	80027ee <SystemClock_Config+0x4a>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM16;
 80027f0:	4a0e      	ldr	r2, [pc, #56]	; (800282c <SystemClock_Config+0x88>)
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80027f2:	9013      	str	r0, [sp, #76]	; 0x4c
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80027f4:	a810      	add	r0, sp, #64	; 0x40
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 80027f6:	9322      	str	r3, [sp, #136]	; 0x88
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM16;
 80027f8:	9210      	str	r2, [sp, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80027fa:	f7fe ff73 	bl	80016e4 <HAL_RCCEx_PeriphCLKConfig>
 80027fe:	4604      	mov	r4, r0
 8002800:	b100      	cbz	r0, 8002804 <SystemClock_Config+0x60>
 8002802:	e7fe      	b.n	8002802 <SystemClock_Config+0x5e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002804:	f7fe ff38 	bl	8001678 <HAL_RCC_GetHCLKFreq>
 8002808:	4b09      	ldr	r3, [pc, #36]	; (8002830 <SystemClock_Config+0x8c>)
 800280a:	fba3 3000 	umull	r3, r0, r3, r0
 800280e:	0980      	lsrs	r0, r0, #6
 8002810:	f7fe f936 	bl	8000a80 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002814:	2004      	movs	r0, #4
 8002816:	f7fe f94d 	bl	8000ab4 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800281a:	4622      	mov	r2, r4
 800281c:	4621      	mov	r1, r4
 800281e:	f04f 30ff 	mov.w	r0, #4294967295
 8002822:	f7fe f8eb 	bl	80009fc <HAL_NVIC_SetPriority>
}
 8002826:	b026      	add	sp, #152	; 0x98
 8002828:	bd70      	pop	{r4, r5, r6, pc}
 800282a:	bf00      	nop
 800282c:	00800002 	.word	0x00800002
 8002830:	10624dd3 	.word	0x10624dd3

08002834 <main>:
  __HAL_CAN_ENABLE_IT(&hcan, CAN_IT_FMP0);
 8002834:	4d24      	ldr	r5, [pc, #144]	; (80028c8 <main+0x94>)
  Tx.DLC = CAN_DATA_LEN;
 8002836:	4e25      	ldr	r6, [pc, #148]	; (80028cc <main+0x98>)
{
 8002838:	b580      	push	{r7, lr}
  HAL_Init();
 800283a:	f7fd fce1 	bl	8000200 <HAL_Init>
  SystemClock_Config();
 800283e:	f7ff ffb1 	bl	80027a4 <SystemClock_Config>
  MX_GPIO_Init();
 8002842:	f7ff ff1f 	bl	8002684 <MX_GPIO_Init>
  MX_DMA_Init();
 8002846:	f7ff fefb 	bl	8002640 <MX_DMA_Init>
  MX_TIM16_Init();
 800284a:	f000 f903 	bl	8002a54 <MX_TIM16_Init>
  MX_USART2_UART_Init();
 800284e:	f000 f941 	bl	8002ad4 <MX_USART2_UART_Init>
  MX_CAN_Init();
 8002852:	f7ff fe83 	bl	800255c <MX_CAN_Init>
  __HAL_CAN_ENABLE_IT(&hcan, CAN_IT_FMP0);
 8002856:	682a      	ldr	r2, [r5, #0]
  Rx_Filter.FilterNumber = 1;
 8002858:	4b1d      	ldr	r3, [pc, #116]	; (80028d0 <main+0x9c>)
  __HAL_CAN_ENABLE_IT(&hcan, CAN_IT_FMP0);
 800285a:	6951      	ldr	r1, [r2, #20]
 800285c:	f041 0102 	orr.w	r1, r1, #2
 8002860:	6151      	str	r1, [r2, #20]
  __HAL_CAN_ENABLE_IT(&hcan, CAN_IT_FMP1);
 8002862:	6951      	ldr	r1, [r2, #20]
 8002864:	f041 0110 	orr.w	r1, r1, #16
 8002868:	6151      	str	r1, [r2, #20]
  Tx.RTR = CAN_RTR_DATA;
 800286a:	2400      	movs	r4, #0
  Tx.StdId = CAN_ID_TX;
 800286c:	f240 2101 	movw	r1, #513	; 0x201
  Tx.DLC = CAN_DATA_LEN;
 8002870:	2704      	movs	r7, #4
  Rx_Filter.FilterIdHigh = CAN_ID_RX << 5; //ustawiamy takie highID jakie ID ma p³ytka wysy³aj¹ca oraz przesuwamy bitowo o 5, bo ID ma tylko 11 bitów
 8002872:	f244 0220 	movw	r2, #16416	; 0x4020
  Tx.StdId = CAN_ID_TX;
 8002876:	6031      	str	r1, [r6, #0]
  Rx_Filter.FilterIdHigh = CAN_ID_RX << 5; //ustawiamy takie highID jakie ID ma p³ytka wysy³aj¹ca oraz przesuwamy bitowo o 5, bo ID ma tylko 11 bitów
 8002878:	e883 0014 	stmia.w	r3, {r2, r4}
  HAL_CAN_ConfigFilter(&hcan, &Rx_Filter); //odpalenie filtra
 800287c:	4619      	mov	r1, r3
  Rx_Filter.FilterMaskIdHigh = 0xFFFF; // obie maski na 1, nie mają wtedy znaczenia
 800287e:	f64f 72ff 	movw	r2, #65535	; 0xffff
  hcan.pTxMsg = &Tx; //przekazanie konfiguracji ramki do głównej struktury
 8002882:	632e      	str	r6, [r5, #48]	; 0x30
  Tx.DLC = CAN_DATA_LEN;
 8002884:	6137      	str	r7, [r6, #16]
  Tx.RTR = CAN_RTR_DATA;
 8002886:	60f4      	str	r4, [r6, #12]
  Tx.IDE = CAN_ID_STD; //wersja podstawowa ID
 8002888:	60b4      	str	r4, [r6, #8]
  HAL_CAN_ConfigFilter(&hcan, &Rx_Filter); //odpalenie filtra
 800288a:	4628      	mov	r0, r5
  Rx_Filter.FilterNumber = 1;
 800288c:	2601      	movs	r6, #1
  Rx_Filter.FilterMaskIdHigh = 0xFFFF; // obie maski na 1, nie mają wtedy znaczenia
 800288e:	609a      	str	r2, [r3, #8]
  Rx_Filter.FilterMaskIdLow = 0xFFFF;
 8002890:	60da      	str	r2, [r3, #12]
  Rx_Filter.FilterMode = CAN_FILTERMODE_IDMASK;	//ustawiamy filtrowanie przez maske, a nie przez listę
 8002892:	619c      	str	r4, [r3, #24]
  Rx_Filter.FilterNumber = 1;
 8002894:	615e      	str	r6, [r3, #20]
  Rx_Filter.FilterActivation = ENABLE; //aktywacja filtra
 8002896:	621e      	str	r6, [r3, #32]
  HAL_CAN_ConfigFilter(&hcan, &Rx_Filter); //odpalenie filtra
 8002898:	f7fd fcd2 	bl	8000240 <HAL_CAN_ConfigFilter>
  hcan.pRxMsg = &Rx; //przesłąnie wskaźnika na ramkę do głównej struktury
 800289c:	4a0d      	ldr	r2, [pc, #52]	; (80028d4 <main+0xa0>)
  hcan.pRx1Msg = &Rx2; //dla drugiej kolejki
 800289e:	4b0e      	ldr	r3, [pc, #56]	; (80028d8 <main+0xa4>)
  hcan.pRxMsg = &Rx; //przesłąnie wskaźnika na ramkę do głównej struktury
 80028a0:	636a      	str	r2, [r5, #52]	; 0x34
  HAL_CAN_Receive_IT(&hcan, CAN_FIFO0); //pierwsze przerwanie CAN na kolejce numer 0
 80028a2:	4621      	mov	r1, r4
 80028a4:	4628      	mov	r0, r5
  hcan.pRx1Msg = &Rx2; //dla drugiej kolejki
 80028a6:	63ab      	str	r3, [r5, #56]	; 0x38
  HAL_CAN_Receive_IT(&hcan, CAN_FIFO0); //pierwsze przerwanie CAN na kolejce numer 0
 80028a8:	f7fd fe5c 	bl	8000564 <HAL_CAN_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim16); //tutaj wykonujemy start, stop i wyzerowanie timera, żeby wyeliminowac błąd, w którym
 80028ac:	480b      	ldr	r0, [pc, #44]	; (80028dc <main+0xa8>)
 80028ae:	f7ff f869 	bl	8001984 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Stop_IT(&htim16);  // pierwsze przerwanie nie działało poprawnie
 80028b2:	480a      	ldr	r0, [pc, #40]	; (80028dc <main+0xa8>)
 80028b4:	f7ff f872 	bl	800199c <HAL_TIM_Base_Stop_IT>
  TIM16->CNT=0;
 80028b8:	4b09      	ldr	r3, [pc, #36]	; (80028e0 <main+0xac>)
  HAL_UART_Receive_DMA(&huart2, DataUART, CAN_DATA_LEN); //rozpoczęcie nasłuchiwania na dane z UARTa
 80028ba:	490a      	ldr	r1, [pc, #40]	; (80028e4 <main+0xb0>)
  TIM16->CNT=0;
 80028bc:	625c      	str	r4, [r3, #36]	; 0x24
  HAL_UART_Receive_DMA(&huart2, DataUART, CAN_DATA_LEN); //rozpoczęcie nasłuchiwania na dane z UARTa
 80028be:	463a      	mov	r2, r7
 80028c0:	4809      	ldr	r0, [pc, #36]	; (80028e8 <main+0xb4>)
 80028c2:	f7ff fa35 	bl	8001d30 <HAL_UART_Receive_DMA>
 80028c6:	e7fe      	b.n	80028c6 <main+0x92>
 80028c8:	2000002c 	.word	0x2000002c
 80028cc:	200000e0 	.word	0x200000e0
 80028d0:	20000070 	.word	0x20000070
 80028d4:	20000098 	.word	0x20000098
 80028d8:	200000bc 	.word	0x200000bc
 80028dc:	200000fc 	.word	0x200000fc
 80028e0:	40014400 	.word	0x40014400
 80028e4:	20000024 	.word	0x20000024
 80028e8:	200001c4 	.word	0x200001c4

080028ec <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 80028ec:	e7fe      	b.n	80028ec <_Error_Handler>
 80028ee:	bf00      	nop

080028f0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028f0:	4b1d      	ldr	r3, [pc, #116]	; (8002968 <HAL_MspInit+0x78>)
{
 80028f2:	b500      	push	{lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028f4:	699a      	ldr	r2, [r3, #24]
 80028f6:	f042 0201 	orr.w	r2, r2, #1
 80028fa:	619a      	str	r2, [r3, #24]
 80028fc:	699b      	ldr	r3, [r3, #24]
{
 80028fe:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002900:	f003 0301 	and.w	r3, r3, #1
 8002904:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002906:	2003      	movs	r0, #3
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002908:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800290a:	f7fe f865 	bl	80009d8 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800290e:	2200      	movs	r2, #0
 8002910:	4611      	mov	r1, r2
 8002912:	f06f 000b 	mvn.w	r0, #11
 8002916:	f7fe f871 	bl	80009fc <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800291a:	2200      	movs	r2, #0
 800291c:	4611      	mov	r1, r2
 800291e:	f06f 000a 	mvn.w	r0, #10
 8002922:	f7fe f86b 	bl	80009fc <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002926:	2200      	movs	r2, #0
 8002928:	4611      	mov	r1, r2
 800292a:	f06f 0009 	mvn.w	r0, #9
 800292e:	f7fe f865 	bl	80009fc <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8002932:	2200      	movs	r2, #0
 8002934:	4611      	mov	r1, r2
 8002936:	f06f 0004 	mvn.w	r0, #4
 800293a:	f7fe f85f 	bl	80009fc <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800293e:	2200      	movs	r2, #0
 8002940:	4611      	mov	r1, r2
 8002942:	f06f 0003 	mvn.w	r0, #3
 8002946:	f7fe f859 	bl	80009fc <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 800294a:	2200      	movs	r2, #0
 800294c:	4611      	mov	r1, r2
 800294e:	f06f 0001 	mvn.w	r0, #1
 8002952:	f7fe f853 	bl	80009fc <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002956:	2200      	movs	r2, #0
 8002958:	4611      	mov	r1, r2
 800295a:	f04f 30ff 	mov.w	r0, #4294967295
 800295e:	f7fe f84d 	bl	80009fc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002962:	b003      	add	sp, #12
 8002964:	f85d fb04 	ldr.w	pc, [sp], #4
 8002968:	40021000 	.word	0x40021000

0800296c <NMI_Handler>:
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop

08002970 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8002970:	e7fe      	b.n	8002970 <HardFault_Handler>
 8002972:	bf00      	nop

08002974 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8002974:	e7fe      	b.n	8002974 <MemManage_Handler>
 8002976:	bf00      	nop

08002978 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8002978:	e7fe      	b.n	8002978 <BusFault_Handler>
 800297a:	bf00      	nop

0800297c <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 800297c:	e7fe      	b.n	800297c <UsageFault_Handler>
 800297e:	bf00      	nop

08002980 <SVC_Handler>:
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop

08002984 <DebugMon_Handler>:
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop

08002988 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop

0800298c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800298c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800298e:	f7fd fc49 	bl	8000224 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002992:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8002996:	f7fe b89b 	b.w	8000ad0 <HAL_SYSTICK_IRQHandler>
 800299a:	bf00      	nop

0800299c <DMA1_Channel6_IRQHandler>:
void DMA1_Channel6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800299c:	4801      	ldr	r0, [pc, #4]	; (80029a4 <DMA1_Channel6_IRQHandler+0x8>)
 800299e:	f7fe b94b 	b.w	8000c38 <HAL_DMA_IRQHandler>
 80029a2:	bf00      	nop
 80029a4:	2000013c 	.word	0x2000013c

080029a8 <DMA1_Channel7_IRQHandler>:
void DMA1_Channel7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80029a8:	4801      	ldr	r0, [pc, #4]	; (80029b0 <DMA1_Channel7_IRQHandler+0x8>)
 80029aa:	f7fe b945 	b.w	8000c38 <HAL_DMA_IRQHandler>
 80029ae:	bf00      	nop
 80029b0:	20000180 	.word	0x20000180

080029b4 <CAN_SCE_IRQHandler>:
void CAN_SCE_IRQHandler(void)
{
  /* USER CODE BEGIN CAN_SCE_IRQn 0 */

  /* USER CODE END CAN_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80029b4:	4801      	ldr	r0, [pc, #4]	; (80029bc <CAN_SCE_IRQHandler+0x8>)
 80029b6:	f7fd bf09 	b.w	80007cc <HAL_CAN_IRQHandler>
 80029ba:	bf00      	nop
 80029bc:	2000002c 	.word	0x2000002c

080029c0 <CAN_RX1_IRQHandler>:
 80029c0:	f7ff bff8 	b.w	80029b4 <CAN_SCE_IRQHandler>

080029c4 <USB_LP_CAN_RX0_IRQHandler>:
 80029c4:	f7ff bff6 	b.w	80029b4 <CAN_SCE_IRQHandler>

080029c8 <USB_HP_CAN_TX_IRQHandler>:
 80029c8:	f7ff bff4 	b.w	80029b4 <CAN_SCE_IRQHandler>

080029cc <TIM1_UP_TIM16_IRQHandler>:
void TIM1_UP_TIM16_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80029cc:	4801      	ldr	r0, [pc, #4]	; (80029d4 <TIM1_UP_TIM16_IRQHandler+0x8>)
 80029ce:	f7ff b803 	b.w	80019d8 <HAL_TIM_IRQHandler>
 80029d2:	bf00      	nop
 80029d4:	200000fc 	.word	0x200000fc

080029d8 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80029d8:	4801      	ldr	r0, [pc, #4]	; (80029e0 <USART2_IRQHandler+0x8>)
 80029da:	f7ff bd0d 	b.w	80023f8 <HAL_UART_IRQHandler>
 80029de:	bf00      	nop
 80029e0:	200001c4 	.word	0x200001c4

080029e4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029e4:	4917      	ldr	r1, [pc, #92]	; (8002a44 <SystemInit+0x60>)
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80029e6:	4b18      	ldr	r3, [pc, #96]	; (8002a48 <SystemInit+0x64>)

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 80029e8:	4a18      	ldr	r2, [pc, #96]	; (8002a4c <SystemInit+0x68>)

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 80029ea:	4819      	ldr	r0, [pc, #100]	; (8002a50 <SystemInit+0x6c>)
{
 80029ec:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029ee:	f8d1 4088 	ldr.w	r4, [r1, #136]	; 0x88
 80029f2:	f444 0470 	orr.w	r4, r4, #15728640	; 0xf00000
 80029f6:	f8c1 4088 	str.w	r4, [r1, #136]	; 0x88
  RCC->CR |= 0x00000001U;
 80029fa:	681c      	ldr	r4, [r3, #0]
 80029fc:	f044 0401 	orr.w	r4, r4, #1
 8002a00:	601c      	str	r4, [r3, #0]
  RCC->CFGR &= 0xF87FC00CU;
 8002a02:	685c      	ldr	r4, [r3, #4]
 8002a04:	4022      	ands	r2, r4
 8002a06:	605a      	str	r2, [r3, #4]
  RCC->CR &= 0xFEF6FFFFU;
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002a0e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002a12:	601a      	str	r2, [r3, #0]
  RCC->CR &= 0xFFFBFFFFU;
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002a1a:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= 0xFF80FFFFU;
 8002a1c:	685a      	ldr	r2, [r3, #4]
 8002a1e:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002a22:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8002a24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a26:	f022 020f 	bic.w	r2, r2, #15
 8002a2a:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC->CFGR3 &= 0xFF00FCCCU;
 8002a2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8002a2e:	2400      	movs	r4, #0
  RCC->CFGR3 &= 0xFF00FCCCU;
 8002a30:	4010      	ands	r0, r2

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002a32:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  RCC->CFGR3 &= 0xFF00FCCCU;
 8002a36:	6318      	str	r0, [r3, #48]	; 0x30
  RCC->CIR = 0x00000000U;
 8002a38:	609c      	str	r4, [r3, #8]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002a3a:	608a      	str	r2, [r1, #8]
#endif
}
 8002a3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	e000ed00 	.word	0xe000ed00
 8002a48:	40021000 	.word	0x40021000
 8002a4c:	f87fc00c 	.word	0xf87fc00c
 8002a50:	ff00fccc 	.word	0xff00fccc

08002a54 <MX_TIM16_Init>:

/* TIM16 init function */
void MX_TIM16_Init(void)
{

  htim16.Instance = TIM16;
 8002a54:	4b0c      	ldr	r3, [pc, #48]	; (8002a88 <MX_TIM16_Init+0x34>)
 8002a56:	4a0d      	ldr	r2, [pc, #52]	; (8002a8c <MX_TIM16_Init+0x38>)
{
 8002a58:	b510      	push	{r4, lr}
  htim16.Init.Prescaler = 9999;
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim16.Init.Period = 719;
 8002a5a:	f240 21cf 	movw	r1, #719	; 0x2cf
  htim16.Instance = TIM16;
 8002a5e:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 9999;
 8002a60:	f242 740f 	movw	r4, #9999	; 0x270f
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a64:	2200      	movs	r2, #0
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim16.Init.RepetitionCounter = 0;
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002a66:	4618      	mov	r0, r3
  htim16.Init.Prescaler = 9999;
 8002a68:	605c      	str	r4, [r3, #4]
  htim16.Init.Period = 719;
 8002a6a:	60d9      	str	r1, [r3, #12]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a6c:	609a      	str	r2, [r3, #8]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a6e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002a70:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002a74:	f7ff f8fc 	bl	8001c70 <HAL_TIM_Base_Init>
 8002a78:	b900      	cbnz	r0, 8002a7c <MX_TIM16_Init+0x28>
 8002a7a:	bd10      	pop	{r4, pc}
  {
    _Error_Handler(__FILE__, __LINE__);
 8002a7c:	213e      	movs	r1, #62	; 0x3e
 8002a7e:	4804      	ldr	r0, [pc, #16]	; (8002a90 <MX_TIM16_Init+0x3c>)
  }

}
 8002a80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    _Error_Handler(__FILE__, __LINE__);
 8002a84:	f7ff bf32 	b.w	80028ec <_Error_Handler>
 8002a88:	200000fc 	.word	0x200000fc
 8002a8c:	40014400 	.word	0x40014400
 8002a90:	08002cec 	.word	0x08002cec

08002a94 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM16)
 8002a94:	6802      	ldr	r2, [r0, #0]
 8002a96:	4b0e      	ldr	r3, [pc, #56]	; (8002ad0 <HAL_TIM_Base_MspInit+0x3c>)
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d000      	beq.n	8002a9e <HAL_TIM_Base_MspInit+0xa>
 8002a9c:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002a9e:	f503 434c 	add.w	r3, r3, #52224	; 0xcc00
{
 8002aa2:	b500      	push	{lr}
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002aa4:	699a      	ldr	r2, [r3, #24]
 8002aa6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002aaa:	619a      	str	r2, [r3, #24]
 8002aac:	699b      	ldr	r3, [r3, #24]
{
 8002aae:	b083      	sub	sp, #12

    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002ab0:	2200      	movs	r2, #0
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab6:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002ab8:	4611      	mov	r1, r2
 8002aba:	2019      	movs	r0, #25
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002abc:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002abe:	f7fd ff9d 	bl	80009fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002ac2:	2019      	movs	r0, #25
 8002ac4:	f7fd ffd0 	bl	8000a68 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8002ac8:	b003      	add	sp, #12
 8002aca:	f85d fb04 	ldr.w	pc, [sp], #4
 8002ace:	bf00      	nop
 8002ad0:	40014400 	.word	0x40014400

08002ad4 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002ad4:	b538      	push	{r3, r4, r5, lr}

  huart2.Instance = USART2;
 8002ad6:	4b0e      	ldr	r3, [pc, #56]	; (8002b10 <MX_USART2_UART_Init+0x3c>)
 8002ad8:	4a0e      	ldr	r2, [pc, #56]	; (8002b14 <MX_USART2_UART_Init+0x40>)
 8002ada:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002adc:	f44f 35e1 	mov.w	r5, #115200	; 0x1c200
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002ae0:	2200      	movs	r2, #0
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002ae2:	240c      	movs	r4, #12
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 8002ae4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002ae8:	4618      	mov	r0, r3
  huart2.Init.BaudRate = 115200;
 8002aea:	605d      	str	r5, [r3, #4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002aec:	615c      	str	r4, [r3, #20]
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 8002aee:	61d9      	str	r1, [r3, #28]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002af0:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002af2:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002af4:	611a      	str	r2, [r3, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002af6:	619a      	str	r2, [r3, #24]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002af8:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002afa:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002afc:	f7ff fbd6 	bl	80022ac <HAL_UART_Init>
 8002b00:	b900      	cbnz	r0, 8002b04 <MX_USART2_UART_Init+0x30>
 8002b02:	bd38      	pop	{r3, r4, r5, pc}
  {
    _Error_Handler(__FILE__, __LINE__);
 8002b04:	2147      	movs	r1, #71	; 0x47
 8002b06:	4804      	ldr	r0, [pc, #16]	; (8002b18 <MX_USART2_UART_Init+0x44>)
  }

}
 8002b08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    _Error_Handler(__FILE__, __LINE__);
 8002b0c:	f7ff beee 	b.w	80028ec <_Error_Handler>
 8002b10:	200001c4 	.word	0x200001c4
 8002b14:	40004400 	.word	0x40004400
 8002b18:	08002cfc 	.word	0x08002cfc

08002b1c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART2)
 8002b1c:	4b2d      	ldr	r3, [pc, #180]	; (8002bd4 <HAL_UART_MspInit+0xb8>)
 8002b1e:	6802      	ldr	r2, [r0, #0]
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d000      	beq.n	8002b26 <HAL_UART_MspInit+0xa>
 8002b24:	4770      	bx	lr
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b26:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
{
 8002b2a:	b5f0      	push	{r4, r5, r6, r7, lr}
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b2c:	69da      	ldr	r2, [r3, #28]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8002b2e:	4e2a      	ldr	r6, [pc, #168]	; (8002bd8 <HAL_UART_MspInit+0xbc>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b30:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002b34:	61da      	str	r2, [r3, #28]
 8002b36:	69db      	ldr	r3, [r3, #28]
{
 8002b38:	b087      	sub	sp, #28
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b3e:	4604      	mov	r4, r0
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002b40:	200c      	movs	r0, #12
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b42:	2500      	movs	r5, #0
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b44:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b46:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b48:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b4a:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002b4c:	9001      	str	r0, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b4e:	2702      	movs	r7, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b54:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b56:	9305      	str	r3, [sp, #20]
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b58:	f8dd e000 	ldr.w	lr, [sp]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b5c:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b5e:	9503      	str	r5, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b60:	f7fe f8b6 	bl	8000cd0 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8002b64:	491d      	ldr	r1, [pc, #116]	; (8002bdc <HAL_UART_MspInit+0xc0>)
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b66:	6075      	str	r5, [r6, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002b68:	2280      	movs	r2, #128	; 0x80
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002b6a:	2320      	movs	r3, #32
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002b6c:	4630      	mov	r0, r6
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b6e:	60b5      	str	r5, [r6, #8]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b70:	6135      	str	r5, [r6, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b72:	6175      	str	r5, [r6, #20]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002b74:	61f5      	str	r5, [r6, #28]
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8002b76:	6031      	str	r1, [r6, #0]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002b78:	60f2      	str	r2, [r6, #12]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002b7a:	61b3      	str	r3, [r6, #24]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002b7c:	f7fd ffac 	bl	8000ad8 <HAL_DMA_Init>
 8002b80:	b9f0      	cbnz	r0, 8002bc0 <HAL_UART_MspInit+0xa4>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8002b82:	4d17      	ldr	r5, [pc, #92]	; (8002be0 <HAL_UART_MspInit+0xc4>)
 8002b84:	4f17      	ldr	r7, [pc, #92]	; (8002be4 <HAL_UART_MspInit+0xc8>)
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002b86:	6666      	str	r6, [r4, #100]	; 0x64
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b88:	2300      	movs	r3, #0
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b8a:	2110      	movs	r1, #16
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b8c:	2280      	movs	r2, #128	; 0x80
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002b8e:	4628      	mov	r0, r5
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002b90:	6274      	str	r4, [r6, #36]	; 0x24
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8002b92:	602f      	str	r7, [r5, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b94:	6069      	str	r1, [r5, #4]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b96:	60ea      	str	r2, [r5, #12]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b98:	60ab      	str	r3, [r5, #8]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b9a:	612b      	str	r3, [r5, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b9c:	616b      	str	r3, [r5, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002b9e:	61ab      	str	r3, [r5, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002ba0:	61eb      	str	r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002ba2:	f7fd ff99 	bl	8000ad8 <HAL_DMA_Init>
 8002ba6:	b980      	cbnz	r0, 8002bca <HAL_UART_MspInit+0xae>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002ba8:	2200      	movs	r2, #0
 8002baa:	4611      	mov	r1, r2
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8002bac:	6625      	str	r5, [r4, #96]	; 0x60
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002bae:	2026      	movs	r0, #38	; 0x26
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8002bb0:	626c      	str	r4, [r5, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002bb2:	f7fd ff23 	bl	80009fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002bb6:	2026      	movs	r0, #38	; 0x26
 8002bb8:	f7fd ff56 	bl	8000a68 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002bbc:	b007      	add	sp, #28
 8002bbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
      _Error_Handler(__FILE__, __LINE__);
 8002bc0:	216f      	movs	r1, #111	; 0x6f
 8002bc2:	4809      	ldr	r0, [pc, #36]	; (8002be8 <HAL_UART_MspInit+0xcc>)
 8002bc4:	f7ff fe92 	bl	80028ec <_Error_Handler>
 8002bc8:	e7db      	b.n	8002b82 <HAL_UART_MspInit+0x66>
      _Error_Handler(__FILE__, __LINE__);
 8002bca:	217f      	movs	r1, #127	; 0x7f
 8002bcc:	4806      	ldr	r0, [pc, #24]	; (8002be8 <HAL_UART_MspInit+0xcc>)
 8002bce:	f7ff fe8d 	bl	80028ec <_Error_Handler>
 8002bd2:	e7e9      	b.n	8002ba8 <HAL_UART_MspInit+0x8c>
 8002bd4:	40004400 	.word	0x40004400
 8002bd8:	2000013c 	.word	0x2000013c
 8002bdc:	4002006c 	.word	0x4002006c
 8002be0:	20000180 	.word	0x20000180
 8002be4:	40020080 	.word	0x40020080
 8002be8:	08002cfc 	.word	0x08002cfc

08002bec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002bec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c24 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002bf0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002bf2:	e003      	b.n	8002bfc <LoopCopyDataInit>

08002bf4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002bf4:	4b0c      	ldr	r3, [pc, #48]	; (8002c28 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002bf6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002bf8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002bfa:	3104      	adds	r1, #4

08002bfc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002bfc:	480b      	ldr	r0, [pc, #44]	; (8002c2c <LoopForever+0xa>)
	ldr	r3, =_edata
 8002bfe:	4b0c      	ldr	r3, [pc, #48]	; (8002c30 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002c00:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002c02:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002c04:	d3f6      	bcc.n	8002bf4 <CopyDataInit>
	ldr	r2, =_sbss
 8002c06:	4a0b      	ldr	r2, [pc, #44]	; (8002c34 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002c08:	e002      	b.n	8002c10 <LoopFillZerobss>

08002c0a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002c0a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002c0c:	f842 3b04 	str.w	r3, [r2], #4

08002c10 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002c10:	4b09      	ldr	r3, [pc, #36]	; (8002c38 <LoopForever+0x16>)
	cmp	r2, r3
 8002c12:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002c14:	d3f9      	bcc.n	8002c0a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002c16:	f7ff fee5 	bl	80029e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c1a:	f000 f811 	bl	8002c40 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002c1e:	f7ff fe09 	bl	8002834 <main>

08002c22 <LoopForever>:

LoopForever:
    b LoopForever
 8002c22:	e7fe      	b.n	8002c22 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002c24:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8002c28:	08002d14 	.word	0x08002d14
	ldr	r0, =_sdata
 8002c2c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002c30:	20000004 	.word	0x20000004
	ldr	r2, =_sbss
 8002c34:	20000004 	.word	0x20000004
	ldr	r3, = _ebss
 8002c38:	20000234 	.word	0x20000234

08002c3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002c3c:	e7fe      	b.n	8002c3c <ADC1_2_IRQHandler>
	...

08002c40 <__libc_init_array>:
 8002c40:	b570      	push	{r4, r5, r6, lr}
 8002c42:	4e0d      	ldr	r6, [pc, #52]	; (8002c78 <__libc_init_array+0x38>)
 8002c44:	4c0d      	ldr	r4, [pc, #52]	; (8002c7c <__libc_init_array+0x3c>)
 8002c46:	1ba4      	subs	r4, r4, r6
 8002c48:	10a4      	asrs	r4, r4, #2
 8002c4a:	2500      	movs	r5, #0
 8002c4c:	42a5      	cmp	r5, r4
 8002c4e:	d109      	bne.n	8002c64 <__libc_init_array+0x24>
 8002c50:	4e0b      	ldr	r6, [pc, #44]	; (8002c80 <__libc_init_array+0x40>)
 8002c52:	4c0c      	ldr	r4, [pc, #48]	; (8002c84 <__libc_init_array+0x44>)
 8002c54:	f000 f818 	bl	8002c88 <_init>
 8002c58:	1ba4      	subs	r4, r4, r6
 8002c5a:	10a4      	asrs	r4, r4, #2
 8002c5c:	2500      	movs	r5, #0
 8002c5e:	42a5      	cmp	r5, r4
 8002c60:	d105      	bne.n	8002c6e <__libc_init_array+0x2e>
 8002c62:	bd70      	pop	{r4, r5, r6, pc}
 8002c64:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c68:	4798      	blx	r3
 8002c6a:	3501      	adds	r5, #1
 8002c6c:	e7ee      	b.n	8002c4c <__libc_init_array+0xc>
 8002c6e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c72:	4798      	blx	r3
 8002c74:	3501      	adds	r5, #1
 8002c76:	e7f2      	b.n	8002c5e <__libc_init_array+0x1e>
 8002c78:	08002d0c 	.word	0x08002d0c
 8002c7c:	08002d0c 	.word	0x08002d0c
 8002c80:	08002d0c 	.word	0x08002d0c
 8002c84:	08002d10 	.word	0x08002d10

08002c88 <_init>:
 8002c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c8a:	bf00      	nop
 8002c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c8e:	bc08      	pop	{r3}
 8002c90:	469e      	mov	lr, r3
 8002c92:	4770      	bx	lr

08002c94 <_fini>:
 8002c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c96:	bf00      	nop
 8002c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c9a:	bc08      	pop	{r3}
 8002c9c:	469e      	mov	lr, r3
 8002c9e:	4770      	bx	lr
